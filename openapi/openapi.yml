openapi: 3.0.1
info:
  title: Brevo API
  description: Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  version: 3.0.0
externalDocs:
  description: Brevo's API documentation
  url: https://developers.brevo.com/reference
servers:
  - url: https://api.brevo.com/v3
security:
  - api-key: [ ]
paths:
  /emailCampaigns:
    get:
      tags:
        - Email Campaigns
      summary: Return all your created email campaigns
      operationId: getEmailCampaigns
      parameters:
        - name: type
          in: query
          description: Filter on the type of the campaigns
          schema:
            type: string
            enum:
              - classic
              - trigger
        - name: status
          in: query
          description: Filter on the status of the campaign
          schema:
            type: string
            enum:
              - suspended
              - archive
              - sent
              - queued
              - draft
              - inProcess
        - name: statistics
          in: query
          description: Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
          schema:
            type: string
            enum:
              - globalStats
              - linksStats
              - statsByDomain
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.
            **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns.
            **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
          schema:
            type: string
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: excludeHtmlContent
          in: query
          description: Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body
          schema:
            type: boolean
            enum:
              - true
              - false
      responses:
        200:
          description: Email campaigns informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailCampaigns'
              examples:
                response:
                  value:
                    count: 2
                    campaigns:
                      - id: 12
                        name: EN - Sales Summer 2017
                        subject: 20% OFF for 2017 Summer Sales
                        previewText: Don't miss the sale
                        type: classic
                        status: sent
                        scheduledAt: 2017-06-01T12:30:00Z
                        testSent: true
                        header: '[DEFAULT_HEADER]'
                        footer: '[DEFAULT_FOOTER]'
                        sender:
                          email: marketing@mycompany.com
                          name: Marketing
                          id: 26
                        replyTo: replyto@domain.com
                        toField: '{FNAME} {LNAME}'
                        htmlContent: This is my HTML Content
                        shareLink: http://example.com/fhsgccc.html?t=9865448900
                        tag: Newsletter
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                        inlineImageActivation: true
                        mirrorActive: true
                        recurring: false
                        recipients:
                          lists:
                            - 5
                          exclusionLists:
                            - 13
                        statistics:
                          globalStats:
                            uniqueClicks: 2300
                            clickers: 2665
                            complaints: 1
                            delivered: 19765
                            sent: 19887
                            softBounces: 100
                            hardBounces: 87
                            uniqueViews: 7779
                            trackableViews: 5661
                            trackableViewsRate: 23.45
                            estimatedViews: 560
                            unsubscriptions: 2
                            viewed: 8999
                          campaignStats:
                            - listId: 5
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              trackableViews: 5661
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                          mirrorClick: 120
                          remaining: 1000
                          linksStats:
                            http://myUrl1.domain.com: 80
                          statsByDomain:
                            yahoo.com:
                              uniqueClicks: 298
                              clickers: 533
                              complaints: 0
                              sent: 25601
                              softBounces: 5
                              hardBounces: 0
                              uniqueViews: 3527
                              unsubscriptions: 17
                              viewed: 5255
                              delivered: 25596
                            hotmail.co.uk:
                              uniqueClicks: 1970
                              clickers: 2720
                              complaints: 5
                              sent: 117055
                              softBounces: 111
                              hardBounces: 0
                              uniqueViews: 21111
                              unsubscriptions: 105
                              viewed: 35251
                              delivered: 117056
                      - id: 22
                        name: Weekly - 1
                        subject: Week 1 - Newsletter
                        previewText: your weekly newsletter
                        type: Classic
                        status: draft
                        scheduledAt: ""
                        testSent: false
                        header: '[DEFAULT_HEADER]'
                        footer: '[DEFAULT_FOOTER]'
                        sender:
                          email: newsletter@mycompany.com
                          name: Newsletter
                          id: 26
                        replyTo: replyto@domain.com
                        toField: '{FNAME} {LNAME}'
                        htmlContent: This is my HTML Content
                        shareLink: http://example.com/fhsgccc.html?t=9865448900
                        tag: Newsletter
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                        inlineImageActivation: true
                        mirrorActive: true
                        recurring: false
                        recipients:
                          lists:
                            - 10
                          exclusionLists:
                            - 45
                        statistics:
                          globalStats:
                            uniqueClicks: 2300
                            clickers: 2665
                            complaints: 1
                            delivered: 19765
                            sent: 19887
                            softBounces: 100
                            hardBounces: 87
                            uniqueViews: 7779
                            trackableViews: 5661
                            trackableViewsRate: 23.45
                            estimatedViews: 560
                            unsubscriptions: 2
                            viewed: 8999
                          campaignStats:
                            - listId: 10
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              trackableViews: 5661
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                          mirrorClick: 120
                          remaining: 1000
                          linksStats:
                            http://myUrl1.domain.com:
                              nbClick: 80
                            http://myUrl2.domain.com:
                              nbClick: 80
                            http://myUrl3.domain.com:
                              nbClick: 80
                          statsByDomain:
                            gmail:
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
                            aol:
                              uniqueClicks: 2300
                              clickers: 2665
                              complaints: 1
                              delivered: 19765
                              sent: 19887
                              softBounces: 100
                              hardBounces: 87
                              uniqueViews: 7779
                              unsubscriptions: 2
                              viewed: 8999
                              deferred: 30
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Email Campaigns
      summary: Create an email campaign
      operationId: createEmailCampaign
      requestBody:
        description: Values to create a campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createEmailCampaign'
        required: true
      responses:
        201:
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}:
    get:
      tags:
        - Email Campaigns
      summary: Get an email campaign report
      operationId: getEmailCampaign
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
        - name: statistics
          in: query
          description: Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.
          required: false
          schema:
            type: string
            enum:
              - globalStats
              - linksStats
              - statsByDomain
              - statsByDevice
              - statsByBrowser
      responses:
        200:
          description: Email campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailCampaign'
              examples:
                response:
                  value:
                    id: 22
                    name: Weekly - 1
                    subject: Week 1 - Newsletter
                    previewText: your weekly newsletter!
                    type: classic
                    status: draft
                    scheduledAt: 2017-09-22T12:30:00Z
                    testSent: false
                    header: '[DEFAULT_HEADER]'
                    footer: '[DEFAULT_FOOTER]'
                    sender:
                      email: newsletter@mycompany.com
                      name: Newsletter
                      id: 26
                    replyTo: replyto@domain.com
                    toField: '{FNAME} {LNAME}'
                    htmlContent: This is my HTML Content
                    shareLink: http://dhh.brevo.com/fhsgccc.html?t=9865448900
                    tag: Newsletter
                    createdAt: 2017-05-01T12:30:00Z
                    modifiedAt: 2017-05-01T12:30:00Z
                    inlineImageActivation: true
                    mirrorActive: true
                    recurring: false
                    recipients:
                      lists:
                        - 22
                      exclusionLists:
                        - 45
                    statistics:
                      globalStats:
                        uniqueClicks: 2300
                        clickers: 2665
                        complaints: 1
                        delivered: 19765
                        sent: 19887
                        softBounces: 100
                        hardBounces: 87
                        uniqueViews: 7779
                        trackableViews: 5661
                        trackableViewsRate: 23.45
                        estimatedViews: 560
                        unsubscriptions: 2
                        viewed: 8999
                      campaignStats:
                        - listId: 22
                          uniqueClicks: 2300
                          clickers: 2665
                          complaints: 1
                          delivered: 19765
                          sent: 19887
                          softBounces: 100
                          hardBounces: 87
                          uniqueViews: 7779
                          trackableViews: 5661
                          unsubscriptions: 2
                          viewed: 8999
                          deferred: 30
                      mirrorClick: 120
                      remaining: 1000
                      linksStats:
                        http://myUrl1.domain.com:
                          nbClick: 80
                        http://myUrl2.domain.com:
                          nbClick: 80
                        http://myUrl3.domain.com:
                          nbClick: 80
                      statsByDomain:
                        gmail:
                          uniqueClicks: 2300
                          clickers: 2665
                          complaints: 1
                          delivered: 19765
                          sent: 19887
                          softBounces: 100
                          hardBounces: 87
                          uniqueViews: 7779
                          unsubscriptions: 2
                          viewed: 8999
                          deferred: 30
                      statsByDevice:
                        desktop:
                          mac:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 2
                            uniqueViews: 1
                        mobile:
                          androidMobile:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 1
                            uniqueViews: 0
                          iPhone:
                            clickers: 1
                            uniqueClicks: 0
                            viewed: 2
                            uniqueViews: 0
                      statsByBrowser:
                        thunderbird:
                          clickers: 1
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
                        safari:
                          clickers: 1
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
                        internetExplorer:
                          clickers: 0
                          uniqueClicks: 0
                          viewed: 1
                          uniqueViews: 0
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Email Campaigns
      summary: Update an email campaign
      operationId: updateEmailCampaign
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateEmailCampaign'
        required: true
      responses:
        204:
          description: Email campaign updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Email Campaigns
      summary: Delete an email campaign
      operationId: deleteEmailCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Email campaign has been deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendNow:
    post:
      tags:
        - Email Campaigns
      summary: Send an email campaign immediately, based on campaignId
      operationId: sendEmailCampaignNow
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Email campaign has been scheduled
          content: { }
        400:
          description: Campaign could not be sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        402:
          description: You don't have enough credit to send your campaign. Please update your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendTest:
    post:
      tags:
        - Email Campaigns
      summary: Send an email campaign to your test list
      operationId: sendTestEmail
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        204:
          description: Test email has been sent successfully to all recipients
          content: { }
        400:
          description: Test email could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
  /emailCampaigns/{campaignId}/status:
    put:
      tags:
        - Email Campaigns
      summary: Update an email campaign status
      operationId: updateCampaignStatus
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Status of the campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        required: true
      responses:
        204:
          description: The campaign status has been updated successfully
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sendReport:
    post:
      tags:
        - Email Campaigns
      summary: Send the report of a campaign
      description: A PDF will be sent to the specified email addresses
      operationId: sendReport
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values for send a report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        required: true
      responses:
        204:
          description: Report has been successfully sent to the defined recipients
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/abTestCampaignResult:
    get:
      tags:
        - Email Campaigns
      summary: Get an A/B test email campaign results
      description: Obtain winning version of an A/B test email campaign
      operationId: getAbTestCampaignResult
      parameters:
        - name: campaignId
          in: path
          description: Id of the A/B test campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: A/B test email campaign Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/abTestCampaignResult'
              examples:
                response:
                  value:
                    winningVersion: B
                    winningCriteria: Click
                    openRate: 100%
                    clickRate: 50%
                    winningVersionRate: 0%
                    statistics:
                      openers:
                        Version A: 20%
                        Version B: 100%
                      clicks:
                        Version A: 0%
                        Version B: 50%
                      unsubscribed:
                        Version A: 20%
                        Version B: 0%
                      softBounces:
                        Version A: 0%
                        Version B: 0%
                      hardBounces:
                        Version A: 0%
                        Version B: 0%
                      complaints:
                        Version A: 0%
                        Version B: 0%
                    clickedLinks:
                      Version A:
                        - link: https://google.com
                          clicksCount: 0
                          clickRate: 0%
                        - link: https://youtube.com
                          clicksCount: 0
                          clickRate: 0%
                      Version B:
                        - link: http://www.github.com
                          clicksCount: 2
                          clickRate: 40%
                        - link: http://www.stackoverflow.com
                          clicksCount: 3
                          clickRate: 60%
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: A/B test Email Campaign not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/sharedUrl:
    get:
      tags:
        - Email Campaigns
      summary: Get a shared template url
      description: Get a unique URL to share & import an email template from one Brevo
        account to another.
      operationId: getSharedTemplateUrl
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign or template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Shared template URL information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSharedTemplateUrl'
              examples:
                response:
                  value:
                    sharedUrl: https://my.brevo.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign/Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        405:
          description: Only email campaigns or templates are allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
        - Email Campaigns
      summary: Export the recipients of an email campaign
      operationId: emailExportRecipients
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to send for a recipient export request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailExportRecipients'
        required: false
      responses:
        202:
          $ref: '#/components/responses/createdProcessId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /emailCampaigns/images:
    post:
      tags:
        - Email Campaigns
      summary: Upload an image to your account's image gallery
      operationId: uploadImageToGallery
      requestBody:
        description: Parameters to upload an image
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uploadImageToGallery'
        required: true
      responses:
        201:
          description: Image has been successfully uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadImageModel'
              examples:
                response:
                  value:
                    url: 'https://img.mailinblue.com/100000/images/rnb/original/62casdase8wewq9df1c2f27c.jpeg'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/email:
    post:
      tags:
        - Transactional emails
      summary: Send a transactional email
      operationId: sendTransacEmail
      requestBody:
        description: Values to send a transactional email
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendSmtpEmail'
        required: true
      responses:
        201:
          description: transactional email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSmtpEmail'
              examples:
                response:
                  value:
                    messageId: '<201798300811.5787683@relay.domain.com>'
        202:
          description: transactional email scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scheduleSmtpEmail'
              examples:
                response:
                  value:
                    messageId: '<201798300811.5787683@relay.domain.com>'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emails:
    get:
      tags:
        - Transactional emails
      summary: Get the list of transactional emails on the basis of allowed filters
      description: This endpoint will show the list of emails for past 30 days by
        default. To retrieve emails before that time, please pass startDate and endDate
        in query filters.
      operationId: getTransacEmailsList
      parameters:
        - name: email
          in: query
          description: |
            **Mandatory if templateId and messageId are not passed in query filters.** Email address to which transactional email has been sent.
          schema:
            type: string
        - name: templateId
          in: query
          description: |
            **Mandatory if email and messageId are not passed in query filters.** Id of the template that was used to compose transactional email.
          schema:
            type: integer
            format: int64
        - name: messageId
          in: query
          description: |
            **Mandatory if templateId and email are not passed in query filters.** Message ID of the transactional email sent.
          schema:
            type: string
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from which you want to fetch the list. **Maximum time period that can be selected is one month**.
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till which you want to fetch the list. **Maximum time period that can be selected is one month.**
          schema:
            type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Number of documents returned per page
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 500
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: List of transactional emails
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacEmailsList'
              examples:
                response:
                  value:
                    count: 120
                    transactionalEmails:
                      - email: abc@xyz.com
                        subject: summer camp
                        templateId: 15
                        messageId: <201798300811.5787683@relay.domain.com>
                        uuid: 5a78c-209ok98262910-std2341
                        date: 2019-05-25T11:53:26Z
                      - email: test@test.com
                        subject: details verification
                        templateId: 15
                        messageId: <201798300811.5700093@relay.domain.com>
                        uuid: 5a78c-209ok98262910-s99a341
                        date: 2019-05-25T07:28:11Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emails/{uuid}:
    get:
      tags:
        - Transactional emails
      summary: Get the personalized content of a sent transactional email
      operationId: getTransacEmailContent
      parameters:
        - name: uuid
          in: path
          description: Unique id of the transactional email that has been sent to a
            particular contact
          required: true
          schema:
            type: string
      responses:
        200:
          description: Transactional email content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacEmailContent'
              examples:
                response:
                  value:
                    email: abc@example.com
                    subject: Summer Camps
                    templateId: 12
                    date: 2016-02-25T11:53:26Z
                    events:
                      - name: sent
                        time: 2016-02-25T11:53:26Z
                      - name: delivered
                        time: 2016-02-25T11:55:26Z
                      - name: opened
                        time: 2016-02-26T09:53:26Z
                    body: <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>
                      <p>This is the actual html content sent</p> </body> </html>
  /smtp/log/{identifier}:
    delete:
      tags:
        - Transactional emails
      summary: Delete an SMTP transactional log
      parameters:
        - name: identifier
          in: path
          description: MessageId or Email of the transactional log(s) to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Transactional Logs deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Message ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates:
    get:
      tags:
        - Transactional emails
      summary: Get the list of email templates
      operationId: getSmtpTemplates
      parameters:
        - name: templateStatus
          in: query
          description: Filter on the status of the template. Active = true, inactive
            = false
          schema:
            type: boolean
        - name: limit
          in: query
          description: Number of documents returned per page
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: transactional email templates informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmtpTemplates'
              examples:
                response:
                  value:
                    count: 2
                    templates:
                      - id: 5
                        name: ChristomasTimeTemplate
                        subject: Merry Christmas
                        isActive: false
                        testSent: false
                        sender:
                          name: John
                          email: john.smith@example.com
                          id: 23
                        replyTo: replyto@domain.com
                        toField: ""
                        tag: Festival
                        htmlContent: HTML CONTENT 1
                        createdAt: 2016-02-24T14:44:24Z
                        modifiedAt: 2016-02-24T15:37:11Z
                      - id: 12
                        name: SummerSales2017Template
                        subject: Enjoy our summer Sales !
                        isActive: true
                        testSent: false
                        sender:
                          name: John
                          email: john.smith@example.com
                          id: 23
                        replyTo: replyto@domain.com
                        toField: ""
                        tag: Summer
                        htmlContent: HTML CONTENT 2
                        createdAt: 2016-02-25T11:53:26Z
                        modifiedAt: 2016-02-25T11:53:26Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Transactional emails
      summary: Create an email template
      operationId: createSmtpTemplate
      requestBody:
        description: values to update in transactional email template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmtpTemplate'
        required: true
      responses:
        201:
          # transactional email template created
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates/{templateId}:
    get:
      tags:
        - Transactional emails
      summary: Returns the template information
      operationId: getSmtpTemplate
      parameters:
        - name: templateId
          in: path
          description: id of the template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Email template informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmtpTemplateOverview'
              examples:
                response:
                  value:
                    id: 33
                    name: OrderConfirmation
                    subject: 'Order Confirmation : Thanks for your Purchase !'
                    isActive: true
                    testSent: false
                    sender:
                      name: John
                      email: john.smith@example.com
                      id: 26
                    replyTo: replyto@domain.com
                    toField: ""
                    tag: ""
                    htmlContent: HTML CONTENT 4
                    createdAt: 2016-02-25T11:53:26Z
                    modifiedAt: 2016-02-25T11:53:26Z
                    doiTemplate: false
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Transactional emails
      summary: Update an email template
      operationId: updateSmtpTemplate
      parameters:
        - name: templateId
          in: path
          description: id of the template
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: values to update in transactional email template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmtpTemplate'
        required: true
      responses:
        204:
          description: transactional email template updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Transactional emails
      summary: Delete an inactive email template
      operationId: deleteSmtpTemplate
      parameters:
        - name: templateId
          in: path
          description: id of the template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Inactive transactional email template has been deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/templates/{templateId}/sendTest:
    post:
      tags:
        - Transactional emails
      summary: Send a template to your test list
      operationId: sendTestTemplate
      parameters:
        - name: templateId
          in: path
          description: Id of the template
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestEmail'
        required: true
      responses:
        204:
          description: Test email has been sent successfully to all recipients
          content: { }
        400:
          description: Test email could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendFailed'
        404:
          description: Template ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/aggregatedReport:
    get:
      tags:
        - Transactional emails
      summary: Get your transactional email activity aggregated over a period of time
      description: This endpoint will show the aggregated stats for past 90 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days
      operationId: getAggregatedSmtpReport
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          description: Tag of the emails
          schema:
            type: string
      responses:
        200:
          description: Aggregated report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAggregatedReport'
              examples:
                response:
                  value:
                    range: 2016-09-08|2017-04-28
                    requests: 19887
                    delivered: 18996
                    hardBounces: 234
                    softBounces: 1533
                    clicks: 9987
                    uniqueClicks: 8766
                    opens: 17654
                    uniqueOpens: 13688
                    spamReports: 1
                    blocked: 2
                    invalid: 0
                    unsubscribed: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/reports:
    get:
      tags:
        - Transactional emails
      summary: Get your transactional email activity aggregated per day
      operationId: getSmtpReport
      parameters:
        - name: limit
          in: query
          description: Number of documents returned per page
          schema:
            maximum: 30
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document on the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD)
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD)
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          description: Tag of the emails
          schema:
            type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Aggregated report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getReports'
              examples:
                response:
                  value:
                    reports:
                      - date: 2017-04-30
                        requests: 10756
                        delivered: 10103
                        hardBounces: 21
                        softBounces: 137
                        clicks: 1026
                        uniqueClicks: 720
                        opens: 5091
                        uniqueOpens: 2318
                        spamReports: 0
                        blocked: 519
                        invalid: 1
                        unsubscribed: 0
                      - date: 2017-05-01
                        requests: 18812
                        delivered: 17499
                        hardBounces: 34
                        softBounces: 254
                        clicks: 1514
                        uniqueClicks: 1090
                        opens: 10089
                        uniqueOpens: 4393
                        spamReports: 0
                        blocked: 920
                        invalid: 2
                        unsubscribed: 3
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/statistics/events:
    get:
      tags:
        - Transactional emails
      summary: Get all your transactional email activity (unaggregated events)
      description: This endpoint will show the aggregated stats for past 30 days by default if `startDate` and `endDate` OR `days` is not passed. The date range can not exceed 90 days
      operationId: getEmailEventReport
      parameters:
        - name: limit
          in: query
          description: Number limitation for the result returned
          schema:
            maximum: 5000
            type: integer
            format: int64
            default: 2500
            minimum: 0
        - name: offset
          in: query
          description: Beginning point in the list to retrieve from.
          schema:
            type: integer
            format: int64
            default: 0
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
          schema:
            type: integer
            format: int64
        - name: email
          in: query
          description: Filter the report for a specific email addresses
          schema:
            type: string
            format: email
        - name: event
          in: query
          description: Filter the report for a specific event type
          schema:
            type: string
            enum:
              - bounces
              - hardBounces
              - softBounces
              - delivered
              - spam
              - requests
              - opened
              - clicks
              - invalid
              - deferred
              - blocked
              - unsubscribed
              - error
              - loadedByProxy
        - name: tags
          in: query
          description: Filter the report for tags (serialized and urlencoded array)
          schema:
            type: string
        - name: messageId
          in: query
          description: Filter on a specific message id
          schema:
            type: string
        - name: templateId
          in: query
          description: Filter on a specific template id
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Email events report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEmailEventReport'
              examples:
                response:
                  value:
                    events:
                      - email: john.smith@example.com
                        date: 2017-03-12T12:30:00Z
                        messageId: <201798300811.5787683@example.domain.com>
                        event: deferred
                        reason: Error connection timeout
                        tag: OrderConfirmation
                        from: john@example.com
                        templateId: 4
                      - email: john.smith@example.com
                        date: 2017-03-13T16:30:00Z
                        messageId: <201798300811.5787683@example.domain.com>
                        event: delivered
                        tag: OrderConfirmation
                        from: john@example.com
                        templateId: 5
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedContacts/{email}:
    delete:
      tags:
        - Transactional emails
      summary: Unblock or resubscribe a transactional contact
      parameters:
        - name: email
          in: path
          description: contact email (urlencoded) to unblock.
          required: true
          schema:
            type: string
      responses:
        204:
          description: Contact unblocked
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Contact email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedContacts:
    get:
      tags:
        - Transactional emails
      summary: Get the list of blocked or unsubscribed transactional contacts
      operationId: getTransacBlockedContacts
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
          schema:
            type: string
        - name: limit
          in: query
          description: Number of documents returned per page
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
            minimum: 0
        - name: offset
          in: query
          description: Index of the first document on the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: senders
          in: query
          description: Comma separated list of emails of the senders from which contacts
            are blocked or unsubscribed
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: List of blocked or unsubscribed transactional contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacBlockedContacts'
              examples:
                response:
                  value:
                    count: 1
                    contacts:
                      - email: abc@xyz.com
                        senderEmail: ez312@gmal.com
                        reason:
                          message: Admin blocked
                          code: adminBlocked
                        blockedAt: 2017-05-01T12:30:00Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedDomains:
    get:
      tags:
        - Transactional emails
      summary: Get the list of blocked domains
      description: Get the list of blocked domains
      operationId: getBlockedDomains
      responses:
        200:
          description: List of blocked domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getBlockedDomains'
              examples:
                response:
                  value:
                    domains:
                      - example.com
                      - testdomain.com
    post:
      tags:
        - Transactional emails
      summary: Add a new domain to the list of blocked domains
      description: Blocks a new domain in order to avoid messages being sent to the same
      operationId: blockNewDomain
      requestBody:
        description: Name of the domain to be blocked
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blockDomain'
        required: true
      responses:
        201:
          description: Domain is successfully blocked
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/blockedDomains/{domain}:
    delete:
      tags:
        - Transactional emails
      summary: Unblock an existing domain from the list of blocked domains
      description: Unblocks an existing domain from the list of blocked domains
      operationId: deleteBlockedDomain
      parameters:
        - name: domain
          description: The name of the domain to be deleted
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Domain is successfully deleted from the list of blocked domains
          content: { }
        404:
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/deleteHardbounces:
    post:
      tags:
        - Transactional emails
      summary: Delete hardbounces
      description: Delete hardbounces. To use carefully (e.g. in case of temporary
        ISP failures)
      operationId: deleteHardbounces
      requestBody:
        description: values to delete hardbounces
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteHardbounces'
        required: false
      responses:
        204:
          description: Hardbounces deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/emailStatus/{identifier}:
    get:
      tags:
        - Transactional emails
      summary: Fetch scheduled emails by batchId or messageId
      description: Fetch scheduled batch of emails by batchId or single scheduled email by messageId (Can retrieve data upto 30 days old)
      operationId: getScheduledEmailById
      parameters:
        - name: identifier
          description: The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.
          in: path
          required: true
          examples:
            batchId:
              value: 4320f270-a4e3-4a2e-b591-edfe30a5e627
              summary: batchId of scheduled batch
            messageId:
              value: <202202231031.53307417725@smtp-relay.mailin.fr>
              summary: messageId of scheduled email
          schema:
            type: string
        - name: startDate
          description: Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date.
          in: query
          example: '2022-02-02'
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          description: Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          example: '2022-03-02'
          required: false
          schema:
            type: string
            format: date
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed. Not valid when identifier is `messageId`.
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: status
          in: query
          description: Filter the records by `status` of the scheduled email batch or message. Not valid when identifier is `messageId`.
          required: false
          schema:
            type: string
            enum:
              - processed
              - inProgress
              - queued
        - name: limit
          description: Number of documents returned per page. Not valid when identifier is `messageId`.
          in: query
          required: false
          example: 100
          schema:
            type: integer
            format: int64
            default: 100
            maximum: 500
            minimum: 0
        - name: offset
          description: Index of the first document on the page.  Not valid when identifier is `messageId`.
          in: query
          required: false
          example: 0
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: Scheduled email batches
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/getScheduledEmailByBatchId'
                  - $ref: '#/components/schemas/getScheduledEmailByMessageId'
              examples:
                batchId:
                  value:
                    {
                      "count": 3,
                      "batches": [
                        {
                          "scheduledAt": "2022-02-28T11:36:43.576000000Z",
                          "createdAt": "2022-02-26T11:36:43.576000000Z",
                          "status": "queued"
                        },
                        {
                          "scheduledAt": "2022-02-25T11:36:43.576000000Z",
                          "createdAt": "2022-02-24T11:36:43.576000000Z",
                          "status": "processed"
                        },
                        {
                          "scheduledAt": "2022-02-26T11:36:43.576000000Z",
                          "createdAt": "2022-02-25T11:36:43.576000000Z",
                          "status": "inProgress"
                        }
                      ]
                    }
                messageId:
                  value:
                    {
                      "scheduledAt": "2022-02-28T11:36:43.576000000Z",
                      "createdAt": "2022-02-26T11:36:43.576000000Z",
                      "status": "queued"
                    }
        400:
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Record(s) for identifier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smtp/email/{identifier}:
    delete:
      tags:
        - Transactional emails
      summary: Delete scheduled emails by batchId or messageId
      description: Delete scheduled batch of emails by batchId or single scheduled email by messageId
      operationId: deleteScheduledEmailById
      parameters:
        - name: identifier
          description: The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.
          in: path
          required: true
          examples:
            batchId:
              value: 4320f270-a4e3-4a2e-b591-edfe30a5e627
              summary: batchId of scheduled batch
            messageId:
              value: <202202231031.53307417725@smtp-relay.mailin.fr>
              summary: messageId of scheduled email
          schema:
            type: string
      responses:
        204:
          description: Scheduled email(s) deleted
          content: { }
        400:
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Record(s) for identifier not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts:
    get:
      tags:
        - Contacts
      summary: Get all the contacts
      operationId: getContacts
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: modifiedSince
          in: query
          description: |
            Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: createdSince
          in: query
          description: |
            Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: segmentId
          in: query
          description: Id of the segment. **Either listIds or segmentId can be passed.**
          schema:
            type: integer
            format: int64
        - name: listIds
          in: query
          description: Ids of the list. **Either listIds or segmentId can be passed.**
          schema:
            type: array
            items:
              type: integer
              format: int64
      responses:
        200:
          description: All contacts listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts'
              examples:
                response:
                  value:
                    contacts:
                      - email: contact1@example.com
                        id: 247
                        emailBlacklisted: true
                        smsBlacklisted: true
                        createdAt: 2017-05-01T17:05:03Z
                        modifiedAt: 2017-05-01T17:05:03Z
                        listIds:
                          - 43
                          - 58
                        attributes:
                          SMS: "33058407250"
                          IDENTIFICATION: 1-3RHQ-259
                          CIV: MS
                          LAST_NAME: Brennon
                          FIRST_NAME: Meg
                          DOB: 1986-05-02
                          ADDRESS: 1 5th avenue
                          ZIP_CODE: "44300"
                          CITY: New-York
                          ACTION_CODE: 17HH98CH
                      - email: 33058407248@mailin-sms.com
                        id: 245
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: 2017-05-01T17:05:03Z
                        modifiedAt: 2017-05-01T17:05:03Z
                        listIds:
                          - 43
                          - 61
                          - 58
                        attributes:
                          SMS: "33058407248"
                          IDENTIFICATION: 1-78JS-432
                          CIV: MS
                          LAST_NAME: Press
                          FIRST_NAME: Sophia
                          DOB: 1980-09-11
                          ADDRESS: 5 Flower Street
                          ZIP_CODE: "44119"
                          CITY: Seattle
                          ACTION_CODE: 17HU765
                    count: 3
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a contact
      operationId: createContact
      requestBody:
        description: Values to create a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createContact'
        required: true
      responses:
        201:
          description: Contact created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateContactModel'
              examples:
                response:
                  value:
                    id: 21
        204:
          description: Contact updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/doubleOptinConfirmation:
    post:
      tags:
        - Contacts
      summary: Create Contact via DOI (Double-Opt-In) Flow
      operationId: createDoiContact
      requestBody:
        description: Values to create the Double opt-in (DOI) contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDoiContact'
        required: true
      responses:
        201:
          description: DOI Contact created
          content: { }
        204:
          description: DOI Contact updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: createDoiContact
  /contacts/{identifier}:
    get:
      tags:
        - Contacts
      summary: Get a contact's details
      description: Along with the contact details, this endpoint will show the statistics of contact for the recent 90 days by default. To fetch the earlier statistics, please use Get contact campaign stats ``https://developers.brevo.com/reference/contacts-7#getcontactstats`` endpoint with the appropriate date ranges.
      operationId: getContactInfo
      parameters:
        - name: identifier
          in: path
          description: Email (urlencoded) OR ID of the contact OR its SMS attribute value
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate.
          schema:
            type: string
      responses:
        200:
          description: Contact informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExtendedContactDetails'
              examples:
                response:
                  value:
                    email: peggy.rain@example.com
                    id: 42
                    emailBlacklisted: false
                    smsBlacklisted: false
                    createdAt: 2017-05-02T16:40:31Z
                    modifiedAt: 2017-05-02T16:40:31Z
                    attributes:
                      FIRST_NAME: Peggy
                      LAST_NAME: Rain
                      SMS: "3087433387669"
                      CIV: "1"
                      DOB: 1986-04-13
                      ADDRESS: 987 5th avenue
                      ZIP_CODE: "87544"
                      CITY: New-York
                      AREA: NY
                    listIds:
                      - 40
                    statistics:
                      messagesSent:
                        - campaignId: 21
                          eventTime: 2016-05-03T20:15:13Z
                        - campaignId: 42
                          eventTime: 2016-10-17T10:30:01Z
                      opened:
                        - campaignId: 21
                          count: 2
                          eventTime: 2016-05-03T21:24:56Z
                          ip: 66.249.93.118
                        - campaignId: 68
                          count: 1
                          eventTime: 2017-01-30T13:56:40Z
                          ip: 66.249.93.217
                      clicked:
                        - campaignId: 21
                          links:
                            - count: 2
                              eventTime: 2016-05-03T21:25:01Z
                              ip: 66.249.93.118
                              url: https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=brevo&utm_campaign=test_camp&utm_medium=email
                      delivered:
                        - campaignId: 21
                          count: 2
                          eventTime: 2016-05-03T21:24:56Z
                          ip: 66.249.93.118
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete a contact
      operationId: deleteContact
      parameters:
        - name: identifier
          in: path
          description: Email (urlencoded) OR ID of the contact
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      responses:
        204:
          description: Contact deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        405:
          description: You're not allowed to delete registered email contact with
            Brevo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a contact
      operationId: updateContact
      parameters:
        - name: identifier
          in: path
          description: Email (urlencoded) OR ID of the contact
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
      requestBody:
        description: Values to update a contact
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateContact'
        required: true
      responses:
        204:
          description: Contact updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateContact
  /contacts/batch:
    post:
      tags:
        - Contacts
      summary: Update multiple contacts
      operationId: updateBatchContacts
      requestBody:
        description: Values to update multiple contacts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateBatchContacts'
        required: true
      responses:
        204:
          description: All contacts updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/{identifier}/campaignStats:
    get:
      tags:
        - Contacts
      summary: Get email campaigns' statistics for a contact
      operationId: getContactStats
      parameters:
        - name: identifier
          in: path
          description: Email (urlencoded) OR ID of the contact
          required: true
          schema:
            oneOf:
              - type: string
              - type: integer
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate. Maximum difference between startDate and endDate should not be greater than 90 days
          schema:
            type: string
      responses:
        200:
          description: Contact campaign statistics informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContactCampaignStats'
              examples:
                response:
                  value:
                    messagesSent:
                      - campaignId: 21
                        eventTime: 2016-05-03T20:15:13Z
                      - campaignId: 42
                        eventTime: 2016-10-17T10:30:01Z
                      - campaignId: 45
                        eventTime: 2016-11-09T11:45:02Z
                    opened:
                      - campaignId: 21
                        count: 2
                        eventTime: 2016-05-03T21:24:56Z
                        ip: 66.249.93.118
                      - campaignId: 45
                        count: 1
                        eventTime: 2017-01-30T13:56:40Z
                        ip: 66.249.93.217
                    clicked:
                      - campaignId: 21
                        links:
                          - count: 2
                            eventTime: 2016-05-03T21:25:01Z
                            ip: 66.249.93.118
                            url: https://url.domain.com/fbe5387ec717e333628380454f68670010b205ff/1/go?uid={EMAIL}&utm_source=brevo&utm_campaign=test_camp&utm_medium=email
                    delivered:
                      - campaignId: 21
                        count: 2
                        eventTime: 2016-05-03T21:24:56Z
                        ip: 66.249.93.118
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Contact's email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/attributes:
    get:
      tags:
        - Contacts
      summary: List all attributes
      operationId: getAttributes
      responses:
        200:
          description: Attributes listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAttributes'
              examples:
                response:
                  value:
                    attributes:
                      - name: LASTNAME
                        category: normal
                        type: text
                      - name: FIRSTNAME
                        category: normal
                        type: text
                      - name: DOB
                        category: normal
                        type: date
                      - name: GENDER
                        category: category
                        type: text
                        enumeration:
                          - value: 1
                            label: Men
                          - value: 2
                            label: Women
                          - value: 3
                            label: Kid
  /contacts/attributes/{attributeCategory}/{attributeName}:
    put:
      tags:
        - Contacts
      summary: Update contact attribute
      operationId: updateAttribute
      parameters:
        - name: attributeCategory
          in: path
          description: Category of the attribute
          required: true
          schema:
            type: string
            enum:
              - category
              - calculated
              - global
        - name: attributeName
          in: path
          description: Name of the existing attribute
          required: true
          schema:
            type: string
      requestBody:
        description: Values to update an attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAttribute'
        required: true
      responses:
        204:
          description: Attribute updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateAttribute
    post:
      tags:
        - Contacts
      summary: Create contact attribute
      operationId: createAttribute
      parameters:
        - name: attributeCategory
          in: path
          description: Category of the attribute
          required: true
          schema:
            type: string
            enum:
              - normal
              - transactional
              - category
              - calculated
              - global
        - name: attributeName
          in: path
          description: Name of the attribute
          required: true
          schema:
            type: string
      requestBody:
        description: Values to create an attribute
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createAttribute'
        required: true
      responses:
        201:
          description: Attribute created
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete an attribute
      operationId: deleteAttribute
      parameters:
        - name: attributeCategory
          in: path
          description: Category of the attribute
          required: true
          schema:
            type: string
            enum:
              - normal
              - transactional
              - category
              - calculated
              - global
        - name: attributeName
          in: path
          description: Name of the existing attribute
          required: true
          schema:
            type: string
      responses:
        204:
          description: Attribute deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Attribute not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/folders:
    get:
      tags:
        - Contacts
      summary: Get all folders
      operationId: getFolders
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          required: true
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document of the page
          required: true
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Folders informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolders'
              examples:
                response:
                  value:
                    folders:
                      - id: 42
                        name: Ninja_Form
                        totalBlacklisted: 98
                        totalSubscribers: 4567
                        uniqueSubscribers: 4665
                      - id: 29
                        name: Prestashop
                        totalBlacklisted: 10
                        totalSubscribers: 6543
                        uniqueSubscribers: 6553
                    count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a folder
      operationId: createFolder
      requestBody:
        description: Name of the folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        required: true
      responses:
        201:
          # description: Folder created
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: createFolder
  /contacts/folders/{folderId}:
    get:
      tags:
        - Contacts
      summary: Returns a folder's details
      operationId: getFolder
      parameters:
        - name: folderId
          in: path
          description: id of the folder
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Folder details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolder'
              examples:
                response:
                  value:
                    id: 1
                    name: Client_Folder
                    totalBlacklisted: 987
                    totalSubscribers: 16778
                    uniqueSubscribers: 17765
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a folder
      operationId: updateFolder
      parameters:
        - name: folderId
          in: path
          description: Id of the folder
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Name of the folder
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateFolder'
        required: true
      responses:
        204:
          description: Folder updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateFolder
    delete:
      tags:
        - Contacts
      summary: Delete a folder (and all its lists)
      operationId: deleteFolder
      parameters:
        - name: folderId
          in: path
          description: Id of the folder
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Folder deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/folders/{folderId}/lists:
    get:
      tags:
        - Contacts
      summary: Get lists in a folder
      operationId: getFolderLists
      parameters:
        - name: folderId
          in: path
          description: Id of the folder
          required: true
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Folder's Lists details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getFolderLists'
              examples:
                response:
                  value:
                    lists:
                      - id: 46
                        name: Reactiv
                        totalSubscribers: 7655
                        totalBlacklisted: 0
                        uniqueSubscribers: 7655
                      - id: 41
                        name: NY_Area
                        totalSubscribers: 3654
                        totalBlacklisted: 23
                        uniqueSubscribers: 3677
                      - id: 22
                        name: VIP_Customer
                        totalSubscribers: 8753
                        totalBlacklisted: 72
                        uniqueSubscribers: 8825
                    count: 3
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Folder ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists:
    get:
      tags:
        - Contacts
      summary: Get all the lists
      operationId: getLists
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Lists informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLists'
              examples:
                response:
                  value:
                    lists:
                      - id: 53
                        name: Spanish_Speakers
                        totalSubscribers: 5432
                        totalBlacklisted: 65
                        uniqueSubscribers: 5497
                        folderId: 1
                      - id: 50
                        name: Other
                        totalSubscribers: 10976
                        totalBlacklisted: 765
                        uniqueSubscribers: 11741
                        folderId: 2
                    count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Contacts
      summary: Create a list
      operationId: createList
      requestBody:
        description: Values to create a list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createList'
        required: true
      responses:
        201:
          # description: List created
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}:
    get:
      tags:
        - Contacts
      summary: Get a list's details
      operationId: getList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
      responses:
        200:
          description: List informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExtendedList'
              examples:
                response:
                  value:
                    id: 12
                    name: Newsletter_Weekly
                    startDate: 2023-10-0T00:00:00Z
                    endDate: 2023-04-0T00:00:00Z
                    totalSubscribers: 6533
                    totalBlacklisted: 63
                    uniqueSubscribers: 6596
                    folderId: 1
                    createdAt: 2016-02-26T11:56:08Z
                    campaignStats:
                      - campaignId: 15
                        stats:
                          uniqueClicks: 701
                          clickers: 789
                          complaints: 0
                          delivered: 6632
                          sent: 6645
                          softBounces: 34
                          hardBounces: 4
                          uniqueViews: 3442
                          unsubscriptions: 4
                          viewed: 4322
                          deferred: 0
                      - campaignId: 45
                        stats:
                          uniqueClicks: 654
                          clickers: 788
                          complaints: 1
                          delivered: 4078
                          sent: 4334
                          softBounces: 18
                          hardBounces: 2
                          uniqueViews: 987
                          unsubscriptions: 4
                          viewed: 1555
                          deferred: 0
                    dynamicList: false
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Contacts
      summary: Update a list
      operationId: updateList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a list
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateList'
        required: true
      responses:
        204:
          description: List updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Contacts
      summary: Delete a list
      operationId: deleteList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: List deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/segments:
    get:
      tags:
        - Contacts
      summary: Get all the segments
      operationId: getSegments
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Segments informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSegments'
              examples:
                response:
                  value:
                    segments:
                      - id: 53
                        segmentName: Segment1
                        categoryName: Name1
                        updatedAt: 2017-03-12T12:30:00Z
                      - id: 50
                        segmentName: Segment2
                        categoryName: Name2
                        updatedAt: 2017-03-12T12:30:00Z
                    count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts:
    get:
      tags:
        - Contacts
      summary: Get contacts in a list
      operationId: getContactsFromList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
        - name: modifiedSince
          in: query
          description: |
            Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 500
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Contact informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getContacts'
              examples:
                response:
                  value:
                    contacts:
                      - email: alex.pain@example.com
                        id: 45
                        emailBlacklisted: false
                        smsBlacklisted: true
                        createdAt: 2017-05-12T12:30:00Z
                        modifiedAt: 2017-05-12T12:30:00Z
                        listIds:
                          - 12
                          - 9
                          - 20
                        listUnsubscribed:
                          - 1
                          - 2
                        attributes:
                          LASTNAME: Pain
                          FIRSTNAME: Alex
                          DOB: 2010-12-31
                          GENDER: Kid
                      - email: john.smith@example.com
                        id: 32
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: 2017-05-12T12:30:00Z
                        modifiedAt: 2017-05-12T12:30:00Z
                        listIds:
                          - 12
                        listUnsubscribed:
                          - 1
                        attributes:
                          LASTNAME: Smith
                          FIRSTNAME: John
                          DOB: 1986-06-21
                          GENDER: Men
                      - email: helen.rose@example.com
                        id: 65
                        emailBlacklisted: true
                        smsBlacklisted: false
                        createdAt: 2017-05-12T12:30:00Z
                        modifiedAt: 2017-05-12T12:30:00Z
                        listIds:
                          - 12
                          - 9
                          - 20
                        listUnsubscribed:
                          - 1
                        attributes:
                          LASTNAME: Rose
                          FIRSTNAME: Helen
                          DOB: 1988-11-02
                          GENDER: Women
                          SMS: "3375599887766"
                    count: 17655
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts/add:
    post:
      tags:
        - Contacts
      summary: Add existing contacts to a list
      operationId: addContactToList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Emails addresses OR IDs of the contacts
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/addContactToListByEmails'
                - $ref: '#/components/schemas/addContactToListByIDs'
            examples:
              emailsArray:
                summary: Passing emails array
                value:
                  emails:
                    - jeff32@example.com
                    - jim56@example.com
              idsArray:
                summary: Passing ids array
                value:
                  ids:
                    - 1
                    - 2
        required: true
      responses:
        201:
          description: All contacts have been added successfully to the list with
            details of failed ones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
              examples:
                emailsArray:
                  summary: Response example when emails array is passed
                  value:
                    success:
                      - jeff32@example.com
                      - jim56@example.com
                    failure:
                      - david@example.com
                idsArray:
                  summary: Response example when ids array is paased
                  value:
                    success:
                      - 1
                      - 2
                    failure:
                      - 5
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/lists/{listId}/contacts/remove:
    post:
      tags:
        - Contacts
      summary: Delete a contact from a list
      operationId: removeContactFromList
      parameters:
        - name: listId
          in: path
          description: Id of the list
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Emails adresses OR IDs of the contacts OR 'all' true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/removeContactFromListByEmails'
                - $ref: '#/components/schemas/removeContactFromListByIDs'
                - $ref: '#/components/schemas/removeContactFromListByAll'
            examples:
              emailsArray:
                summary: Passing emails array
                value:
                  emails:
                    - jeff32@example.com
                    - jim56@example.com
              idsArray:
                summary: Passing ids array
                value:
                  ids:
                    - 1
                    - 2
              allTrue:
                summary: Passing 'all' true
                value:
                  all: true
        required: true
      responses:
        201:
          description: All contacts have been removed successfully from the list with
            details of failed ones
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postContactInfo'
              examples:
                emailsArray:
                  summary: Response example when emails array is passed
                  value:
                    success:
                      - jeff32@example.com
                      - jim56@example.com
                    failure:
                      - david@example.com
                idsArray:
                  summary: Response example when ids array is paased
                  value:
                    success:
                      - 1
                      - 2
                    failure:
                      - 5
                allTrue:
                  summary: Response example when 'all' is passed as true
                  value:
                    total: 23
                    processId: 5
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: List ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: contactEmails
  /contacts/export:
    post:
      tags:
        - Contacts
      summary: Export contacts
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input. File will be available in csv.
      operationId: requestContactExport
      requestBody:
        description: Values to request a contact export
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactExport'
        required: true
      responses:
        202:
          # description: Contact export request has been accepted
          $ref: '#/components/responses/createdProcessId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /contacts/import:
    post:
      tags:
        - Contacts
      summary: Import contacts
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input.
      operationId: importContacts
      requestBody:
        description: Values to import contacts in Brevo. To know more about the
          expected format, please have a look at ``https://help.brevo.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns``
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestContactImport'
        required: true
      responses:
        202:
          # description: Contact import request has been accepted
          $ref: '#/components/responses/createdProcessId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns:
    get:
      tags:
        - SMS Campaigns
      summary: Returns the information for all your created SMS campaigns
      operationId: getSmsCampaigns
      parameters:
        - name: status
          in: query
          description: Status of campaign.
          schema:
            type: string
            enum:
              - suspended
              - archive
              - sent
              - queued
              - draft
              - inProcess
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. **Prefer to pass your timezone in date-time format for accurate result** ( only available if either 'status' not passed and if passed is set to 'sent' )
          schema:
            type: string
        - name: limit
          in: query
          description: Number limitation for the result returned
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int64
            default: 500
        - name: offset
          in: query
          description: Beginning point in the list to retrieve from.
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: SMS campaigns informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsCampaigns'
              examples:
                response:
                  value:
                    campaigns:
                      - id: 2
                        name: PROMO CODE
                        status: sent
                        content: Visit our Store and get some discount !
                        scheduledAt: 2017-06-01T12:30:00Z
                        testSent: true
                        sender: MyCompany
                        createdAt: 2017-06-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                        sentDate: 2017-06-01T12:30:00Z
                        recipients:
                          lists:
                            - 21
                          exclusionLists:
                            - 13
                        statistics:
                          delivered: 2987
                          sent: 3000
                          processing: 0
                          softBounces: 3
                          hardBounces: 1
                          unsubscriptions: 3
                          answered: 2
                      - id: 10
                        name: SUMMER SALE
                        status: draft
                        content: Summer Sale is starting tomorrow. Get extra 10% with this
                          code:SUM17
                        scheduledAt: 2017-08-04T12:30:00Z
                        testSent: false
                        sender: MyCompany
                        createdAt: 2017-06-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                        sentDate: 2017-06-01T12:30:00Z
                        recipients:
                          lists:
                            - 21
                          exclusionLists:
                            - 13
                        statistics:
                          delivered: 2987
                          sent: 3000
                          processing: 0
                          softBounces: 3
                          hardBounces: 1
                          unsubscriptions: 3
                          answered: 2
                    count: 12
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - SMS Campaigns
      summary: Creates an SMS campaign
      operationId: createSmsCampaign
      requestBody:
        description: Values to create an SMS Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSmsCampaign'
        required: true
      responses:
        201:
          # description: SMS campaign created
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}:
    get:
      tags:
        - SMS Campaigns
      summary: Get an SMS campaign
      operationId: getSmsCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the SMS campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: SMS campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsCampaign'
              examples:
                response:
                  value:
                    id: 2
                    name: PROMO CODE
                    status: sent
                    content: Visit our Store and get some discount !
                    scheduledAt: 2017-06-01T12:30:00Z
                    testSent: true
                    sender: MyCompany
                    createdAt: 2017-06-01T12:30:00Z
                    modifiedAt: 2017-05-01T12:30:00Z
                    recipients:
                      lists:
                        - 21
                      exclusionLists:
                        - 13
                    statistics:
                      delivered: 2987
                      sent: 3000
                      processing: 0
                      softBounces: 3
                      hardBounces: 1
                      unsubscriptions: 3
                      answered: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - SMS Campaigns
      summary: Update an SMS campaign
      operationId: updateSmsCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the SMS campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update an SMS Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSmsCampaign'
        required: true
      responses:
        204:
          description: SMS campaign updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - SMS Campaigns
      summary: Delete an SMS campaign
      operationId: deleteSmsCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the SMS campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: SMS campaign has been deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/sendNow:
    post:
      tags:
        - SMS Campaigns
      summary: Send your SMS campaign immediately
      operationId: sendSmsCampaignNow
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: SMS campaign has been scheduled
          content: { }
        400:
          description: SMS Campaign could not be sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        402:
          description: You don't have enough credit to send your campaign. Please
            update your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/status:
    put:
      tags:
        - SMS Campaigns
      summary: Update a campaign's status
      operationId: updateSmsCampaignStatus
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Status of the campaign.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateCampaignStatus'
        required: true
      responses:
        204:
          description: The campaign status has been updated successfully
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: status
  /smsCampaigns/{campaignId}/sendTest:
    post:
      tags:
        - SMS Campaigns
      summary: Send a test SMS campaign
      operationId: sendTestSms
      parameters:
        - name: campaignId
          in: path
          description: Id of the SMS campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: |
          Mobile number of the recipient with the country code. This number **must belong to one of your contacts in Brevo account and must not be blacklisted**
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTestSms'
        required: true
      responses:
        204:
          description: Test SMS has been sent successfully to the recipient
          content: { }
        400:
          description: Test SMS could not be sent to the following email addresses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postSendSmsTestFailed'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /smsCampaigns/{campaignId}/exportRecipients:
    post:
      tags:
        - SMS Campaigns
      summary: Export an SMS campaign's recipients
      description: It returns the background process ID which on completion calls
        the notify URL that you have set in the input.
      operationId: requestSmsRecipientExport
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to send for a recipient export request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestSmsRecipientExport'
        required: false
      responses:
        202:
          # description: Recipient export request has been accepted
          $ref: '#/components/responses/createdProcessId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: recipientExport
  /smsCampaigns/{campaignId}/sendReport:
    post:
      tags:
        - SMS Campaigns
      summary: Send an SMS campaign's report
      description: Send report of Sent and Archived campaign, to the specified email
        addresses, with respective data and a pdf attachment in detail.
      operationId: sendSmsReport
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values for send a report
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendReport'
        required: true
      responses:
        204:
          description: Report has been successfully sent to the defined recipients
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/sms:
    post:
      tags:
        - Transactional SMS
      summary: Send SMS message to a mobile number
      operationId: sendTransacSms
      requestBody:
        description: Values to send a transactional SMS
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sendTransacSms'
        required: true
      responses:
        201:
          description: SMS has been sent successfully to the recipient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sendSms'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        402:
          description: You don't have enough credit to send your SMS. Please update
            your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sendTransacSms
  /transactionalSMS/statistics/aggregatedReport:
    get:
      tags:
        - Transactional SMS
      summary: Get your SMS activity aggregated over a period of time
      operationId: getTransacAggregatedSmsReport
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). **Not compatible with startDate and endDate**
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          description: Filter on a tag
          schema:
            type: string
      responses:
        200:
          description: Aggregated SMS report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacAggregatedSmsReport'
              examples:
                response:
                  value:
                    range: 2015-05-22|2017-11-29
                    requests: 54
                    delivered: 16
                    hardBounces: 5
                    softBounces: 26
                    blocked: 4
                    unsubscribed: 10
                    replied: 8
                    accepted: 6
                    rejected: 14
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/statistics/reports:
    get:
      tags:
        - Transactional SMS
      summary: Get your SMS activity aggregated per day
      operationId: getTransacSmsReport
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). **Not compatible with 'startDate' and 'endDate'**
          schema:
            type: integer
            format: int64
        - name: tag
          in: query
          description: Filter on a tag
          schema:
            type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Aggregated SMS report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTransacSmsReport'
              examples:
                response:
                  value:
                    reports:
                      - date: 2017-04-30
                        requests: 10756
                        delivered: 10103
                        hardBounces: 21
                        softBounces: 137
                        blocked: 1026
                        unsubscribed: 720
                        replied: 5091
                        accepted: 2318
                        rejected: 0
                      - date: 2017-05-01
                        requests: 18812
                        delivered: 17499
                        hardBounces: 34
                        softBounces: 254
                        blocked: 1514
                        unsubscribed: 1090
                        replied: 10089
                        accepted: 4393
                        rejected: 0
                      - date: 2017-05-02
                        requests: 14321
                        delivered: 13427
                        hardBounces: 16
                        softBounces: 176
                        blocked: 1646
                        unsubscribed: 1170
                        replied: 11563
                        accepted: 4689
                        rejected: 0
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /transactionalSMS/statistics/events:
    get:
      tags:
        - Transactional SMS
      summary: Get all your SMS activity (unaggregated events)
      operationId: getSmsEvents
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date (YYYY-MM-DD) of the report
          schema:
            type: string
        - name: offset
          in: query
          description: Index of the first document of the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). **Not compatible with 'startDate' and 'endDate'**
          schema:
            type: integer
            format: int64
        - name: phoneNumber
          in: query
          description: Filter the report for a specific phone number
          schema:
            type: string
        - name: event
          in: query
          description: Filter the report for specific events
          schema:
            type: string
            enum:
              - bounces
              - hardBounces
              - softBounces
              - delivered
              - sent
              - accepted
              - unsubscription
              - replies
              - blocked
              - rejected
        - name: tags
          in: query
          description: Filter the report for specific tags passed as a serialized urlencoded
            array
          schema:
            type: string
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: Sms events report informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSmsEventReport'
              examples:
                response:
                  value:
                    events:
                      - phoneNumber: "00911059469013"
                        date: 2015-05-20T12:30:00Z
                        messageId: "1473139351170140"
                        event: sent
                        reason: Recipient is currently unreachable
                        tag: cabWaiting
                      - phoneNumber: "00911059469013"
                        date: 2015-05-20T16:30:00Z
                        messageId: "1473139351170140"
                        event: delivered
                        reason: Recipient is currently unreachable
                        tag: cabRequest
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/{campaignId}:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Get a WhatsApp campaign
      operationId: getWhatsAppCampaign
      parameters:
        - name: campaignId
          in: path
          description: Id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Get WhatsApp campaign information on the basis of campaignId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappCampaignOverview'
              examples:
                response:
                  value:
                    id: 1672035851100690
                    campaignName: Test WhatsApp Campaign
                    campaignStatus: sent
                    scheduledAt: 2022-12-26T09:50:00Z
                    senderNumber: 9368207029
                    recipients:
                      type: list
                      includedLists:
                        - 22
                      excludedLists:
                        - 45
                    template:
                      name: "official_campaign8"
                      category: "MARKETING"
                      language: "en"
                      contains_button: true
                      display_header: false
                      components:
                        - type: "BODY"
                          text: "making it look like readable English."
                        - type: "BUTTONS"
                          buttons:
                            - type: "URL"
                              text: "vLorem Ipsum is simply du"
                              url: "app.brevo"
                            - type: "PHONE_NUMBER"
                              text: "Lorem Ipsum is simply dum"
                              phone_number: "+918800613137"
                      header_variables:
                        - name: "FIRSTNAME"
                          default: "INVALID HEADER"
                          index: 1
                          datatype: "text"
                      header_type: "text"
                      body_variable: [ ]
                      button_type: "CALL_TO_ACTION"
                      header_footer: true
                    stats:
                      sent: 3,
                      delivered: 3,
                      read: 2,
                      unsubscribe: 0,
                      notSent: 4
                    createdAt: 2022-12-26T06:50:00Z
                    modifiedAt: 2022-12-26T08:50:00Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - WhatsApp Campaigns
      summary: Delete a WhatsApp campaign
      operationId: deleteWhatsAppCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: WhatsApp campaign has been deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Campaign Id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - WhatsApp Campaigns
      summary: Update a WhatsApp campaign
      operationId: updateWhatsAppCampaign
      parameters:
        - name: campaignId
          in: path
          description: id of the campaign
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a WhatsApp Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWhatsAppCampaign'
        required: true
      responses:
        204:
          description: WhatsApp campaign has been deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template-list:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Return all your created WhatsApp templates
      operationId: getWhatsAppTemplates
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: source
          in: query
          description: source of the template
          required: false
          schema:
            type: string
            enum:
              - Automation
              - Conversations
      responses:
        200:
          description: WhatsApp templates informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappTemplates'
              examples:
                response:
                  value:
                    count: 2
                    templates:
                      - id: 235
                        name: campaign_22
                        type: whatsapp
                        status: approved
                        language: en
                        category: 'MARKETING'
                        errorReason: 'NONE'
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
                      - id: 124
                        name: test-template
                        type: whatsapp
                        status: draft
                        language: ''
                        category: 'MARKETING'
                        errorReason: 'NONE'
                        createdAt: 2017-0
                        modifiedAt: 2017-05-01T12:30:00Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Create and Send a WhatsApp campaign
      operationId: createWhatsAppCampaign
      requestBody:
        description: Values to create a WhatsApp Campaign
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWhatsAppCampaign'
        required: true
      responses:
        201:
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    get:
      tags:
        - WhatsApp Campaigns
      summary: Return all your created WhatsApp campaigns
      operationId: getWhatsAppCampaigns
      parameters:
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp campaigns created.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the WhatsApp campaigns created.
            **Prefer to pass your timezone in date-time format for accurate result**
          schema:
            type: string
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            minimum: 0
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: WhatsApp campaigns information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappCampaigns'
              examples:
                response:
                  value:
                    count: 23
                    campaigns:
                      - id: 1672035851100690
                        campaignName: campaign_22
                        campaignStatus: sent
                        templateId: 637660278078655
                        scheduledAt: 2022-12-27T09:50:00Z
                        errorReason: ""
                        invalidatedContacts: 0
                        stats:
                          sent: 3
                          delivered: 3
                          read: 2
                          unsubscribe: 0
                          notSent: 4
                        readPercentage: 28.57
                        createdAt: 2017-05-01T12:30:00Z
                        modifiedAt: 2017-05-01T12:30:00Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Create a WhatsApp template
      operationId: createWhatsAppTemplate
      requestBody:
        description: Values to create a WhatsApp template
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWhatsAppTemplate'
        required: true
      responses:
        201:
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/template/approval/{templateId}:
    post:
      tags:
        - WhatsApp Campaigns
      summary: Send your WhatsApp template for approval
      operationId: sendWhatsAppTemplateApproval
      parameters:
        - name: templateId
          in: path
          description: id of the template
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: WhatsApp template sent for approval
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsappCampaigns/config:
    get:
      tags:
        - WhatsApp Campaigns
      summary: Get your WhatsApp API account information
      operationId: getWhatsAppConfig
      responses:
        200:
          description: Get all the information of your WhatsApp API account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsAppConfig'
              examples:
                response:
                  value:
                    whatsappBusinessAccountID: 105569359072383
                    sendingLimit: TIER_1K
                    phoneNumberQuality: GREEN
                    whatsappBusinessAccountStatus: APPROVED
                    businessStatus: verified
                    phoneNumberNameStatus: APPROVED
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders:
    get:
      tags:
        - Senders
      summary: Get the list of all your senders
      operationId: getSenders
      parameters:
        - name: ip
          in: query
          description: |
            Filter your senders for a specific ip. **Available for dedicated IP usage only**
          schema:
            type: string
        - name: domain
          in: query
          description: Filter your senders for a specific domain
          schema:
            type: string
      responses:
        200:
          description: list of senders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSendersList'
              examples:
                response:
                  value:
                    senders:
                      - id: 1
                        name: Marketing
                        email: marketing@mycompany.com
                        active: true
                        ips:
                          - ip: 123.98.689.7
                            domain: mycompany.com
                            weight: 100
                      - id: 2
                        name: Newsletter
                        email: newsletter@mycompany.com
                        active: false
                        ips:
                          - ip: 123.98.689.7
                            domain: mycompany.com
                            weight: 50
                          - ip: 123.98.643.2
                            domain: news.mycompany.com
                            weight: 50
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Senders
      summary: Create a new sender
      operationId: createSender
      requestBody:
        description: sender's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSender'
        required: false
      responses:
        201:
          description: sender created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSenderModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
  /senders/{senderId}:
    put:
      tags:
        - Senders
      summary: Update a sender
      operationId: updateSender
      parameters:
        - name: senderId
          in: path
          description: Id of the sender
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: sender's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateSender'
        required: false
      responses:
        204:
          description: sender updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
    delete:
      tags:
        - Senders
      summary: Delete a sender
      operationId: deleteSender
      parameters:
        - name: senderId
          in: path
          description: Id of the sender
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: sender deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/{senderId}/validate:
    put:
      tags:
        - Senders
      summary: Validate Sender using OTP
      operationId: validateSenderByOTP
      parameters:
        - name: senderId
          in: path
          description: Id of the sender
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: otp
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otp'
        required: false
      responses:
        204:
          description: Sender verified
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: sender
  /senders/{senderId}/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for a sender
      operationId: getIpsFromSender
      parameters:
        - name: senderId
          in: path
          description: Id of the sender
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: list of dedicated IPs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIpsFromSender'
              examples:
                response:
                  value:
                    ips:
                      - id: 3
                        ip: 123.65.8.22
                        domain: mailing.myshop.dom
                        weight: 40
                      - id: 5
                        ip: 123.43.21.3
                        domain: newsletter.myshop.dom
                        weight: 60
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Sender ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/ips:
    get:
      tags:
        - Senders
      summary: Get all the dedicated IPs for your account
      operationId: getIps
      responses:
        200:
          description: list of dedicated IPs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getIps'
              examples:
                response:
                  value:
                    ips:
                      - id: 3
                        ip: 67.145.89.3
                        active: true
                        domain: mailing.myshop.com
                      - id: 5
                        ip: 76.76.125.9
                        active: true
                        domain: newsletter.myshop.com
                      - id: 6
                        ip: 123.65.8.22
                        active: false
                        domain: notifications.myshop.com
  /senders/domains:
    get:
      tags:
        - Domains
      summary: Get the list of all your domains
      operationId: getDomains
      responses:
        200:
          description: list of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDomainsList'
              examples:
                response:
                  value:
                    domains:
                      - id: 1
                        domain_name: mycompany.com
                        authenticated: true
                        verified: true
                        ip: 123.98.689.7
                      - id: 2
                        domain_name: myexample.com
                        authenticated: false
                        verified: true
                        ip: null
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Domains
      summary: Create a new domain
      operationId: createDomain
      requestBody:
        description: domain's name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createDomain'
        required: false
      responses:
        200:
          description: domain created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createDomainModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: domain
  /senders/domains/{domainName}:
    delete:
      tags:
        - Domains
      summary: Delete a domain
      operationId: deleteDomain
      parameters:
        - name: domainName
          in: path
          description: Domain name
          required: true
          schema:
            type: string
      responses:
        200:
          description: domain deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    get:
      tags:
        - Domains
      summary: Validate domain configuration
      operationId: getDomainConfiguration
      parameters:
        - name: domainName
          in: path
          description: Domain name
          required: true
          schema:
            type: string
      responses:
        200:
          description: domain configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDomainConfigurationModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /senders/domains/{domainName}/authenticate:
    put:
      tags:
        - Domains
      summary: Authenticate a domain
      operationId: authenticateDomain
      parameters:
        - name: domainName
          in: path
          description: Domain name
          required: true
          schema:
            type: string
      responses:
        200:
          description: domain authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authenticateDomainModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Domain does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /webhooks:
    get:
      tags:
        - Webhooks
      summary: Get all webhooks
      operationId: getWebhooks
      parameters:
        - name: type
          in: query
          description: Filter on webhook type
          schema:
            type: string
            default: transactional
            enum:
              - marketing
              - transactional
              - inbound
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of webhook creation
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        200:
          description: Webhooks informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWebhooks'
              examples:
                response:
                  value:
                    webhooks:
                      - url: https://example.domain.com/webhook/events/kzfxxxxxxxx0uyo1
                        id: 9864
                        description: Webhook triggered on campaign openings
                        events:
                          - opened
                        type: transac
                        createdAt: 2016-07-18T12:30:09Z
                        modifiedAt: 2016-07-18T16:00:50Z
                        batched: true
                        auth:
                          type: bearer
                          token: test-auth-token1234
                        headers:
                          - key: cf-secret
                            value: test-header-value
                      - url: http://exmaple.domain.com/15kxxxxxn1
                        id: 22770
                        description: Webhook triggered on campaign hard bounces
                        events:
                          - hardBounces
                        type: marketing
                        createdAt: 2017-02-20T14:30:00Z
                        modifiedAt: 2017-02-20T19:00:00Z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Webhooks
      summary: Create a webhook
      operationId: createWebhook
      requestBody:
        description: Values to create a webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createWebhook'
        required: true
      responses:
        201:
          # description: Webhook created
          $ref: '#/components/responses/createModel'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /webhooks/{webhookId}:
    get:
      tags:
        - Webhooks
      summary: Get a webhook details
      operationId: getWebhook
      parameters:
        - name: webhookId
          in: path
          description: Id of the webhook
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Webhook informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWebhook'
              examples:
                response:
                  value:
                    url: http://example.domain.com/1brxxxxxx5p1
                    id: 7287
                    description: Webhook triggered on campaign openings and addition of
                      lists
                    events:
                      - listAdditions
                      - opened
                    type: marketing
                    createdAt: 2016-06-07T09:10:10Z
                    modifiedAt: 2016-06-08T11:30:00Z
                    batched: true
                    auth:
                      type: bearer
                      token: test-auth-token1234
                    headers:
                      - key: cf-secret
                        value: test-header-value
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Webhooks
      summary: Update a webhook
      operationId: updateWebhook
      parameters:
        - name: webhookId
          in: path
          description: Id of the webhook
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a webhook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateWebhook'
        required: true
      responses:
        204:
          description: Webhook updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: updateWebhook
    delete:
      tags:
        - Webhooks
      summary: Delete a webhook
      operationId: deleteWebhook
      parameters:
        - name: webhookId
          in: path
          description: Id of the webhook
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Webhook deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Webhook ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /webhooks/export:
    post:
      tags:
        - Webhooks
      summary: Export all webhook events
      description: This endpoint will submit a request to get the history of webhooks in the CSV file. The link to download the CSV file will be sent to the webhook that was provided in the notifyURL.
      operationId: exportWebhooksHistory
      requestBody:
        description: Values to submit for webhooks history
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/exportWebhooksHistory'
        required: true
      responses:
        202:
          description: Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdProcessId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children:
    get:
      tags:
        - Reseller
      summary: Get the list of all children accounts
      operationId: getResellerChilds
      parameters:
        - name: limit
          in: query
          description: Number of documents for child accounts information per page
          schema:
            maximum: 20
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: list of children
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildrenList'
              examples:
                response:
                  value:
                    children:
                      - email: john.smith@example.com
                        firstName: John
                        lastName: Smith
                        companyName: MyCompany
                        credits:
                          emailCredits: 98555
                          smsCredits: 87556
                        statistics:
                          previousMonthTotalSent: 7654
                          currentMonthTotalSent: 4566
                          totalSent: 987554
                        password: abC0xxxxxx3jkL
                        ips:
                          - 176.2.39.4
                          - 231.43.21.7
                        apiKeys:
                          v2:
                            - name: N˚2
                              key: nOpxxxxxy7z
                          v3:
                            - name: N˚3
                              key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                        id: 187588
                      - email: alex.pain@example.com
                        firstName: Alex
                        lastName: Pain
                        companyName: MyStore
                        credits:
                          emailCredits: 2000
                          smsCredits: 0
                        statistics:
                          previousMonthTotalSent: 654
                          currentMonthTotalSent: 300
                          totalSent: 6553
                        password: abC0xxxxx64kL
                        ips:
                          - 176.2.39.4
                          - 231.43.21.7
                        apiKeys:
                          v2:
                            - name: N˚2
                              key: nOpxxxxxy7z
                          v3:
                            - name: N˚3
                              key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                        id: 187669
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Reseller
      summary: Creates a reseller child
      operationId: createResellerChild
      requestBody:
        description: reseller child to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChild'
        required: false
      responses:
        201:
          description: child created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createReseller'
              examples:
                response:
                  value:
                    authKey: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
                    id: 1234567
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}:
    get:
      tags:
        - Reseller
      summary: Get a child account's details
      operationId: getChildInfo
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      responses:
        200:
          description: Information for the child
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildInfo'
              examples:
                response:
                  value:
                    email: john.smith@example.com
                    firstName: John
                    lastName: Smith
                    companyName: MyCompany
                    credits:
                      emailCredits: 98555
                      smsCredits: 87556
                    statistics:
                      previousMonthTotalSent: 7654
                      currentMonthTotalSent: 4566
                      totalSent: 987554
                    password: abC0xxxxx3jkL
                    ips:
                      - 176.2.39.4
                      - 231.43.21.7
                    apiKeys:
                      v2:
                        - name: N˚2
                          key: nOpxxxxxy7z
                      v3:
                        - name: N˚3
                          key: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Reseller
      summary: Update info of reseller's child based on the child identifier supplied
      operationId: updateResellerChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: values to update in child profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChild'
        required: true
      responses:
        204:
          description: reseller's child updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: resellerChild
    delete:
      tags:
        - Reseller
      summary: Delete a single reseller child based on the child identifier supplied
      operationId: deleteResellerChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or child id of reseller's child
          required: true
          schema:
            type: string
      responses:
        204:
          description: child deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/accountStatus:
    put:
      tags:
        - Reseller
      summary: Update info of reseller's child account status based on the identifier
        supplied
      operationId: updateChildAccountStatus
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: values to update in child account status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChildAccountStatus'
        required: true
      responses:
        204:
          description: reseller's child account status updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/accountCreationStatus:
    get:
      tags:
        - Reseller
      summary: Get the status of a reseller's child account creation, whether it is
        successfully created (exists) or not based on the childIdentifier supplied
      operationId: getChildAccountCreationStatus
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      responses:
        200:
          description: status of reseller's child account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildAccountCreationStatus'
              examples:
                response:
                  value:
                    childAccountCreated: true
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/ips/associate:
    post:
      tags:
        - Reseller
      summary: Associate a dedicated IP to the child
      operationId: associateIpToChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: IP to associate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manageIp'
        required: true
      responses:
        204:
          description: Dedicated IP is associated to the child
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: ip
  /reseller/children/{childIdentifier}/ips/dissociate:
    post:
      tags:
        - Reseller
      summary: Dissociate a dedicated IP to the child
      operationId: dissociateIpFromChild
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: IP to dissociate
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/manageIp'
        required: true
      responses:
        204:
          description: Dedicated IP is dissociated from the child
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: ip
  /reseller/children/{childIdentifier}/credits/add:
    post:
      tags:
        - Reseller
      summary: Add Email and/or SMS credits to a specific child account
      operationId: addCredits
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: Values to post to add credit to a specific child account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addCredits'
        required: true
      responses:
        200:
          description: Credits added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remainingCreditModel'
              examples:
                response:
                  value:
                    child:
                      sms: 500
                      email: 2000
                    reseller:
                      sms: 12900
                      email: 2000000
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/credits/remove:
    post:
      tags:
        - Reseller
      summary: Remove Email and/or SMS credits from a specific child account
      operationId: removeCredits
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: Values to post to remove email or SMS credits from a specific
          child account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/removeCredits'
        required: true
      responses:
        200:
          description: Credits removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remainingCreditModel'
              examples:
                response:
                  value:
                    child:
                      sms: 500
                      email: 2000
                    reseller:
                      sms: 12900
                      email: 2000000
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
      x-codegen-request-body-name: removeCredits
  /reseller/children/{childIdentifier}/domains:
    get:
      tags:
        - Reseller
      summary: Get all sender domains for a specific child account
      operationId: getChildDomains
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      responses:
        200:
          description: Sender domains of the child
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChildDomains'
              examples:
                response:
                  value:
                    - domain: mycustomdomain.com
                      active: true
                    - domain: mynewdomain.com
                      active: true
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Reseller
      summary: Create a domain for a child account
      operationId: createChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      requestBody:
        description: Sender domain to add for a specific child account. This will
          not be displayed to the parent account.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addChildDomain'
        required: true
      responses:
        201:
          description: Domain added
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/domains/{domainName}:
    put:
      tags:
        - Reseller
      summary: Update the sender domain of reseller's child based on the childIdentifier
        and domainName passed
      operationId: updateChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
        - name: domainName
          in: path
          description: Pass the existing domain that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: value to update for sender domain
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateChildDomain'
        required: true
      responses:
        204:
          description: reseller's child domain updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Reseller
      summary: Delete the sender domain of the reseller child based on the childIdentifier
        and domainName passed
      operationId: deleteChildDomain
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
        - name: domainName
          in: path
          description: Pass the existing domain that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        204:
          description: child domain deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /reseller/children/{childIdentifier}/auth:
    get:
      tags:
        - Reseller
      summary: Get session token to access Brevo (SSO)
      description: It returns a session [token] which will remain valid for a short
        period of time. A child account will be able to access a white-labeled section
        by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
      operationId: getSsoToken
      parameters:
        - name: childIdentifier
          in: path
          description: Either auth key or id of reseller's child
          required: true
          schema:
            type: string
      responses:
        200:
          description: Session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSsoToken'
              examples:
                response:
                  value:
                    token: 5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a reseller
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Child auth key or child id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /account:
    get:
      tags:
        - Account
      summary: Get your account information, plan and credits details
      operationId: getAccount
      responses:
        200:
          description: account informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccount'
              examples:
                response:
                  value:
                    plan:
                      - type: payAsYouGo
                        credits: 5000
                        creditsType: sendLimit
                      - type: subscription
                        credits: 39983
                        creditsType: sendLimit
                        startDate: 2017-03-11
                        endDate: 2017-04-11
                      - type: sms
                        credits: 999.5360000000001
                        creditsType: sendLimit
                    relay:
                      enabled: true
                      data:
                        userName: john.smith@example.com
                        relay: smtp-relay.domain.com
                        port: 587
                    marketingAutomation:
                      key: kzfr5xxxxxxttuyo1
                      enabled: true
                    email: john.smith@example.com
                    firstName: John
                    lastName: Smith
                    companyName: MyShop
                    address:
                      city: New-York
                      street: 1677B 8th Avenue
                      zipCode: "7665"
                      country: USA
  /organization/activities:
    get:
      tags:
        - Account
        - Master account
      summary: Get user activity logs
      operationId: getAccountActivity
      parameters:
        - name: startDate
          description: Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search.
          in: query
          required: false
          schema:
            type: string
        - name: endDate
          description: Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month.
          in: query
          required: false
          schema:
            type: string
        - name: limit
          description: Number of documents per page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 10
            maximum: 100
            minimum: 1
        - name: offset
          description: Index of the first document in the page.
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: list of user activity logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAccountActivity'
              examples:
                response:
                  value:
                    logs:
                      - action: login-success
                        date: 2023-03-16T16:49:23+05:30
                        user_email: test@mycompany.com
                        user_ip: 192.158.1.34
                        user_agent: Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
                      - action: update-profile
                        date: 2023-03-15T16:49:23+05:30
                        user_email: test@myexample.com
                        user_ip: 192.158.1.38
                        user_agent: Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)
                        count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/invited/users:
    get:
      tags:
        - User
      summary: Get the list of all your users
      operationId: getInvitedUsersList
      responses:
        200:
          description: list of all your users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInvitedUsersList'
              examples:
                response:
                  value:
                    users:
                      - email: owner@company.com
                        is_owner: true
                        status: active
                        feature_access:
                          marketing: owner
                          conversations: owner
                          crm: owner
                      - email: pendingInvitedUser@company.com
                        is_owner: false
                        status: pending
                        feature_access:
                          marketing: custom
                          conversations: none
                          crm: full
                      - email: connectedInvitedUser@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          marketing: none
                          conversations: full
                          crm: none
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/{email}/permissions:
    get:
      tags:
        - User
      summary: Check user permission
      operationId: getUserPermission
      parameters:
        - name: email
          description: Email of the invited user.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: list of all the user's permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserPermission'
              examples:
                response:
                  value:
                    email: invitedUser@company.com
                    status: active
                    privileges:
                      - feature: Email campaign
                        permissions:
                          - Create / edit / delete
                          - Send / schedule / suspend
                      - feature: Templates
                        permissions:
                          - Create / edit / delete
                          - Activate / deactivate
                      - feature: SMS campaign
                        permissions:
                          - Create / edit / delete
                          - Send / schedule / suspend
                      - feature: Facebook Ads
                        permissions:
                          - Schedule / pause
                      - feature: Landing pages
                        permissions:
                          - All
                      - feature: Workflows
                        permissions:
                          - Create / edit / delete
                          - Activate / deactivate / Pause
                      - feature: Contacts
                        permissions:
                          - View
                          - Contact forms
                      - feature: SMTP & API
                        permissions:
                          - SMTP
                          - API Keys
                          - Authorized IPs
                      - feature: User management
                        permissions:
                          - None
                      - feature: Sales Platform
                        permissions:
                          - Manage Owned Deals / Tasks / Companies
                          - Manage Others Deals / Tasks / Companies
                          - Reports
                          - Settings
                      - feature: Conversations
                        permissions:
                          - None
                      - feature: Senders, Domains & Dedicated IPs
                        permissions:
                          - Senders management
                          - Domains management
                          - Dedicated IPs management
                      - feature: Push
                        permissions:
                          - View
                          - Create / edit / delete
                          - Send
                          - Settings
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /organization/user/invitation/revoke/{email}:
    put:
      tags:
        - User
      summary: Revoke user permission
      operationId: putRevokeUserPermission
      parameters:
        - name: email
          description: Email of the invited user.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Credit note exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putRevokeUserPermissionResponse'
        403:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/invitation/{action}/{email}:
    put:
      tags:
        - User
      summary: Resend / Cancel invitation
      operationId: putresendcancelinvitation
      parameters:
        - name: action
          description: action
          in: path
          required: true
          schema:
            type: string
            enum:
              - resend
              - cancel
        - name: email
          description: Email of the invited user.
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/putresendcancelinvitationResponse'
        403:
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/invitation/send:
    post:
      tags:
        - User
      summary: Send invitation to user
      description: |
        `Feature` - A Feature represents a specific functionality like Email campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a user, determine which feature you want to manage access to. You must specify the feature accurately to avoid errors.

        `Permission` - A Permission defines the level of access or control a user has over a specific feature. While inviting user, decide on the permission level required for the selected feature. Make sure the chosen permission is related to the selected feature.

        Features and their respective permissions are as below:

        - `email_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `sms_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `contacts`:
          - "view"
          - "send_schedule_suspend"
          - "import"
          - "export"
          - "list_and_attributes"
          - "forms"
        - `templates`:
          - "create_edit_delete"
          - "activate_deactivate"
        - `workflows`:
          - "create_edit_delete"
          - "activate_deactivate_pause"
          - "settings"
        - `facebook_ads`:
          - "create_edit_delete"
          - "schedule_pause"
        - `landing_pages`:
          - "all"
        - `transactional_emails`:
          - "settings"
          - "logs"
        - `smtp_api`:
          - "smtp"
          - "api_keys"
          - "authorized_ips"
        - `user_management`:
          - "all"
        - `sales_platform`:
          - "manage_owned_deals_tasks_companies"
          - "manage_others_deals_tasks_companies"
          - "reports"
          - "settings"
        - `phone`:
          - "all"
        - `conversations`:
          - "access"
          - "assign"
          - "configure"
        - `senders_domains_dedicated_ips`:
          - "senders_management"
          - "domains_management"
          - "dedicated_ips_management"
        - `push_notifications`:
          - "view"
          - "create_edit_delete"
          - "send"
          - "settings"

        **Note**:
        - If `all_features_access: false` then only privileges are required otherwise if `true` then it's assumed that all permissions will be there for the invited user.
        - The availability of feature and its permission depends on your current plan. Please select the features and permissions accordingly.
      operationId: inviteuser
      requestBody:
        description: Values to create an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteuser'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inviteuserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /organization/user/update/permissions:
    post:
      tags:
        - User
      summary: Update permission for a user
      description: |
        `Feature` - A Feature represents a specific functionality like Email campaign, Deals, Calls, Automations, etc. on Brevo. While inviting a user, determine which feature you want to manage access to. You must specify the feature accurately to avoid errors.

        `Permission` - A Permission defines the level of access or control a user has over a specific feature. While inviting user, decide on the permission level required for the selected feature. Make sure the chosen permission is related to the selected feature.

        Features and their respective permissions are as below:

        - `email_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `sms_campaigns`:
          - "create_edit_delete"
          - "send_schedule_suspend"
        - `contacts`:
          - "view"
          - "send_schedule_suspend"
          - "import"
          - "export"
          - "list_and_attributes"
          - "forms"
        - `templates`:
          - "create_edit_delete"
          - "activate_deactivate"
        - `workflows`:
          - "create_edit_delete"
          - "activate_deactivate_pause"
          - "settings"
        - `facebook_ads`:
          - "create_edit_delete"
          - "schedule_pause"
        - `landing_pages`:
          - "all"
        - `transactional_emails`:
          - "settings"
          - "logs"
        - `smtp_api`:
          - "smtp"
          - "api_keys"
          - "authorized_ips"
        - `user_management`:
          - "all"
        - `sales_platform`:
          - "manage_owned_deals_tasks_companies"
          - "manage_others_deals_tasks_companies"
          - "reports"
          - "settings"
        - `phone`:
          - "all"
        - `conversations`:
          - "access"
          - "assign"
          - "configure"
        - `senders_domains_dedicated_ips`:
          - "senders_management"
          - "domains_management"
          - "dedicated_ips_management"
        - `push_notifications`:
          - "view"
          - "create_edit_delete"
          - "send"
          - "settings"

        **Note**:
        - The privileges array remains the same as in the send invitation; the user simply needs to provide the permissions that need to be updated.
        - The availability of feature and its permission depends on your current plan. Please select the features and permissions accordingly.
      operationId: EditUserPermission
      requestBody:
        description: Values to create an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteuser'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUserResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /processes:
    get:
      tags:
        - Process
      summary: Return all the processes for your account
      operationId: getProcesses
      parameters:
        - name: limit
          in: query
          description: Number limitation for the result returned
          schema:
            maximum: 50
            minimum: 0
            type: integer
            format: int64
            default: 10
        - name: offset
          in: query
          description: Beginning point in the list to retrieve from.
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: processes informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProcesses'
              examples:
                response:
                  value:
                    processes:
                      - id: 40
                        status: completed
                        name: TRANS-CALC
                      - id: 43
                        status: queued
                        name: TRANS-GLOBAL-CALC
                      - id: 194
                        status: completed
                        name: SEARCH_EXPORT_USERS
                        export_url: <a href="https://export-url.com/upload/file-name.csv"
                          target="_blank">filename.csv</a>
                    count: 3
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /processes/{processId}:
    get:
      tags:
        - Process
      summary: Return the informations for a process
      operationId: getProcess
      parameters:
        - name: processId
          in: path
          description: Id of the process
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: process informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProcess'
              examples:
                response:
                  value:
                    id: 194
                    status: completed
                    name: SEARCH_EXPORT_USERS
                    export_url: <a href="https://export-url.com/upload/file-name.csv"
                      target="_blank">filename.csv</a>
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Process ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: processId is invalid
  /inbound/events:
    get:
      tags:
        - Inbound Parsing
      summary: Get the list of all the events for the received emails.
      description: This endpoint will show the list of all the events for the received emails.
      operationId: getInboundEmailEvents
      parameters:
        - name: sender
          description: Email address of the sender.
          in: query
          required: false
          schema:
            type: string
        - name: startDate
          description: Mandatory if endDate is used. Starting date (YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss.SSSZ) from which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          required: false
          schema:
            type: string
            format: datetime
        - name: endDate
          description: Mandatory if startDate is used. Ending date (YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss.SSSZ) till which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          required: false
          schema:
            type: string
            format: datetime
        - name: limit
          description: Number of documents returned per page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 100
            maximum: 500
            minimum: 0
        - name: offset
          description: Index of the first document on the page
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        200:
          description: List of events for received emails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInboundEmailEvents'
              examples:
                response:
                  value:
                    events:
                      - uuid: "1a825d56-029b-4a41-b8e4-1a825d56"
                        date: "2017-03-11T12:30:00.000Z"
                        sender: "john@example.com"
                        recipient: "alexa@example.com"
                      - uuid: "1a825d56-029b-4a41-b8e4-61670463431b"
                        date: "2017-03-12T12:30:00.000Z"
                        sender: "alice@example.com"
                        recipient: "bob@example.com"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /inbound/events/{uuid}:
    get:
      tags:
        - Inbound Parsing
      summary: Fetch all events history for one particular received email.
      description: This endpoint will show the list of all events history for one particular received email.
      operationId: getInboundEmailEventsByUuid
      parameters:
        - name: uuid
          description: 'UUID to fetch events specific to recieved email'
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Email campaign informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getInboundEmailEventsByUuid'
              examples:
                response:
                  value:
                    receivedAt: "2017-03-12T12:30:00.000Z"
                    deliveredAt: "2017-03-12T12:31:00.000Z"
                    sender: "alice@example.com"
                    recipient: "bob@example.com"
                    messageId: "<a_nice@message.id>"
                    subject: "Re: Question about your API"
                    attachments:
                      - name: "invoice.pdf"
                        contentType: "application/pdf"
                        contentId: null
                        contentLength: 12345
                    logs:
                      - date: "2017-03-12T12:30:00.000Z"
                        type: "received"
                      - date: "2017-03-12T12:30:04.000Z"
                        type: "webhookFailed"
                      - date: "2017-03-12T12:31:04.000Z"
                        type: "webhookDelivered"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /inbound/attachments/{downloadToken}:
    get:
      tags:
        - Inbound Parsing
      summary: Retrieve inbound attachment with download token.
      description: This endpoint will retrieve inbound attachment with download token.
      operationId: getInboundEmailAttachment
      parameters:
        - name: downloadToken
          description: 'Token to fetch a particular attachment'
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Attachment information
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              schema:
                type: string
                example: image/png
            Content-Disposition:
              schema:
                type: string
                example: attachment; filename="download.png"
            Content-Length:
              schema:
                type: integer
                example: 4032
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /corporate/subAccount:
    get:
      tags:
        - Master account
      summary: Get the list of all the sub-accounts of the master account.
      description: This endpoint will provide the list all the sub-accounts of the master account.
      parameters:
        - name: offset
          description: 'Index of the first sub-account in the page'
          in: query
          required: true
          schema:
            type: integer
        - name: limit
          description: 'Number of sub-accounts to be displayed on each page'
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Sub-accounts list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subAccountsResponse'
              examples:
                response:
                  value:
                    count: 3
                    subAccounts:
                      - id: 4043629
                        companyName: "Company1"
                        active: true,
                        createdAt: 1631523176
                      - id: 3984002
                        companyName: "Company2"
                        active: true
                        createdAt: 1629439311
                      - id: 3524191
                        companyName: "Company3"
                        active: true
                        createdAt: 1614713641

        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Master account
      summary: Create a new sub-account under a master account.
      description: This endpoint will create a new sub-account under a master account
      requestBody:
        description: Request body with sub-account organization name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSubAccount'
        required: true

      responses:
        201:
          description: Created sub-account ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createSubAccountResponse'
              examples:
                response:
                  value:
                    id: 4109344
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: missing_parameter
                message: Missing companyName attribute in the request
  /corporate/subAccount/{id}:
    get:
      tags:
        - Master account
      summary: Get sub-account details
      description: This endpoint will provide the details for the specified sub-account company
      parameters:
        - name: id
          description: 'Id of the sub-account organization'
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        200:
          description: Sub-account organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subAccountDetailsResponse'
              example:
                name: "Uday Pandit"
                email: "uday+1@brevo.com"
                companyName: "API-Sub-26thOct21-4"
                planInfo:
                  credits:
                    sms: 1234
                    emails:
                      quantity: 2000
                      remaining: 1955
                    features:
                      inbox:
                        quantity: 20
                        remaining: 12
                      landingPage:
                        quantity: 25
                        remaining: 14
                      users:
                        quantity: 30
                        remaining: 14
                    planType: paid
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Master account
      summary: Delete a sub-account
      parameters:
        - name: id
          description: 'Id of the sub-account organization to be deleted'
          schema:
            type: integer
            format: int64
          in: path
          required: true
      responses:
        204:
          description: Returned when sub-account is deleted succesfully
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: missing_parameter
                message: Sub-account 2039dfsddf885 is not valid
        404:
          description: sub-account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: document_not_found
                message: Sub-account 2039885 was not found
  /corporate/subAccount/{id}/plan:
    put:
      tags:
        - Master account
      summary: Update sub-account plan
      description: This endpoint will update the sub-account plan
      parameters:
        - name: id
          in: path
          description: Id of the sub-account organization
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Values to update a sub-account plan
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subAccountUpdatePlanRequest'
        required: true
      responses:
        204:
          description: Sub account plan updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: "permission_denied"
                    message: "Access forbidden."
  /corporate/subAccount/ssoToken:
    post:
      tags:
        - Master account
      summary: Generate SSO token to access Brevo
      description: This endpoint generates an sso token to authenticate and access a sub-account of the master using the account endpoint https://account-app.brevo.com/account/login/sub-account/sso/[token], where [token] will be replaced by the actual token.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: Id of the sub-account organization
                  example: 3232323
                email:
                  type: string
                  description: User email of sub-account organization
                  example: vipin+subaccount@brevo.com
                target:
                  type: string
                  description: |
                    **Set target after login success**
                    * **automation** - Redirect to Automation after login
                    * **email_campaign** - Redirect to Email Campaign after login
                    * **contacts** - Redirect to Contacts after login
                    * **landing_pages** - Redirect to Landing Pages after login
                    * **email_transactional** - Redirect to Email Transactional after login
                    * **senders** - Redirect to Senders after login
                    * **sms_campaign** - Redirect to Sms Campaign after login
                    * **sms_transactional** - Redirect to Sms Transactional after login
                  enum:
                    - automation
                    - email_campaign
                    - contacts
                    - landing_pages
                    - email_transactional
                    - senders
                    - sms_campaign
                    - sms_transactional
                  example: contacts
                url:
                  type: string
                  description: Set the full target URL after login success. The user will land directly on this target URL after login
                  example: https://app.brevo.com/senders/domain/list
      responses:
        200:
          description: Session token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getSsoToken'
              examples:
                response:
                  value:
                    token: 5cadaxxxxxxxxxxxxxxxxxxxx5a179f85a0
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: "invalid_parameter"
                message: "Invalid sub-account id."
        403:
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: "permission_denied"
                    message: "Access forbidden."
  /corporate/masterAccount:
    get:
      tags:
        - Master account
      summary: Get the details of requested master account
      description: This endpoint will provide the details of the master account.
      responses:
        200:
          description: Master account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/masterDetailsResponse'
              example:
                email: "sample@example.com"
                companyName: "Corp Sample 1-1"
                id: 1003286
                currencyCode: "INR"
                timezone: "Europe/Paris"
                billingInfo:
                  email: "sample@example.com"
                  companyName: "Corp Sample 1-1"
                  name:
                    givenName: "Uday"
                    familyName: "Pandit"
                  address:
                    streetAddress: "C-92"
                    locality: "Pandav Nagar, New Delhi"
                    postalCode: "560048"
                    stateCode: "UP"
                    countryCode: "IN"
                planInfo:
                  currencyCode: "INR"
                  nextBillingAt: 1637739295
                  price: 2100
                  planPeriod: "month"
                  subAccounts: 15
                  features:
                    - name: "MULTI_USER"
                      unitValue: 1
                      quantity: 10
                      used: 15
                      remaining: 0
                    - name: "ADVANCED_REPORTING"
                      unitValue: 1
                      quantity: 12
                      used: 1
                      remaining: 11
                    - name: "INBOX"
                      unitValue: 1
                      quantity: 10
                      used: 10
                      remaining: 0
                    - name: "LANDING_PAGE"
                      unitValue: 5
                      quantity: 10
                      used: 11
                      remaining: 0
                    - name: "RECURRING_CREDITS"
                      unitValue: 1
                      quantity: 500
                      used: 1
                      remaining: 499
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/subAccount/key:
    post:
      tags:
        - Master account
      summary: Create an API key for a sub-account
      description: This endpoint will generate an API v3 key for a sub account
      requestBody:
        content:
          application/json:
            schema:
              required:
                - id
                - name
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: Id of the sub-account organization
                  example: 3232323
                name:
                  type: string
                  description: Name of the API key
                  example: My Api Key
      responses:
        201:
          description: API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createApiKeyResponse'
              examples:
                response:
                  value:
                    status: "success"
                    key: "xkeysib-21881axxxxxcc92e04-mIrexxxx7z"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: "invalid_parameter"
                message: "id should be a positive number"
  /corporate/subAccount/{id}/applications/toggle:
    put:
      tags:
        - Master account
      summary: Enable/disable sub-account application(s)
      description: API endpoints for the Corporate owner to enable/disable applications on the sub-account
      parameters:
        - name: id
          in: path
          description: Id of the sub-account organization (mandatory)
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: List of applications to activate or deactivate on a sub-account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subAccountAppsToggleRequest'
        required: true
      responses:
        204:
          description: Sub-account application(s) enabled/disabled
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        403:
          description: Current account is not a master account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    code: "permission_denied"
                    message: "Access forbidden."
  /corporate/group:
    post:
      tags:
        - Master account
      summary: Create a group of sub-accounts
      description: This endpoint allows to create a group of sub-accounts
      requestBody:
        content:
          application/json:
            schema:
              required:
                - groupName
              type: object
              properties:
                groupName:
                  type: string
                  description: The name of the group of sub-accounts
                  example: My group
                subAccountIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Pass the list of sub-account Ids to be included in the group
                  example: [ 234322, 325553, 893432 ]

      responses:
        201:
          description: Group ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              examples:
                response:
                  value:
                    id: 659xxxxxxxxxxxxxxxx6ef9c8
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/group/{id}:
    get:
      tags:
        - Master account
      summary: GET a group details
      description: This endpoint allows you to retrieve a specific group’s information such as the list of sub-organizations and the user associated with the group.
      parameters:
        - name: id
          in: path
          description: Id of the group of sub-organization
          required: true
          schema:
            type: string
      responses:
        200:
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/corporateGroupDetailsResponse'
              example:
                group:
                  id: 5f926dba72a405440a4efc97
                  groupName: My group
                  createdAt: "2024-02-09T06:14:40+00:00"
                sub-accounts:
                  - id: 7866556
                    companyName: My sub organization
                    createdAt: "2024-02-09T06:14:40+00:00"
                  - id: 6563051
                    companyName: Your sub organization
                    createdAt: "2024-01-05T03:11:40+00:00"
                users:
                  - email: my-user@my-org.com
                    lastName: Smith
                    firstName: John
                  - email: your-user@your-org.com
    put:
      tags:
        - Master account
      summary: Update a group of sub-accounts
      description: This endpoint allows to update a group of sub-accounts
      parameters:
        - name: id
          in: path
          description: Id of the group
          required: true
          schema:
            type: string
      requestBody:
        description: Group details to be updated.
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  description: The name of the group of sub-accounts
                  example: My group
                subAccountIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Pass the list of sub-account Ids to be included in the group
                  example: [ 234322, 325553, 893432 ]
        required: true
      responses:
        204:
          description: Group details updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
    delete:
      tags:
        - Master account
      summary: Delete a group
      description: This endpoint allows you to delete a group of sub-organizations. When a group is deleted, the sub-organizations are no longer part of this group. The users associated with the group are no longer associated with the group once deleted.
      parameters:
        - name: id
          description: Id of the group
          schema:
            type: string
          in: path
          required: true
      responses:
        204:
          description: Group deleted
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/group/unlink/{groupId}/subAccounts:
    put:
      tags:
        - Master account
      summary: Delete sub-account from group
      description: This endpoint allows you to remove a sub-organization from a group.
      parameters:
        - name: groupId
          in: path
          description: Group id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: List of sub-account ids
        content:
          application/json:
            schema:
              required:
                - subAccountIds
              type: object
              properties:
                subAccountIds:
                  type: array
                  description: List of sub-account ids
                  items:
                    type: integer
                    format: int64
                  example: [ 423432, 234323, 87678 ]
      responses:
        204:
          description: SubAccounts removed from the group
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: subAccountIds should be array of numeric ids only
  /corporate/user/invitation/send:
    post:
      tags:
        - Master account
      summary: Send invitation to an admin user
      description: |
        `This endpoint allows you to invite a member to manage the Admin account

        Features and their respective permissions are as below:

        - `my_plan`:
          - "all"
        - `api`:
          - "none"
        - `user_management`:
          - "all"
        - `app_management` | Not available in ENTv2:
          - "all"

        **Note**:
        - If `all_features_access: false` then only privileges are required otherwise if `true` then it's assumed that all permissions will be there for the invited admin user.
      operationId: inviteAdminUser
      requestBody:
        description: Payload to send an invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/inviteAdminUser'
      responses:
        201:
          description: Invitation ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
              examples:
                response:
                  value:
                    id: 659xxxxxxxxxxxxxxxx6ef9c8
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /corporate/user/invitation/{action}/{email}:
    put:
      tags:
        - Master account
      summary: Resend / cancel admin user invitation
      description: |
        This endpoint will allow the user to: 
        - Resend an admin user invitation
        - Cancel an admin user invitation
      parameters:
        - name: action
          in: path
          description: Action to be performed (cancel / resend)
          required: true
          schema:
            type: string
            enum:
              - resend
              - cancel
        - name: email
          in: path
          description: Email address of the recipient
          required: true
          schema:
            type: string
      responses:
        200:
          description: Response of the action performed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Action success message
              example:
                message: Invitation resent successfully
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invitation not found
  /corporate/user/revoke/{email}:
    delete:
      tags:
        - Master account
      summary: Revoke an admin user
      description: This endpoint allows to revoke/remove an invited member of your Admin account
      parameters:
        - name: email
          description: Email of the invited user
          schema:
            type: string
          in: path
          required: true
      responses:
        204:
          description: User revoked
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              example:
                code: invalid_parameter
                message: Invalid request
  /corporate/invited/users:
    get:
      tags:
        - Master account
      summary: Get the list of all admin users
      description: This endpoint allows you to list all Admin users of your Admin account
      operationId: getCorporateInvitedUsersList
      responses:
        200:
          description: list of all admin users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCorporateInvitedUsersList'
              examples:
                response:
                  value:
                    users:
                      - groups:
                          - id: 65b1f22c09d6ed67ef1cd123,
                            name: Test Group1
                          - id: 43b1f16c09db4d67af1cd342,
                            name: Test Group2
                        email: master-user2@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          user_management: [ "none" ]
                          api_keys: [ "all" ]
                          my_plan: [ "all" ]
                          apps_management: [ "none" ]
                      - groups: [ ]
                        email: master-user3@company.com
                        is_owner: false
                        status: active
                        feature_access:
                          user_management: [ "all" ]
                          api_keys: [ "none" ]
                          my_plan: [ "none" ]
                          apps_management: [ "all" ]
  /corporate/groups:
    get:
      tags:
        - Master account
      summary: Get the list of groups
      description: This endpoint allows you to list all groups created on your Admin account.
      operationId: getSubAccountGroups
      responses:
        200:
          description: list of all the sub-account groups
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: Unique id of the group
                    groupName:
                      type: string
                      description: The name of the group of sub-accounts
              example:
                - id: d3b142c709d6ed67ef1cd903
                  groupName: My group 1
                - id: a5b192a709d6ed67ef8fd922
                  groupName: My group 2
                - id: bbb142c709d6ed67ef1cd910
                  groupName: My group 3
  /companies:
    get:
      tags:
        - Companies
      summary: Get all Companies
      parameters:
        - name: filters
          in: query
          schema:
            type: string
          description: Filter by attrbutes. If you have filter for owner on your side please send it as {"attributes.owner":"6299dcf3874a14eacbc65c46"}
        - name: linkedContactsIds
          in: query
          schema:
            type: integer
            format: int64
          description: Filter by linked contacts ids
        - name: linkedDealsIds
          in: query
          schema:
            type: string
            format: objectID
          description: Filter by linked Deals ids
        - name: page
          in: query
          schema:
            type: integer
            format: int64
          description: Index of the first document of the page
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
          description: Number of documents per page
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
        - name: sortBy
          in: query
          schema:
            type: string
          description: The field used to sort field names.
      responses:
        200:
          description: Returns companies list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompaniesList'
        400:
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
    post:
      tags:
        - Companies
      summary: Create a company
      requestBody:
        required: true
        description: Company create data.
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of company
                  example: "company"
                attributes:
                  type: object
                  description: Attributes for company creation
                  example: {
                    "domain": "https://example.com",
                    "industry": "Fabric",
                    "owner": "60e68d60582a3b006f524197"
                  }
                countryCode:
                  type: integer
                  format: int64
                  description: Country code if phone_number is passed in attributes.
                  example: 91
              type: object
      responses:
        200:
          description: Created new Company
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                description: Created company id
                properties:
                  id:
                    type: string
                    description: Unique company id
                    example: "61a5cd07ca1347c82306ad06"
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
  /companies/{id}:
    get:
      tags:
        - Companies
      summary: Get a company
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Get Company Details
      responses:
        200:
          description: Returns the Company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route company id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    delete:
      tags:
        - Companies
      summary: Delete a company
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Company ID to delete
      responses:
        204:
          description: When company deleted
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route company id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    patch:
      tags:
        - Companies
      summary: Update a company
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated company details.
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Name of company
                  example: "company"
                attributes:
                  type: object
                  description: Attributes for company update
                  example: {
                    "category": "label_2",
                    "domain": "xyz",
                    "date": "2022-05-04T00:00:00+05:30",
                    "industry": "flipkart",
                    "number_of_contacts": 1,
                    "number_of_employees": 100,
                    "owner": "5b1a17d914b73d35a76ca0c7",
                    "phone_number": "81718441912",
                    "revenue": 10000.34222
                  }
                countryCode:
                  type: integer
                  format: int64
                  description: Country code if phone_number is passed in attributes.
                  example: 91
              type: object
      responses:
        200:
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when company id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /companies/attributes:
    get:
      tags:
        - Companies
      summary: Get company attributes
      responses:
        200:
          description: Returns list of company attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyAttributes'
  /companies/link-unlink/{id}:
    patch:
      tags:
        - Companies
      summary: Link and Unlink company with contact and deal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Linked / Unlinked contacts and deals ids.
        content:
          application/json:
            schema:
              properties:
                linkContactIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Contact ids for contacts to be linked with company
                  example: [ 1, 2, 3 ]
                unlinkContactIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Contact ids for contacts to be unlinked from company
                  example: [ 4, 5, 6 ]
                linkDealsIds:
                  items:
                    type: string
                  type: array
                  description: Deal ids for deals to be linked with company
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                unlinkDealsIds:
                  items:
                    type: string
                  type: array
                  description: Deal ids for deals to be unlinked from company
                  example: [ "61a5ce58c5d4795761045994", "61a5ce58c5d479576104595" , "61a5ce58c5d4795761045996" ]
              type: object
      responses:
        204:
          description: Successfully linked/unlinked contacts/deals with the company.
        400:
          description: Returned when query params are invalid or invalid data provided in request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
  /crm/pipeline/details:
    get:
      tags:
        - Deals
      summary: Get pipeline stages
      description: This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID} instead.
      deprecated: true
      responses:
        200:
          description: Returns list of pipeline stages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
  /crm/pipeline/details/{pipelineID}:
    get:
      tags:
        - Deals
      summary: Get a pipeline
      parameters:
        - name: pipelineID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns pipeline and its details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipelines'
        400:
          description: Returned when pipeline id is invalid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                Pipeline Not Exist:
                  value:
                    "message": "Pipeline not found"
  /crm/pipeline/details/all:
    get:
      tags:
        - Deals
      summary: Get all pipelines
      responses:
        200:
          description: Returns list of pipeline and its details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipelines'
        400:
          description: Returned when pipeline id is invalid or does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                Pipeline Not Exist:
                  value:
                    "message": "Pipeline not found"
  /crm/attributes/deals:
    get:
      tags:
        - Deals
      summary: Get deal attributes
      responses:
        200:
          description: Returns list of deal attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealAttributes'
  /crm/deals:
    get:
      tags:
        - Deals
      summary: Get all deals
      parameters:
        - name: filters[attributes.deal_name]
          in: query
          schema:
            type: string
          description: Filter by attributes. If you have filter for owner on your side please send it as `filters[attributes.deal_owner]`.
        - name: filters[linkedCompaniesIds]
          in: query
          schema:
            type: string
          description: Filter by linked companies ids
        - name: filters[linkedContactsIds]
          in: query
          schema:
            type: string
          description: Filter by linked companies ids
        - name: offset
          in: query
          schema:
            type: integer
            format: int64
          description: Index of the first document of the page
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
          description: Number of documents per page
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
      responses:
        200:
          description: Returns deals list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DealsList'
        400:
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
    post:
      tags:
        - Deals
      summary: Create a deal
      requestBody:
        required: true
        description: Deal create data.
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  description: Name of deal
                  example: "Deal: Connect with company"
                attributes:
                  type: object
                  description: |
                    Attributes for deal creation

                    If you want to create a deal on a specific pipeline and stage you can use the following attributes `pipeline` and `deal_stage`.

                    Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
                  example: {
                    deal_owner: "6093d2425a9b436e9519d034",
                    amount: 12
                  }
              type: object
      responses:
        201:
          description: Created new Deal
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                description: Created deal id
                properties:
                  id:
                    type: string
                    description: Unique deal id
                    example: "61a5cd07ca1347c82306ad06"
        400:
          description: Returned when invalid data posted
  /crm/deals/{id}:
    get:
      tags:
        - Deals
      summary: Get a deal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the deal by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deal'
        400:
          description: Returned when task id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    delete:
      tags:
        - Deals
      summary: Delete a deal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Returned when item deleted
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when deal id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    patch:
      tags:
        - Deals
      summary: Update a deal
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated deal details.
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Name of deal
                  example: "Deal: Connect with client"
                attributes:
                  type: object
                  description: |
                    Attributes for deal update
                    
                    If you wish to update the pipeline of a deal you need to provide the `pipeline` and the `deal_stage`
                    
                    Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`
                  example: {
                    deal_owner: "6093d2425a9b436e9519d034",
                    amount: 12
                  }
              type: object
      responses:
        204:
          description: Deal updated successfully
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when deal id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /crm/deals/link-unlink/{id}:
    patch:
      tags:
        - Deals
      summary: Link and Unlink a deal with contacts and companies
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Linked / Unlinked contacts and companies ids.
        content:
          application/json:
            schema:
              properties:
                linkContactIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Contact ids for contacts to be linked with deal
                  example: [ 1, 2, 3 ]
                unlinkContactIds:
                  items:
                    type: integer
                    format: int64
                  type: array
                  description: Contact ids for contacts to be unlinked from deal
                  example: [ 4, 5, 6 ]
                linkCompanyIds:
                  items:
                    type: string
                  type: array
                  description: Company ids to be linked with deal
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                unlinkCompanyIds:
                  items:
                    type: string
                  type: array
                  description: Company ids to be unlinked from deal
                  example: [ "61a5ce58c5d4795761045994", "61a5ce58c5d479576104595" , "61a5ce58c5d4795761045996" ]
              type: object
      responses:
        204:
          description: Successfully linked/unlinked contacts/companies with the deal.
        400:
          description: Returned when query params are invalid or invalid data provided in request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
  /crm/tasktypes:
    get:
      tags:
        - Tasks
      summary: Get all task types
      responses:
        200:
          description: Returns all the Task types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskTypes'
  /crm/tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      parameters:
        - name: filter[type]
          in: query
          schema:
            type: string
          description: Filter by task type (ID)
        - name: filter[status]
          in: query
          schema:
            type: string
            enum:
              - done
              - undone
          description: Filter by task status
        - name: filter[date]
          in: query
          schema:
            type: string
            enum:
              - overdue
              - today
              - tomorrow
              - week
              - range
          description: Filter by date
        - name: filter[assignTo]
          in: query
          schema:
            type: string
          description: Filter by assignTo id
        - name: filter[contacts]
          in: query
          schema:
            type: string
          description: Filter by contact ids
        - name: filter[deals]
          in: query
          schema:
            type: string
          description: Filter by deals ids
        - name: filter[companies]
          in: query
          schema:
            type: string
          description: Filter by companies ids
        - name: dateFrom
          in: query
          schema:
            type: integer
          description: dateFrom to date range filter type (timestamp in milliseconds)
        - name: dateTo
          in: query
          schema:
            type: integer
          description: dateTo to date range filter type (timestamp in milliseconds)
        - name: offset
          in: query
          schema:
            type: integer
            format: int64
          description: Index of the first document of the page
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            format: int64
          description: Number of documents per page
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
        - name: sortBy
          in: query
          schema:
            type: string
          description: The field used to sort field names.
          example: name
      responses:
        200:
          description: Returns task list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskList'
        400:
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
    post:
      tags:
        - Tasks
      summary: Create a task
      requestBody:
        required: true
        description: Task name.
        content:
          application/json:
            schema:
              required:
                - name
                - taskTypeId
                - date
              properties:
                name:
                  type: string
                  description: Name of task
                  example: "Task: Connect with client"
                duration:
                  type: integer
                  description: Duration of task in milliseconds [1 minute = 60000 ms]
                  example: 600000
                  format: int64
                  minimum: 0
                taskTypeId:
                  type: string
                  description: Id for type of task e.g Call / Email / Meeting etc.
                  example: "61a5cd07ca1347c82306ad09"
                date:
                  type: string
                  format: date-time
                  example: "2021-11-01T17:44:54.668Z"
                  description: Task due date and time
                notes:
                  type: string
                  description: Notes added to a task
                  example: "In communication with client for resolution of queries."
                done:
                  type: boolean
                  description: Task marked as done
                  example: false
                assignToId:
                  type: string
                  description: User id to whom task is assigned
                  example: "5faab4b7f195bb3c4c31e62a"
                contactsIds:
                  items:
                    type: integer
                  type: array
                  description: Contact ids for contacts linked to this task
                  example: [ 1, 2, 3 ]
                dealsIds:
                  items:
                    type: string
                  type: array
                  description: Deal ids for deals a task is linked to
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                companiesIds:
                  items:
                    type: string
                  type: array
                  description: Companies ids for companies a task is linked to
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                reminder:
                  $ref: '#/components/schemas/TaskReminder'
              type: object
      responses:
        201:
          description: Created new task
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                description: Task Details
                properties:
                  id:
                    type: string
                    description: Unique task id
                    example: "61a5cd07ca1347c82306ad06"
        400:
          description: Returned when invalid data posted
  /crm/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get a task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returns the Task by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        400:
          description: Returned when task id is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    delete:
      tags:
        - Tasks
      summary: Delete a task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Returned when item deleted
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when task id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    patch:
      tags:
        - Tasks
      summary: Update a task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Updated task details.
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Name of task
                  example: "Task: Connect with client"
                duration:
                  type: integer
                  description: Duration of task in milliseconds [1 minute = 60000 ms]
                  format: int64
                  example: 600000
                taskTypeId:
                  type: string
                  description: Id for type of task e.g Call / Email / Meeting etc.
                  example: "61a5cd07ca1347c82306ad09"
                date:
                  type: string
                  format: date-time
                  example: "2021-11-01T17:44:54.668Z"
                  description: Task date/time
                notes:
                  type: string
                  description: Notes added to a task
                  example: "In communication with client for resolution of queries."
                done:
                  type: boolean
                  description: Task marked as done
                  example: false
                assignToId:
                  type: string
                  description: User id to whom task is assigned
                  example: "5faab4b7f195bb3c4c31e62a"
                contactsIds:
                  items:
                    type: integer
                  type: array
                  description: Contact ids for contacts linked to this task
                  example: [ 1, 2, 3 ]
                dealsIds:
                  items:
                    type: string
                  type: array
                  description: Deal ids for deals a task is linked to
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                companiesIds:
                  items:
                    type: string
                  type: array
                  description: Companies ids for companies a task is linked to
                  example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
                reminder:
                  $ref: "#/components/schemas/TaskReminder"
              type: object
      responses:
        204:
          description: Task updated succussfully
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when task id is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /crm/notes:
    get:
      tags:
        - Notes
      summary: Get all notes
      parameters:
        - name: entity
          in: query
          schema:
            type: string
            enum:
              - companies
              - deals
              - contacts
          description: Filter by note entity type
        - name: entityIds
          in: query
          schema:
            type: string
          description: Filter by note entity IDs
        - name: dateFrom
          in: query
          schema:
            type: integer
          description: dateFrom to date range filter type (timestamp in milliseconds)
        - name: dateTo
          in: query
          schema:
            type: integer
          description: dateTo to date range filter type (timestamp in milliseconds)
        - name: offset
          in: query
          schema:
            type: integer
            format: int64
          description: Index of the first document of the page
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            format: int64
          description: Number of documents per page
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
      responses:
        200:
          description: Returns notes list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteList'
        400:
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
    post:
      tags:
        - Notes
      summary: Create a note
      requestBody:
        required: true
        description: Note data to create a note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteData"
      responses:
        200:
          description: Created new note
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteId'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
        415:
          description: Format is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "The format not supported for deserialization."
  /crm/notes/{id}:
    get:
      tags:
        - Notes
      summary: Get a note
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Note ID to get
      responses:
        200:
          description: Returns the Note by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    patch:
      tags:
        - Notes
      summary: Update a note
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Note ID to update
      requestBody:
        required: true
        description: Note data to update a note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoteData"
      responses:
        204:
          description: Note updated successfully
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
        415:
          description: Format is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "The format not supported for deserialization."
    delete:
      tags:
        - Notes
      summary: Delete a note
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Note ID to delete
      responses:
        204:
          description: Returned when item deleted
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid."
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /crm/files:
    get:
      tags:
        - Files
      summary: Get all files
      parameters:
        - name: entity
          in: query
          schema:
            type: string
            enum:
              - companies
              - deals
              - contacts
          description: Filter by file entity type
          required: false
        - name: entityIds
          in: query
          schema:
            type: string
          description: Filter by file entity IDs
          required: false
        - name: dateFrom
          in: query
          schema:
            type: integer
          description: dateFrom to date range filter type (timestamp in milliseconds)
          required: false
        - name: dateTo
          in: query
          schema:
            type: integer
          description: dateTo to date range filter type (timestamp in milliseconds)
          required: false
        - name: offset
          in: query
          schema:
            type: integer
            format: int64
          description: Index of the first document of the page
          required: false
        - name: limit
          in: query
          schema:
            type: integer
            format: int64
            default: 50
          description: Number of documents per page
          required: false
        - name: sort
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed
          required: false
      responses:
        200:
          description: Returns files list with filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        400:
          description: Returned when query params are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Not valid data."
    post:
      tags:
        - Files
      summary: Upload a file
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: File data to create a file.
                dealId:
                  type: string
                contactId:
                  type: integer
                  format: int64
                companyId:
                  type: string
              required:
                - file
      responses:
        201:
          description: Returns the created File with additional details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileData'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Invalid deals ids format."
  /crm/files/{id}:
    get:
      tags:
        - Files
      summary: Download a file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: File id to download.
      responses:
        200:
          description: Returns downloadable file link. Valid for next 5 minutes only.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDownloadableLink'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid"
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
    delete:
      tags:
        - Files
      summary: Delete a file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: File id to delete.
      responses:
        204:
          description: Returned when file is deleted.
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid"
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /crm/files/{id}/data:
    get:
      tags:
        - Files
      summary: Get file details
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: File id to get file data.
      responses:
        200:
          description: Returned when file is found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileData'
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Route attribute id is not valid"
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
              examples:
                response:
                  value:
                    "message": "Document not found"
  /conversations/messages:
    post:
      tags:
        - Conversations
      summary: Send a message as an agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - visitorId
                - text
              properties:
                visitorId:
                  description: visitor’s ID received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a> or generated by you to <a href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind existing user account to Conversations</a>
                text:
                  description: message text
                agentId:
                  description: agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required).
                receivedFrom:
                  description: mark your messages to distinguish messages created by you from the others.
                agentEmail:
                  description: agent email. When sending messages from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address.
                agentName:
                  description: agent name
            examples:
              Basic use:
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentId: d9nKoegKSjmCtyK78
              receivedFrom:
                description: When you receive a webhook, you might want to distinguish messages created by you from the others. Use receivedFrom property to mark your messages
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentId: d9nKoegKSjmCtyK78
                  receivedFrom: SuperAwesomeHelpdesk
              agentEmail + agentName + receivedFrom:
                description: When sending messages from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address. If there’s no agent with the specified email address in your Brevo organization, a dummy agent will be created automatically.
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: Hello! How can I help you?
                  agentEmail: liz@getwear.com
                  agentName: Liz
                  receivedFrom: SuperAwesomeHelpdesk
      responses:
        200:
          description: Newly created message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                response:
                  value:
                    id: eYBEm3gq3zc5ayE2g
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/messages/{id}:
    get:
      tags:
        - Conversations
      summary: Get a message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message
      responses:
        200:
          description: Requested message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                requested message:
                  value:
                    id: eYBEm3gq3zc5ayE2g
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Conversations
      summary: Update a message sent by an agent
      description: Only agents’ messages can be edited.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: edited message text
            examples:
              edition:
                value:
                  text: Good morning! How can I help you?
      responses:
        200:
          description: Updated message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                edited message:
                  value:
                    id: eYBEm3gq3zc5ayE2g
                    type: agent
                    text: Hello! How can I help you?
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1482512803740
                    receivedFrom: SuperAwesomeHelpdesk
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Conversations
      summary: Delete a message sent by an agent
      description: Only agents’ messages can be deleted.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message
      responses:
        204:
          description: The message was deleted from the conversation
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/pushedMessages:
    post:
      tags:
        - Conversations
      summary: Send an automated message to a visitor
      description: "Example of automated messages: order status, announce new features in your web app, etc."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - visitorId
                - text
              properties:
                visitorId:
                  description: visitor’s ID received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a> or generated by you to <a href="https://developers.brevo.com/docs/customize-the-widget#identifying-existing-users">bind existing user account to Conversations</a>
                text:
                  description: message text
                agentId:
                  description: agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>.
                groupId:
                  description: group ID. It can be found on group’s page.
            examples:
              Random agent:
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: "Your order has shipped! Here’s your tracking number: 9114 5847 3325 9667 4328 88"
              Agent group:
                description: "Send a message on behalf of a random agent from one of your agent groups"
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: "Your order has shipped! Here’s your tracking number: 9114 5847 3325 9667 4328 88"
                  groupId: PjRBMhWGen6aRHjif
              Specific agent:
                description: Send a message on behalf of a specific agent
                value:
                  visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                  text: "Your order has shipped! Here’s your tracking number: 9114 5847 3325 9667 4328 88"
                  agentId: d9nKoegKSjmCtyK78
      responses:
        200:
          description: Newly created message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                response:
                  value:
                    id: AXCR3k9bpSY7bpuh7
                    type: agent
                    text: "Your order has shipped! Here’s your tracking number: 9114 5847 3325 9667 4328 88"
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/pushedMessages/{id}:
    get:
      tags:
        - Conversations
      summary: Get an automated message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message sent previously
      responses:
        200:
          description: Requested message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                requested message:
                  value:
                    id: AXCR3k9bpSY7bpuh7
                    type: agent
                    text: "Your order has shipped! Here’s your tracking number: 9114 5847 3325 9667 4328 88"
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - Conversations
      summary: Update an automated message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: edited message text
            examples:
              edition:
                value:
                  text: "Your order has shipped! Here’s your tracking number: 9114 5847 4668 7775 9233 54"
      responses:
        200:
          description: Updated message is returned as a response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationsMessage'
              examples:
                updated message:
                  value:
                    id: AXCR3k9bpSY7bpuh7
                    type: agent
                    text: "Your order has shipped! Here’s your tracking number: 9114 5847 4668 7775 9233 54"
                    visitorId: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
                    agentId: d9nKoegKSjmCtyK78
                    createdAt: 1470222622433
                    isPushed: true
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - Conversations
      summary: Delete an automated message
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message
      responses:
        204:
          description: The message was deleted from the conversation
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Returned when item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /conversations/agentOnlinePing:
    post:
      tags:
        - Conversations
      summary: Sets agent’s status to online for 2-3 minutes
      description: We recommend pinging this endpoint every minute for as long as the agent has to be considered online.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                agentId:
                  description: agent ID. It can be found on agent’s page or received <a href="https://developers.brevo.com/docs/conversations-webhooks">from a webhook</a>. Alternatively, you can use `agentEmail` + `agentName` + `receivedFrom` instead (all 3 fields required).
                receivedFrom:
                  description: mark your messages to distinguish messages created by you from the others.
                agentEmail:
                  description: agent email. When sending online pings from a standalone system, it’s hard to maintain a 1-to-1 relationship between the users of both systems. In this case, an agent can be specified by their email address. If there’s no agent with the specified email address in your Brevo organization, a dummy agent will be created automatically.
                agentName:
                  description: agent name
            examples:
              Basic use:
                value:
                  agentId: d9nKoegKSjmCtyK78
              agentEmail + agentName + receivedFrom:
                value:
                  agentEmail: liz@getwear.com
                  agentName: Liz
                  receivedFrom: SuperAwesomeHelpdesk
      responses:
        201:
          description: Status of the agent was set successfully. Response body will be empty.
        400:
          description: Returned when invalid data posted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /ecommerce/activate:
    post:
      tags:
        - Ecommerce
      summary: "Activate the eCommerce app"
      description: "Getting access to Brevo eCommerce."
      responses:
        200:
          description: 'eCommerce activation is in process, please wait for 5 minutes.'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: api-key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /orders:
    get:
      tags:
        - Ecommerce
      summary: Get order details
      description: Get all the orders
      operationId: getOrders
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: modifiedSince
          in: query
          description: |
            Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: createdSince
          in: query
          description: |
            Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
      responses:
        200:
          description: orders fetched successfully
          content:
            application/json:
              examples:
                response:
                  value:
                    orders:
                      - id: order1803
                        createdAt: 2021-12-31T11:42:35.638Z
                        updatedAt: 2022-03-03T14:48:31.867Z
                        contact_id: 2
                        status: complete
                        amount: 2000
                        billing:
                          address: Sec 62, Noida
                          city: Noida
                          countryCode: IN
                          phone: 9238283982
                          postCode: 110001
                          paymentMethod: Net banking
                          region: North India
                        products:
                          - productId: 21
                            quantity: 2
                            variantId: P100
                            price: 100
                          - productId: 21
                            quantity: 2
                            variantId: P15756
                            price: 100
                        email: testvisitor@sendinblue.com
                        coupons: [
                          "flat50",
                          "flat40"
                        ]
                    count: 1

        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /orders/status:
    post:
      tags:
        - Ecommerce
      summary: Managing the status of the order
      description: Manages the transactional status of the order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        204:
          description: Order Event posted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /orders/status/batch:
    post:
      tags:
        - Ecommerce
      summary: Create orders in batch
      description: Create multiple orders at one time instead of one order at a time
      operationId: createBatchOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/orderBatch'
      responses:
        202:
          $ref: '#/components/responses/createdBatchId'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories:
    get:
      tags:
        - Ecommerce
      summary: Return all your categories
      operationId: getCategories
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 100
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter by category ids
        - name: name
          in: query
          schema:
            type: string
          description: Filter by category name
        - name: modifiedSince
          in: query
          description: |
            Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: createdSince
          in: query
          description: |
            Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string

      responses:
        200:
          description: All categories listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCategories'
              examples:
                response:
                  value:
                    categories:
                      - id: 19
                        name: Food
                        url: http://mydomain.com/category/food
                        modifiedAt: 2022-03-03T14:48:31.867Z
                        createdAt: 2021-12-31T11:42:35.638Z
                      - id: 20
                        name: clothing
                        url: http://mydomain.com/category/clothing
                        modifiedAt: 2022-03-03T14:48:31.867Z
                        createdAt: 2021-12-31T11:42:35.638Z
                        isDeleted: true
                    count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Ecommerce
      summary: Create/Update a category
      operationId: createUpdateCategory
      requestBody:
        description: Values to create/update a category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateCategory'
        required: true
      responses:
        201:
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCategoryModel'
              examples:
                response:
                  value:
                    id: 21
        204:
          description: Category updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories/{id}:
    get:
      tags:
        - Ecommerce
      summary: Get a category details
      operationId: getCategoryInfo
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Category informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCategoryDetails'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Category id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /categories/batch:
    post:
      tags:
        - Ecommerce
      summary: Create categories in batch
      operationId: createUpdateBatchCategory
      requestBody:
        description: Values to create a batch of categories
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateBatchCategory'
        required: true
      responses:
        201:
          description: Category created and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateBatchCategoryModel'
              examples:
                response:
                  value:
                    createdCount: 2
                    updatedCount: 7
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products:
    get:
      tags:
        - Ecommerce
      summary: Return all your products
      operationId: getProducts
      parameters:
        - name: limit
          in: query
          description: Number of documents per page
          schema:
            maximum: 1000
            type: integer
            format: int64
            default: 50
        - name: offset
          in: query
          description: Index of the first document in the page
          schema:
            type: integer
            format: int64
            default: 0
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: ids
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter by product ids
        - name: name
          in: query
          schema:
            type: string
          description: Filter by product name, minimum 3 characters should be present for search
        - name: price[lte]
          in: query
          schema:
            type: number
          description: Price filter for products less than and equals to particular amount
        - name: price[gte]
          in: query
          schema:
            type: number
          description: Price filter for products greater than and equals to particular amount
        - name: price[lt]
          in: query
          schema:
            type: number
          description: Price filter for products less than particular amount
        - name: price[gt]
          in: query
          schema:
            type: number
          description: Price filter for products greater than particular amount
        - name: price[eq]
          in: query
          schema:
            type: number
          description: Price filter for products equals to particular amount
        - name: price[ne]
          in: query
          schema:
            type: number
          description: Price filter for products not equals to particular amount
        - name: categories
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter by product categories
        - name: modifiedSince
          in: query
          description: |
            Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
        - name: createdSince
          in: query
          description: |
            Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          schema:
            type: string
      responses:
        200:
          description: All products listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProducts'
              examples:
                response:
                  value:
                    products:
                      - id: 7498033266862
                        name: Alpina Panoma Classic
                        url: https://mydomain.com/products/alpina-panoma-classic
                        sku: 186622-9
                        imageUrl: http://mydomain.com/product-absoulte-url/img.jpeg
                        categories: [
                          "279638835374",
                          "279502848174",
                        ]
                        price: 49.95
                        modifiedAt: 2022-06-30T10:29:16.078Z
                        createdAt: 2022-06-30T10:29:16.078Z
                        s3Original: https://img-ecom.mailinblue.com/path-to-original/img.jpg
                        s3ThumbAnalytics: https://img-ecom.mailinblue.com/path-to-analytics/img.jpg
                        s3ThumbEditor: https://img-ecom.mailinblue.com/path-to-editor/img.jpg
                      - id: 7498033266862
                        name: Alpina Panoma Classic2
                        url: https://mydomain.com/products/alpina-panoma-classic2
                        sku: 186622-9
                        imageUrl: http://mydomain.com/product-absoulte-url/img.jpeg
                        categories: [
                          "2d79638835374",
                          "27d9502848174",
                        ]
                        price: 49.95
                        metaInfo: {
                          description: "Shoes for sports",
                          brand: "addidas",
                        }
                        modifiedAt: 2022-06-30T10:29:16.078Z
                        createdAt: 2022-06-30T10:29:16.078Z
                        s3Original: https://img-ecom.mailinblue.com/path-to-original/img.jpg
                        s3ThumbAnalytics: https://img-ecom.mailinblue.com/path-to-analytics/img.jpg
                        s3ThumbEditor: https://img-ecom.mailinblue.com/path-to-editor/img.jpg
                        isDeleted: true
                    count: 2
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Ecommerce
      summary: Create/Update a product
      operationId: createUpdateProduct
      requestBody:
        description: Values to create/update a product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateProduct'
        required: true
      responses:
        201:
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProductModel'
              examples:
                response:
                  value:
                    id: 21
        204:
          description: Product updated
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products/{id}:
    get:
      tags:
        - Ecommerce
      summary: Get a product's details
      operationId: getProductInfo
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: Product informations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProductDetails'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Product's id not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /products/batch:
    post:
      tags:
        - Ecommerce
      summary: Create products in batch
      operationId: createUpdateBatchProducts
      requestBody:
        description: Values to create a batch of products
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUpdateBatchProducts'
        required: true
      responses:
        201:
          description: Products created and updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createUpdateBatchProductsModel'
              examples:
                response:
                  value:
                    createdCount: 2
                    updatedCount: 7
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /couponCollections:
    get:
      tags:
        - Coupons
      summary: Get all your coupon collections
      operationId: getCouponCollections
      parameters:
        - name: limit
          in: query
          description: Number of documents returned per page
          schema:
            type: integer
            format: int64
            default: 50
            minimum: 0
            maximum: 100
        - name: offset
          in: query
          description: Index of the first document on the page
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
        - name: sort
          in: query
          description: Sort the results by creation time in ascending/descending order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        200:
          description: Coupon collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCouponCollection'
              examples:
                response:
                  value:
                    collections:
                      - id: 23befbae-1505-47a8-bd27-e30ef739f32c
                        name: Summer
                        defaultCoupon: 10 OFF
                        createdAt: 2017-03-12T12:30:00Z
                        totalCoupons: 10000
                        remainingCoupons: 5000
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - Coupons
      summary: Create а coupon collection
      operationId: createCouponCollection
      requestBody:
        description: Values to create a coupon collection
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - defaultCoupon
              type: object
              properties:
                name:
                  type: string
                  description: Name of the collection with no white spaces between words
                  example: SummerPromotions
                defaultCoupon:
                  type: string
                  description: A default coupon to be used in case there are no coupons left
                  example: 10 OFF
      responses:
        201:
          description: Coupon collection created
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                properties:
                  id:
                    type: string
                    description: The id of the created collection
                    format: uuidv4
                    example: 23befbae-1505-47a8-bd27-e30ef739f32c
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /couponCollections/{id}:
    get:
      tags:
        - Coupons
      summary: Get a coupon collection by id
      operationId: getCouponCollection
      parameters:
        - name: id
          in: path
          description: Id of the collection to return
          required: true
          schema:
            type: string
            format: uuidv4
      responses:
        200:
          description: Coupon collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCouponCollection'
              examples:
                response:
                  value:
                    - id: 23befbae-1505-47a8-bd27-e30ef739f32c
                      name: Summer
                      defaultCoupon: 10 OFF
                      createdAt: 2017-03-12T12:30:00Z
                      totalCoupons: 10000
                      remainingCoupons: 5000
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Coupon collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    patch:
      tags:
        - Coupons
      summary: Update a coupon collection by id
      operationId: updateCouponCollection
      parameters:
        - name: id
          in: path
          description: Id of the collection to update
          required: true
          schema:
            type: string
            format: uuidv4
      requestBody:
        description: Values to update the coupon collection
        required: true
        content:
          application/json:
            schema:
              required:
                - defaultCoupon
              type: object
              properties:
                defaultCoupon:
                  type: string
                  description: A default coupon to be used in case there are no coupons left
                  example: 10 OFF
      responses:
        200:
          description: Coupon collection updated
          content:
            application/json:
              schema:
                required:
                  - id
                  - name
                  - defaultCoupon
                type: object
                properties:
                  id:
                    type: string
                    description: The id of the collection
                    format: uuidv4
                    example: 23befbae-1505-47a8-bd27-e30ef739f32c
                  name:
                    type: string
                    description: The name of the collection
                    format: uuidv4
                    example: SummerPromotions
                  defaultCoupon:
                    type: string
                    description: The default coupon of the collection
                    example: 10 OFF
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /coupons:
    post:
      tags:
        - Coupons
      summary: Create coupons for a coupon collection
      operationId: createCoupons
      requestBody:
        description: Values to create coupons
        required: true
        content:
          application/json:
            schema:
              required:
                - collectionId
                - coupons
              type: object
              properties:
                collectionId:
                  type: string
                  description: The id of the coupon collection for which the coupons will be created
                  format: uuidv4
                  example: 23befbae-1505-47a8-bd27-e30ef739f32c
                coupons:
                  type: array
                  minItems: 1
                  maxItems: 1000
                  uniqueItems: true
                  items:
                    type: string
                    description: Name of the coupon
                    example: Uf12AF
      responses:
        204:
          description: Coupons creation in progress
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Coupon collection not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /whatsapp/sendMessage:
    post:
      tags:
        - Transactional WhatsApp
      summary: Send a WhatsApp message
      description: This endpoint is used to send a WhatsApp message. <br/>(**The first message you send using the API must contain a Template ID. You must create a template on WhatsApp on the Brevo platform to fetch the Template ID.**)
      operationId: sendWhatsappMessage
      requestBody:
        description: Values to send WhatsApp message
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/sendWhatsappMessageTemplate'
                - $ref: '#/components/schemas/sendWhatsappMessageText'
        required: true
      responses:
        201:
          description: successfully created
          content:
            application/json:
              schema:
                required:
                  - messageId
                type: object
                properties:
                  messageId:
                    type: string
                    description: messageId of sent message
                    format: uuidv4
                    example: "23befbae-1505-47a8-bd27-e30ef739f32c"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /whatsapp/statistics/events:
    get:
      tags:
        - Transactional WhatsApp
      summary: Get all your WhatsApp activity (unaggregated events)
      description: This endpoint will show the unaggregated statistics for WhatsApp activity (30 days by default if `startDate` and `endDate` or `days` is not passed. The date range can not exceed 90 days)
      operationId: getWhatsappEventReport
      parameters:
        - name: limit
          in: query
          description: Number limitation for the result returned
          schema:
            maximum: 5000
            type: integer
            format: int64
            default: 2500
            minimum: 0
        - name: offset
          in: query
          description: Beginning point in the list to retrieve from
          schema:
            type: integer
            format: int64
            default: 0
        - name: startDate
          in: query
          description: |
            **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
          schema:
            type: string
        - name: endDate
          in: query
          description: |
            **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          schema:
            type: string
        - name: days
          in: query
          description: |
            Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
          schema:
            type: integer
            format: int64
        - name: contactNumber
          in: query
          description: Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721)
          schema:
            type: string
            format: mobile
        - name: event
          in: query
          description: Filter the report for a specific event type
          schema:
            type: string
            enum:
              - sent
              - delivered
              - read
              - error
              - unsubscribe
              - reply
              - soft-bounce
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
      responses:
        200:
          description: WhatsApp events report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getWhatsappEventReport'
              examples:
                response:
                  value:
                    events:
                      - contactNumber: 919876543211
                        date: 2017-03-12T12:30:00Z
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: sent
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: 2017-03-12T12:30:00Z
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: "error"
                        reason: "error reason"
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: 2017-03-12T12:30:00Z
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: "soft-bounce"
                        reason: "invalid whatsapp contact"
                        senderNumber: 919876543210
                      - contactNumber: 919876543211
                        date: 2017-03-12T12:30:00Z
                        messageId: 23befbae-1505-47a8-bd27-e30ef739f32c
                        event: "reply"
                        body: "body only in case of text reply & url will be empty"
                        mediaUrl: "media url only in case media reply & body will be empty"
                        senderNumber: 919876543210
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

  /feeds:
    get:
      tags:
        - External Feeds
      summary: Fetch all external feeds
      description: This endpoint can fetch all created external feeds.
      operationId: getAllExternalFeeds
      parameters:
        - name: search
          description: Can be used to filter records by search keyword on feed name
          in: query
          example: 'search'
          required: false
          schema:
            type: string
        - name: startDate
          description: Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older than current date.
          in: query
          example: '2022-09-04'
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          description: Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
          in: query
          example: '2022-10-01'
          required: false
          schema:
            type: string
            format: date
        - name: sort
          in: query
          description: Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed.
          required: false
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - name: authType
          in: query
          description: Filter the records by `authType` of the feed.
          required: false
          schema:
            type: string
            enum:
              - basic
              - token
              - noAuth
        - name: limit
          description: Number of documents returned per page.
          in: query
          required: false
          example: 100
          schema:
            type: integer
            format: int64
            default: 50
            maximum: 500
            minimum: 0
        - name: offset
          description: Index of the first document on the page.
          in: query
          required: false
          example: 0
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: External feeds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllExternalFeeds'
              example:
                {
                  "count": 3,
                  "feeds": [
                    {
                      "id": "d955aaa4-f4d6-4557-aa14-24286542ed8d",
                      "name": "api feed token",
                      "url": "https://abc.com/",
                      "authType": "token",
                      "token": "jfhdkjdfhjkfdhjkdfhjkdfhkj",
                      "headers": [
                        {
                          "name": "key",
                          "value": "val"
                        }
                      ],
                      "maxRetries": 4,
                      "cache": true,
                      "createdAt": "2022-10-06T05:03:47.053000000Z",
                      "modifiedAt": "2022-10-06T05:03:47.053000000Z"
                    },
                    {
                      "id": "311a71ac-bebc-42cf-963d-d8666dfe53e9",
                      "name": "api feed basic",
                      "url": "https://abc.com/",
                      "authType": "basic",
                      "username": "user",
                      "password": "pass",
                      "headers": null,
                      "maxRetries": 2,
                      "cache": false,
                      "createdAt": "2022-10-06T04:48:19.767000000Z",
                      "modifiedAt": "2022-10-06T04:48:19.767000000Z"
                    }
                  ]
                }
        400:
          description: Invalid parameters passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Record not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    post:
      tags:
        - External Feeds
      summary: Create an external feed
      description: This endpoint will create an external feed.
      operationId: createExternalFeed
      requestBody:
        description: Values to create a feed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createExternalFeed'
        required: true
      responses:
        201:
          description: successfully created
          content:
            application/json:
              schema:
                required:
                  - id
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the object created
                    format: uuidv4
                    example: "23befbae-1505-47a8-bd27-e30ef739f32c"
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
  /feeds/{uuid}:
    get:
      tags:
        - External Feeds
      summary: Get an external feed by UUID
      description: This endpoint will update an external feed.
      operationId: getExternalFeedByUUID
      parameters:
        - name: uuid
          description: UUID of the feed to fetch
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: External feed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getExternalFeedByUUID'
              example:
                {
                  "id": "d955aaa4-f4d6-4557-aa14-24286542ed8d",
                  "name": "api feed token",
                  "url": "https://abc.com/",
                  "authType": "token",
                  "token": "jfhdkjdfhjkfdhjkdfhjkdfhkj",
                  "headers": [
                    {
                      "name": "key",
                      "value": "val"
                    }
                  ],
                  "maxRetries": 4,
                  "cache": true,
                  "createdAt": "2022-10-06T05:03:47.053000000Z",
                  "modifiedAt": "2022-10-06T05:03:47.053000000Z"
                }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    put:
      tags:
        - External Feeds
      summary: Update an external feed
      description: This endpoint will update an external feed.
      operationId: updateExternalFeed
      parameters:
        - name: uuid
          description: UUID of the feed to update
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Values to update a feed
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateExternalFeed'
        required: true
      responses:
        204:
          description: Feed updated
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
    delete:
      tags:
        - External Feeds
      summary: Delete an external feed
      description: This endpoint will delete an external feed.
      operationId: deleteExternalFeed
      parameters:
        - name: uuid
          description: UUID of the feed to delete
          example: 38f351fb-6e77-4b38-979a-a2465260449e
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Feed deleted
          content: { }
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'
        404:
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorModel'

components:
  schemas:
    getAccount:
      allOf:
        - $ref: '#/components/schemas/getExtendedClient'
        - required:
            - plan
            - relay
          type: object
          properties:
            plan:
              type: array
              description: Information about your plans and credits
              items:
                required:
                  - credits
                  - creditsType
                  - type
                type: object
                properties:
                  type:
                    type: string
                    description: Displays the plan type of the user
                    example: subscription
                    enum:
                      - payAsYouGo
                      - free
                      - subscription
                      - sms
                      - reseller
                  creditsType:
                    type: string
                    description: This is the type of the credit, "Send Limit" is one
                      of the possible types of credit of a user. "Send Limit" implies
                      the total number of emails you can send to the subscribers in
                      your account.
                    example: sendLimit
                    enum:
                      - sendLimit
                  credits:
                    type: number
                    description: Remaining credits of the user
                    format: float
                    example: 8755.0
                  startDate:
                    type: string
                    description: Date of the period from which the plan will start (only
                      available for "subscription" and "reseller" plan type)
                    format: date
                    example: 2016-12-31
                  endDate:
                    type: string
                    description: Date of the period from which the plan will end (only
                      available for "subscription" and "reseller" plan type)
                    format: date
                    example: 2017-01-31
                  userLimit:
                    type: integer
                    description: Only in case of reseller account. It implies the total
                      number of child accounts you can add to your account.
                    example: 10
            relay:
              required:
                - data
                - enabled
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Status of your transactional email Account (true=Enabled,
                    false=Disabled)
                  example: true
                data:
                  required:
                    - port
                    - relay
                    - userName
                  type: object
                  properties:
                    userName:
                      type: string
                      description: Email to use as login on transactional platform
                      format: email
                      example: john.smith@example.com
                    relay:
                      type: string
                      description: URL of the SMTP Relay
                      example: relay.domain.com
                    port:
                      type: integer
                      description: Port used for SMTP Relay
                      example: 125
                  description: Data regarding the transactional email account
              description: Information about your transactional email account
            marketingAutomation:
              required:
                - enabled
              type: object
              properties:
                key:
                  type: string
                  description: Marketing Automation Tracker ID
                  example: iso05aopqych87ysy0jymf
                enabled:
                  type: boolean
                  description: Status of Marketing Automation Plateform activation for
                    your account (true=enabled, false=disabled)
                  example: false
    getAccountActivity:
      type: object
      properties:
        logs:
          type: array
          description: Get user activity logs
          items:
            required:
              - action
              - date
              - user_email
              - user_ip
              - user_agent
            type: object
            properties:
              action:
                type: string
                description: Type of activity in the account.
                example: login-success
              date:
                type: string
                description: Time of the activity.
                example: '2023-03-27T16:30:00Z'
              user_email:
                type: string
                description: Email address of the user who performed activity in the account.
                example: 'test@mycompany.com'
              user_ip:
                type: string
                description: IP address of the user who performed activity in the account.
                example: "192.158.1.38"
              user_agent:
                type: string
                description: Browser details of the user who performed the activity.
                example: "Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us)"
    getInvitedUsersList:
      type: object
      properties:
        users:
          type: array
          description: Get invited users list
          items:
            required:
              - email
              - is_owner
              - status
              - feature_access
            type: object
            properties:
              email:
                type: string
                description: Email address of the user.
                example: 'pendingInvitedUser@company.com'
              is_owner:
                type: string
                description: Flag for indicating is user owner of the organization.
                example: true
              status:
                type: string
                description: Status of the invited user.
                example: 'active'
              feature_access:
                description: Feature accessiblity given to the user.
                type: object
                properties:
                  marketing:
                    description: Marketing features accessiblity.
                    type: string
                    example: 'custom'
                  conversations:
                    description: Conversations features accessiblity.
                    type: string
                    example: 'none'
                  crm:
                    description: CRM features accessiblity.
                    type: string
                    example: 'full'
    getCorporateInvitedUsersList:
      type: object
      properties:
        users:
          type: array
          description: Get invited users list
          items:
            required:
              - email
              - is_owner
              - status
              - feature_access
            type: object
            properties:
              groups:
                description: Admin user groups list
                type: object
                properties:
                  id:
                    description: group id
                    type: string
                    example: a5c4f22c08d9ed37ef1ca342
                  name:
                    description: group name
                    type: string
                    example: My group
              email:
                type: string
                description: Email address of the user.
                example: 'pendingInvitedUser@company.com'
              is_owner:
                type: string
                description: Flag for indicating is user owner of the organization.
                example: false
              status:
                type: string
                description: Status of the invited user.
                example: 'active'
              feature_access:
                description: Feature accessiblity given to the user. (Required only if status is active)
                type: object
                properties:
                  user_management:
                    description: User management accessiblity.
                    type: array
                    items:
                      type: string
                      example: 'all / none'
                  api_keys:
                    description: Api keys accessiblity.
                    type: array
                    items:
                      type: string
                      example: 'all / none'
                  my_plan:
                    description: My plan accessiblity.
                    type: array
                    items:
                      type: string
                      example: 'all / none'
                  apps_management:
                    description: Apps management accessiblity | Not available in ENTv2
                    type: array
                    items:
                      type: string
                      example: 'all / none'
    getUserPermission:
      type: object
      description: Check user permission
      required:
        - email
        - status
        - privileges
      properties:
        email:
          type: string
          description: Email address of the user.
          example: invitedUser@company.com
        status:
          type: string
          description: Status of the invited user.
          example: 'active'
        privileges:
          description: Granular feature permissions given to the user.
          type: array
          items:
            required:
              - feature
              - permissions
            type: object
            properties:
              feature:
                type: string
                example: 'Email campaign'
              permissions:
                type: array
                items:
                  type: string
                  example: 'Create / edit / delete'

    putRevokeUserPermission:
      type: object
      description: Revoke user permission
      required:
        - email
      properties:
        email:
          type: string
          description: Email address of the user.
          example: invitedUser@company.com

    putRevokeUserPermissionResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Status of the API operation.
          example: "OK"
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: "TEST-123"

    putresendcancelinvitation:
      type: object
      description: Revoke user permission
      required:
        - email
      properties:
        email:
          type: string
          description: Email address of the user.
          example: invitedUser@company.com

    putresendcancelinvitationResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Status of the API operation.
          example: "OK"
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: "TEST-123"

    inviteAdminUser:
      type: object
      required:
        - email
        - all_features_access
        - privileges
      properties:
        email:
          description: Email address for the organization
          type: string
          format: email
          example: inviteuser@example.com
        all_features_access:
          description: All access to the features
          type: boolean
          example: true
          enum:
            - true
            - false
        groupIds:
          description: Ids of Group
          type: array
          items:
            type: string
            description: Group Id
          example: [ "2baxxxxxxxxxxxxxxxxxxxxxcaa", "65axxxxxxxxxxxxxxxxxxxxxc5a" ]
        privileges:
          type: array
          items:
            type: object
            description: Privileges given to the user
            properties:
              feature:
                description: Feature name
                type: string
                enum:
                  - 'my_plan'
                  - 'api'
                  - 'user_management'
                  - 'app_management'
                example: 'user_management'
              permissions:
                description: Permissions for a given feature
                type: array
                items:
                  type: string
                  enum:
                    - 'all'
                    - 'none'
                  example: "'all', 'none'"
            example: [ { "feature": "my_plan", "permissions": [ "all" ] }, { "feature": "api", "permissions": [ "none" ] } ]
    inviteuser:
      type: object
      required:
        - email
        - all_features_access
        - privileges
      properties:
        email:
          description: Email address for the organization
          type: string
          format: email
          example: inviteuser@example.com
        all_features_access:
          description: All access to the features
          type: boolean
          example: true
          enum:
            - true
            - false
        privileges:
          type: array
          items:
            type: object
            description: Privileges given to the user
            properties:
              feature:
                description: Feature name
                type: string
                enum:
                  - 'email_campaigns'
                  - 'sms_campaigns'
                  - 'contacts'
                  - 'templates'
                  - 'workflows'
                  - 'facebook_ads'
                  - 'landing_pages'
                  - 'transactional_emails'
                  - 'smtp_api'
                  - 'user_management'
                  - 'sales_platform'
                  - 'phone'
                  - 'conversations'
                  - 'senders_domains_dedicated_ips'
                  - 'push_notifications'
                example: 'email_campaigns'
              permissions:
                description: Permissions for a given feature
                type: array
                items:
                  type: string
                  enum:
                    - 'create_edit_delete'
                    - 'send_schedule_suspend'
                    - 'view'
                    - 'import'
                    - 'export'
                    - 'list_and_attributes'
                    - 'forms'
                    - 'activate_deactivate'
                    - 'activate_deactivate_pause'
                    - 'settings'
                    - 'schedule_pause'
                    - 'all'
                    - 'logs'
                    - 'access'
                    - 'assign'
                    - 'configure'
                    - 'manage_owned_deals_tasks_companies'
                    - 'manage_others_deals_tasks_companies'
                    - 'reports'
                    - 'senders_management'
                    - 'domains_management'
                    - 'dedicated_ips_management'
                    - 'send'
                    - 'smtp'
                    - 'api_keys'
                    - 'authorized_ips'
                    - 'none'
                  example: "'create_edit_delete', 'send_schedule_suspend'"
            example: [ { "feature": "email_campaigns", "permissions": [ "create_edit_delete", "send_schedule_suspend" ] },{ "feature": "sms_campaigns", "permissions": [ "create_edit_delete","send_schedule_suspend" ] },{ "feature": "facebook_ads","permissions": [ "create_edit_delete", "schedule_pause" ] } ]

    inviteuserResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Status of the API operation.
          example: "OK"
        invoice_id:
          description: Invoice id
          type: string
          items:
            type: string
            example: "TEST-ID"

    updateUserResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: Status of the API operation.
          example: "OK"
        credit_notes:
          description: Credit note
          type: array
          items:
            type: string
            example: "TEST-123"
        invoice_id:
          description: Invoice id
          type: string
          items:
            type: string
            example: "TEST-ID"

    getChildrenList:
      type: object
      properties:
        children:
          type: array
          description: Your children's account information
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getChildInfo'
              - type: object
                properties:
                  id:
                    type: integer
                    description: ID of the child
                    format: int64
                    example: 187588
        count:
          type: integer
          description: Number of child accounts
          format: int64
          example: 24
    getChildInfo:
      allOf:
        - $ref: '#/components/schemas/getClient'
        - required:
            - password
          type: object
          properties:
            credits:
              type: object
              properties:
                emailCredits:
                  type: integer
                  description: Email credits available for your child
                  format: int64
                  example: 98555
                smsCredits:
                  type: integer
                  description: SMS credits available for your child
                  format: int64
                  example: 87556
              description: Credits available for your child
            statistics:
              type: object
              properties:
                previousMonthTotalSent:
                  type: integer
                  description: Overall emails sent for the previous month
                  format: int64
                  example: 7654
                currentMonthTotalSent:
                  type: integer
                  description: Overall emails sent for current month
                  format: int64
                  example: 4566
                totalSent:
                  type: integer
                  description: Overall emails sent for since the account exists
                  format: int64
                  example: 987554
              description: Statistics about your child account activity
            password:
              type: string
              description: The encrypted password of child account
              format: password
              example: abC01De2fGHI3jkL
            ips:
              type: array
              description: IP(s) associated to a child account user
              items:
                type: string
                description: IP(s) associated to the user
                example: ""
            apiKeys:
              required:
                - v2
              type: object
              properties:
                v2:
                  type: array
                  items:
                    required:
                      - key
                      - name
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the key for version 2
                        example: N˚2
                      key:
                        type: string
                        description: API Key for version 2
                        example: nOpxxxxxy7z
                v3:
                  type: array
                  items:
                    required:
                      - key
                      - name
                    type: object
                    properties:
                      name:
                        type: string
                        description: Name of the key for version 3
                        example: N˚3
                      key:
                        type: string
                        description: API Key for version 3
                        example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
              description: API Keys associated to child account
    getChildAccountCreationStatus:
      required:
        - childAccountCreated
      type: object
      properties:
        childAccountCreated:
          type: boolean
          description: Status of child account creation whether it is successfully
            created (exists) or not.
          example: true
    getChildDomains:
      type: array
      items:
        type: object
        allOf:
          - $ref: '#/components/schemas/getChildDomain'
    getSsoToken:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          description: Session token, it will remain valid for 15 days.
          example: ede520dxxxxxxxxxxxx76d631fba2
    createApiKeyResponse:
      required:
        - status
        - key
      type: object
      properties:
        status:
          type: string
          description: Status of the API operation.
          example: success
        key:
          type: string
          description: API key
          example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
    getChildDomain:
      type: object
      properties:
        domain:
          type: string
          description: Sender domain
          example: mycustomdomain.com
        active:
          type: boolean
          description: indicates whether a domain is verified or not
          example: true
    getClient:
      required:
        - companyName
        - email
        - firstName
        - lastName
      type: object
      properties:
        email:
          type: string
          description: Login Email
          format: email
          example: john.smith@example.com
        firstName:
          type: string
          description: First Name
          example: John
        lastName:
          type: string
          description: Last Name
          example: Smith
        companyName:
          type: string
          description: Name of the company
          example: MyCompany
    getExtendedClient:
      allOf:
        - $ref: '#/components/schemas/getClient'
        - required:
            - address
          type: object
          properties:
            address:
              required:
                - city
                - country
                - street
                - zipCode
              type: object
              properties:
                street:
                  type: string
                  description: Street information
                  example: 47 Harbour Street
                city:
                  type: string
                  description: City information
                  example: New-York
                zipCode:
                  type: string
                  description: Zip Code information
                  example: "9867"
                country:
                  type: string
                  description: Country information
                  example: United States of America
              description: Address informations
    getSendersList:
      type: object
      properties:
        senders:
          type: array
          description: List of the senders available in your account
          items:
            required:
              - active
              - email
              - id
              - name
            type: object
            properties:
              id:
                type: integer
                description: Id of the sender
                format: int64
                example: 0
              name:
                type: string
                description: From Name associated to the sender
                example: Marketing
              email:
                type: string
                description: From Email associated to the sender
                example: marketing@mycompany.com
              active:
                type: boolean
                description: Status of sender (true=activated, false=deactivated)
                example: false
              ips:
                type: array
                description: List of dedicated IP(s) available in the account. This
                  data is displayed only for dedicated IPs
                items:
                  required:
                    - domain
                    - ip
                    - weight
                  type: object
                  properties:
                    ip:
                      type: string
                      description: Dedicated IP available in your account
                      example: 123.98.689.7
                    domain:
                      type: string
                      description: Domain of the IP
                      example: mycompany.com
                    weight:
                      type: integer
                      description: Weight of the IP for this sender
                      format: int64
                      example: 50
    getDomainsList:
      type: object
      properties:
        domains:
          type: array
          description: List of the domains available in your account
          items:
            required:
              - id
              - domain_name
              - authenticated
              - verified
            type: object
            properties:
              id:
                type: integer
                description: Id of the domain
                format: int64
                example: 1
              domain_name:
                type: string
                description: Domain name
                example: mycompany.com
              authenticated:
                type: boolean
                description: Status of domain authentication (true=authenticated, false=non authenticated)
                example: true
              verified:
                type: boolean
                description: Status of domain verification (true=verified, false=non verified)
                example: false
              ip:
                type: string
                description: Dedicated IP associated with domain
                example: 123.98.689.7

    createChild:
      required:
        - companyName
        - email
        - firstName
        - lastName
        - password
      type: object
      properties:
        email:
          type: string
          description: Email address to create the child account
          format: email
          example: josh.cruise@example.com
        firstName:
          type: string
          description: First name to use to create the child account
          example: Josh
        lastName:
          type: string
          description: Last name to use to create the child account
          example: Cruise
        companyName:
          type: string
          description: Company name to use to create the child account
          example: Your Company
        password:
          type: string
          description: Password for the child account to login
          format: password
          example: Pa55w0rd65
        language:
          type: string
          description: Language of the child account
          example: en
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
    createSender:
      required:
        - email
        - name
      type: object
      properties:
        name:
          type: string
          description: From Name to use for the sender
          example: Newsletter
        email:
          type: string
          description: From email to use for the sender. A verification email will
            be sent to this address.
          format: email
          example: newsletter@mycompany.com
        ips:
          type: array
          description: |
            **Mandatory in case of dedicated IP**. IPs to associate to the sender
          items:
            required:
              - domain
              - ip
            type: object
            properties:
              ip:
                type: string
                description: Dedicated IP available in your account
                example: 123.98.689.7
              domain:
                type: string
                description: Domain of the IP
                example: mycompany.com
              weight:
                maximum: 1E+2
                minimum: 1
                type: integer
                description: Weight to apply to the IP. Sum of all IP weights must
                  be 100. Should be passed for either ALL or NONE of the IPs. If it's
                  not passed, the sending will be equally balanced on all IPs.
                format: int64
                example: 50
    updateSender:
      type: object
      properties:
        name:
          type: string
          description: From Name to update the sender
          example: Newsletter
        email:
          type: string
          description: From Email to update the sender
          format: email
          example: newsletter@mycompany.com
        ips:
          type: array
          description: |
            **Only in case of dedicated IP**. IPs to associate to the sender. If passed, will replace all the existing IPs.
          items:
            required:
              - domain
              - ip
            type: object
            properties:
              ip:
                type: string
                description: Dedicated IP available in your account
                example: 123.98.689.7
              domain:
                type: string
                description: Domain of the IP
                example: mycompany.com
              weight:
                maximum: 1E+2
                minimum: 1
                type: integer
                description: Weight to apply to the IP. Sum of all IP weights must
                  be 100. Should be passed for either ALL or NONE of the IPs. If it's
                  not passed, the sending will be equally balanced on all IPs.
                format: int64
                example: 50
    otp:
      required:
        - otp
      type: object
      properties:
        otp:
          type: integer
          description: 6 digit OTP received on email
          example: 123456
    createDomain:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Domain name
          example: mycompany.com
    updateChild:
      type: object
      properties:
        email:
          type: string
          description: New Email address to update the child account
          format: email
          example: josh.cruise@example.com
        firstName:
          type: string
          description: New First name to use to update the child account
          example: Josh
        lastName:
          type: string
          description: New Last name to use to update the child account
          example: Cruise
        companyName:
          type: string
          description: New Company name to use to update the child account
          example: Your Company
        password:
          type: string
          description: New password for the child account to login
          format: password
          example: Pa55w0rd65
    updateChildAccountStatus:
      type: object
      properties:
        transactionalEmail:
          type: boolean
          description: Status of Transactional Email Platform activation for your
            account (true=enabled, false=disabled)
          example: false
        transactionalSms:
          type: boolean
          description: Status of Transactional SMS Platform activation for your account
            (true=enabled, false=disabled)
          example: false
        marketingAutomation:
          type: boolean
          description: Status of Marketing Automation Platform activation for your
            account (true=enabled, false=disabled)
          example: true
        smsCampaign:
          type: boolean
          description: Status of SMS Campaign Platform activation for your account
            (true=enabled, false=disabled)
          example: true
    errorModel:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Error code displayed in case of a failure
          example: method_not_allowed
          enum:
            - invalid_parameter
            - missing_parameter
            - out_of_range
            - campaign_processing
            - campaign_sent
            - document_not_found
            - reseller_permission_denied
            - not_enough_credits
            - permission_denied
            - duplicate_parameter
            - duplicate_request
            - method_not_allowed
            - unauthorized
            - account_under_validation
            - not_acceptable
            - bad_request
        message:
          type: string
          description: Readable message associated to the failure
          example: POST Method is not allowed on this path
    remainingCreditModel:
      required:
        - child
        - reseller
      type: object
      properties:
        child:
          required:
            - email
            - sms
          type: object
          properties:
            sms:
              type: number
              description: SMS Credits remaining for child account
              format: double
              example: 500.0
            email:
              type: number
              description: Email Credits remaining for child account
              format: double
              example: 2000.0
          description: Credits remaining for child account
        reseller:
          required:
            - email
            - sms
          type: object
          properties:
            sms:
              type: number
              description: SMS Credits remaining for reseller account
              format: double
              example: 12900.0
            email:
              type: number
              description: Email Credits remaining for reseller account
              format: double
              example: 2000000.0
    addCredits:
      type: object
      properties:
        sms:
          type: integer
          description: |
            **Required if email credits are empty.** SMS credits to be added to the child account
          format: int64
          example: 450
        email:
          type: integer
          description: |
            **Required if sms credits are empty.** Email credits to be added to the child account
          format: int64
          example: 1200
    removeCredits:
      type: object
      properties:
        sms:
          type: integer
          description: |
            **Required if email credits are empty.** SMS credits to be removed from the child account
          format: int64
          example: 300
        email:
          type: integer
          description: |
            **Required if sms credits are empty.** Email credits to be removed from the child account
          format: int64
          example: 500
    addChildDomain:
      type: object
      properties:
        domain:
          type: string
          description: Sender domain to add for a specific child account
          example: mychilddomain.com
    updateChildDomain:
      type: object
      properties:
        domain:
          type: string
          description: Value for the sender domain that will replace the existing
            domain
          example: myupdateddomain.com
    getProcesses:
      type: object
      properties:
        processes:
          type: array
          description: List of processes available on your account
          items:
            $ref: '#/components/schemas/getProcess'
        count:
          type: integer
          description: Number of processes available on your account
          format: int64
          example: 5
    getProcess:
      required:
        - id
        - name
        - status
      type: object
      properties:
        id:
          type: integer
          description: Id of the process
          format: int64
          example: 145
        status:
          type: string
          description: Status of the process
          example: queued
          enum:
            - queued
            - in_process
            - completed
        name:
          type: string
          description: Process name
          example: IMPORTUSER
        export_url:
          type: string
          description: URL on which send export the of contacts once the process is
            completed
          example: http://requestb.in/16ua3aj1
    getEmailCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getExtendedCampaignOverview'
              - required:
                  - recipients
                  - statistics
                type: object
                properties:
                  recipients:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/getCampaignRecipients'
                  statistics:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/getExtendedCampaignStats'
                  shareLink:
                    type: string
                    description: Link to share the campaign on social medias
                    format: url
                    example: http://dhh.brevo.com/fhsgccc.html?t=9865448900
        count:
          type: integer
          description: Number of Email campaigns retrieved
          format: int64
          example: 24
    getSmsCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getSmsCampaignOverview'
              - required:
                  - recipients
                  - statistics
                type: object
                properties:
                  recipients:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/getCampaignRecipients'
                  statistics:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/getSmsCampaignStats'
        count:
          type: integer
          description: Number of SMS campaigns retrieved
          format: int64
          example: 12
    getSmsCampaign:
      allOf:
        - $ref: '#/components/schemas/getSmsCampaignOverview'
        - required:
            - recipients
            - statistics
          type: object
          properties:
            recipients:
              type: object
              allOf:
                - $ref: '#/components/schemas/getCampaignRecipients'
            statistics:
              type: object
              allOf:
                - $ref: '#/components/schemas/getSmsCampaignStats'
    getEmailCampaign:
      allOf:
        - $ref: '#/components/schemas/getExtendedCampaignOverview'
        - required:
            - recipients
            - statistics
          type: object
          properties:
            recipients:
              type: object
              allOf:
                - $ref: '#/components/schemas/getCampaignRecipients'
            statistics:
              type: object
              allOf:
                - $ref: '#/components/schemas/getExtendedCampaignStats'
    getCampaignOverview:
      required:
        - id
        - name
        - status
        - type
      type: object
      properties:
        id:
          type: integer
          description: ID of the campaign
          format: int64
          example: 12
        name:
          type: string
          description: Name of the campaign
          example: EN - Sales Summer 2017
        subject:
          type: string
          description: Subject of the campaign. Only available if `abTesting` flag
            of the campaign is `false`
          example: 20% OFF for 2017 Summer Sales
        previewText:
          type: string
          description: Preview text or preheader of the email campaign
          example: Thanks for your order!
        type:
          type: string
          description: Type of campaign
          example: classic
          enum:
            - classic
            - trigger
        status:
          type: string
          description: Status of the campaign
          example: sent
          enum:
            - draft
            - sent
            - archive
            - queued
            - suspended
            - in_process
        scheduledAt:
          type: string
          description: UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
        abTesting:
          type: boolean
          description: Status of A/B Test for the campaign. abTesting = false means
            it is disabled, & abTesting = true means it is enabled.
          example: true
        subjectA:
          type: string
          description: Subject A of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          example: Discover the New Collection!
        subjectB:
          type: string
          description: Subject B of the ab-test campaign. Only available if `abTesting`
            flag of the campaign is `true`
          example: Want to discover the New Collection?
        splitRule:
          type: integer
          description: The size of your ab-test groups. Only available if `abTesting`
            flag of the campaign is `true`
          example: 25
        winnerCriteria:
          type: string
          description: Criteria for the winning version. Only available if `abTesting`
            flag of the campaign is `true`
          example: open
        winnerDelay:
          type: integer
          description: The duration of the test in hours at the end of which the winning
            version will be sent. Only available if `abTesting` flag of the campaign
            is `true`
          example: 50
        sendAtBestTime:
          type: boolean
          description: It is true if you have chosen to send your campaign at best
            time, otherwise it is false
          example: true
    getExtendedCampaignOverview:
      allOf:
        - $ref: '#/components/schemas/getCampaignOverview'
        - required:
            - createdAt
            - footer
            - header
            - htmlContent
            - modifiedAt
            - replyTo
            - sender
            - testSent
          type: object
          properties:
            testSent:
              type: boolean
              description: Retrieved the status of test email sending. (true=Test email
                has been sent  false=Test email has not been sent)
              example: true
            header:
              type: string
              description: Header of the campaign
              example: '[DEFAULT_HEADER]'
            footer:
              type: string
              description: Footer of the campaign
              example: '[DEFAULT_FOOTER]'
            sender:
              type: object
              properties:
                name:
                  type: string
                  description: Sender name of the campaign
                  example: Marketing
                email:
                  type: string
                  description: Sender email of the campaign
                  format: email
                  example: marketing@mycompany.com
                id:
                  type: integer
                  format: int64
                  description: Sender id of the campaign
                  example: 43
            replyTo:
              type: string
              description: Email defined as the "Reply to" of the campaign
              format: email
              example: replyto@domain.com
            toField:
              type: string
              description: Customisation of the "to" field of the campaign
              example: '{FNAME} {LNAME}'
            htmlContent:
              type: string
              description: HTML content of the campaign
              example: This is my HTML Content
            shareLink:
              type: string
              description: Link to share the campaign on social medias
              format: url
              example: http://dhh.brevo.com/fhsgccc.html?t=9865448900
            tag:
              type: string
              description: Tag of the campaign
              example: Newsletter
            createdAt:
              type: string
              description: Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-05-01T12:30:00Z
            modifiedAt:
              type: string
              description: UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-05-01T12:30:00Z
            inlineImageActivation:
              type: boolean
              description: Status of inline image. inlineImageActivation = false means
                image can’t be embedded, & inlineImageActivation = true means image
                can be embedded, in the email.
              example: true
            mirrorActive:
              type: boolean
              description: Status of mirror links in campaign. mirrorActive = false
                means mirror links are deactivated, & mirrorActive = true means mirror
                links are activated, in the campaign
              example: true
            recurring:
              type: boolean
              description: FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false
                means contact can receive the same Trigger campaign only once, & recurring
                = true means contact can receive the same Trigger campaign several times
              example: true
            sentDate:
              type: string
              description: Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ).
                Only available if 'status' of the campaign is 'sent'
              example: 2018-12-01T16:30:00Z
            returnBounce:
              type: integer
              description: Total number of non-delivered campaigns for a particular
                campaign id.
              format: int64
              example: 5
    getCampaignRecipients:
      required:
        - exclusionLists
        - lists
      type: object
      properties:
        lists:
          type: array
          items:
            type: integer
            description: List IDs included in the campaign
            format: int64
            example: 21
        exclusionLists:
          type: array
          items:
            type: integer
            description: List IDs excluded of the campaign
            format: int64
            example: 13
    getExtendedCampaignStats:
      required:
        - campaignStats
        - globalStats
        - linksStats
        - mirrorClick
        - remaining
        - statsByBrowser
        - statsByDevice
        - statsByDomain
      type: object
      properties:
        globalStats:
          type: object
          description: Overall statistics of the campaign
          allOf:
            - $ref: '#/components/schemas/getCampaignStats'
        campaignStats:
          type: array
          description: List-wise statistics of the campaign.
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getCampaignStats'
        mirrorClick:
          type: integer
          description: Number of clicks on mirror link
          format: int64
          example: 120
        remaining:
          type: integer
          description: Number of remaning emails to send
          format: int64
          example: 1000
        linksStats:
          type: object
          properties: { }
          description: Statistics about the number of clicks for the links
          example:
            example.abc.com: 7
            example.domain.com: 10
        statsByDomain:
          $ref: '#/components/schemas/getStatsByDomain'
        statsByDevice:
          $ref: '#/components/schemas/getStatsByDevice'
        statsByBrowser:
          $ref: '#/components/schemas/getStatsByBrowser'
    getStatsByDomain:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/getCampaignStats'
    getStatsByDevice:
      type: object
      properties:
        desktop:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of desktop devices
        mobile:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of mobile devices
        tablet:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of tablet devices
        unknown:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/getDeviceBrowserStats'
          description: Statistics of the campaign on the basis of unknown devices
    getStatsByBrowser:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/getDeviceBrowserStats'
    addContactToListByEmails:
      type: object
      properties:
        emails:
          maxItems: 150
          minItems: 1
          type: array
          description: |
            Emails to add to a list. You can pass a **maximum of 150 emails** for addition in one request. **_If you need to add the emails in bulk, please prefer /contacts/import api._**
          items:
            type: string
            description: Email to add to a list
            format: email
            example: john.smith@contact.com
    addContactToListByIDs:
      type: object
      properties:
        ids:
          maxItems: 150
          minItems: 1
          type: array
          description: |
            IDs to add to a list. You can pass a **maximum of 150 IDs** for addition in one request. **_If you need to add the emails in bulk, please prefer /contacts/import api._**
          items:
            type: integer
            description: ID to add to a list
            format: int64
            example: 10
    removeContactFromListByEmails:
      type: object
      properties:
        emails:
          maxItems: 150
          minItems: 1
          type: array
          description: |
            **Required if 'all' is false and 'ids' is empty.** Emails to remove from a list. You can pass a **maximum of 150 emails** for removal in one request.
          items:
            type: string
            description: Email to remove from a list
            format: email
            example: john.smith@contact.com

    removeContactFromListByIDs:
      type: object
      properties:
        ids:
          maxItems: 150
          minItems: 1
          type: array
          description: |
            **Required if 'all' is false and 'emails' is empty.** IDs to remove from a list. You can pass a **maximum of 150 IDs** for removal in one request.
          items:
            type: integer
            description: ID to remove from a list
            format: int64
            example: 10

    removeContactFromListByAll:
      type: object
      properties:
        all:
          type: boolean
          description: |
            **Required if 'emails' and 'ids' are empty.** Remove all existing contacts from a list. A process will be created in this scenario. You can fetch the process details to know about the progress
          example: true
    getSmsCampaignOverview:
      required:
        - content
        - createdAt
        - id
        - modifiedAt
        - name
        - sender
        - status
      type: object
      properties:
        id:
          type: integer
          description: ID of the SMS Campaign
          format: int64
          example: 2
        name:
          type: string
          description: Name of the SMS Campaign
          example: PROMO CODE
        status:
          type: string
          description: Status of the SMS Campaign
          example: draft
          enum:
            - draft
            - sent
            - archive
            - queued
            - suspended
            - inProcess
        content:
          type: string
          description: Content of the SMS Campaign
          example: Visit our Store and get some discount !
        scheduledAt:
          type: string
          description: UTC date-time on which SMS campaign is scheduled. Should be
            in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
        sender:
          type: string
          description: Sender of the SMS Campaign
          example: MyCompany
        createdAt:
          type: string
          description: Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
        modifiedAt:
          type: string
          description: UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
    getWhatsappCampaignOverview:
      required:
        - id
        - campaignName
        - campaignStatus
        - senderNumber
        - recipients
        - createdAt
        - template
        - modifiedAt
      type: object
      properties:
        id:
          type: integer
          description: ID of the WhatsApp Campaign
          format: int64
          example: 1672035851100690
        campaignName:
          type: string
          description: Name of the WhatsApp Campaign
          example: Test Campaign
        campaignStatus:
          type: string
          description: Status of the WhatsApp Campaign
          example: draft
          enum:
            - draft
            - scheduled
            - pending
            - approved
            - running
            - suspended
            - rejected
            - sent
        scheduledAt:
          type: string
          description: UTC date-time on which WhatsApp campaign is scheduled. Should be
            in YYYY-MM-DDTHH:mm:ss.SSSZ format
          example: 2017-06-01T12:30:00Z
        senderNumber:
          type: string
          description: Sender of the WhatsApp Campaign
          example: 9368207029
        stats:
          $ref: '#/components/schemas/WhatsappCampStats'
        template:
          $ref: '#/components/schemas/WhatsappCampTemplate'
        createdAt:
          type: string
          description: Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-06-01T12:30:00Z
        modifiedAt:
          type: string
          description: UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
    WhatsappCampStats:
      type: object
      required:
        - sent
        - delivered
        - read
        - unsubscribe
        - notSent
      properties:
        sent:
          type: integer
          example: 3
        delivered:
          type: integer
          example: 3
        read:
          type: integer
          example: 2
        unsubscribe:
          type: integer
          example: 0
        notSent:
          type: integer
          example: 4
    WhatsappCampTemplate:
      type: object
      properties:
        name:
          type: string
          example: wta107
          description: name of the template
        category:
          type: string
          example: Marketing
          description: description of the template
        language:
          type: string
          example: en_GB
          description: language of the template
        contains_button:
          type: boolean
          example: false
        display_header:
          type: boolean
          example: true
        header_type:
          type: string
          example: text
          description: type of header
        components:
          type: array
          description: array of component item objects
          items:
            $ref: '#/components/schemas/componentItems'
        header_variables:
          type: array
          description: array of variables item object
          items:
            $ref: '#/components/schemas/variablesItems'
        body_variables:
          type: array
          description: array of variables item variables
          items:
            $ref: '#/components/schemas/variablesItems'
        button_type:
          type: string
          example: QUICK_REPLIES
        hide_footer:
          type: boolean
          example: true
    componentItems:
      type: object
      properties:
        type:
          type: string
          example: BODY
        text:
          type: string
          example: Life is a long lesson in humility
    variablesItems:
      type: object
      properties:
        name:
          type: string
          example: FIRSTNAME
        default:
          type: string
          example: INVALID_HEADER
        datatype:
          type: string
          example: text
    bodyVariablesItems:
      type: object
    getWhatsappTemplates:
      type: object
      properties:
        templates:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - status
              - type
              - language
              - category
              - createdAt
              - modifiedAt
            properties:
              id:
                type: integer
                description: ID of the WhatsApp template
                format: int64
                example: 235
              name:
                type: string
                description: Name of the WhatsApp template
                example: Test template
              status:
                type: string
                description: Status of the WhatsApp template
                example: approved
              language:
                type: string
                description: Language in which template exists
                example: en
              category:
                type: string
                description: category of the template
                example: MARKETING
              errorReason:
                type: string
                description: Error reason in the template creation
                example: NONE
              createdAt:
                type: string
                description: Creation UTC date-time of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
                example: 2017-06-01T12:30:00Z
              modifiedAt:
                type: string
                description: UTC date-time of last modification of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
                example: 2017-05-01T12:30:00Z
        count:
          type: integer
          description: Number of WhatsApp templates retrieved
          format: int64
          example: 24
    getWhatsappCampaigns:
      type: object
      properties:
        campaigns:
          type: array
          items:
            type: object
            required:
              - id
              - campaignName
              - campaignStatus
              - templateId
              - scheduledAt
              - createdAt
              - modifiedAt
            properties:
              id:
                type: integer
                description: ID of the WhatsApp Campaign
                format: int64
                example: 1672035851100690
              campaignName:
                type: string
                description: Name of the WhatsApp Campaign
                example: Test Campaign
              templateId:
                type: string
                description: Id of the WhatsApp template
                example: 637660278078655
              campaignStatus:
                type: string
                description: Status of the WhatsApp Campaign
                example: draft
                enum:
                  - draft
                  - scheduled
                  - pending
                  - approved
                  - running
                  - suspended
                  - rejected
                  - sent
              scheduledAt:
                type: string
                description: UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
                example: 2017-06-01T12:30:00Z
              errorReason:
                type: string
                description: Error Reason associated with the WhatsApp campaign sending
              invalidatedContacts:
                type: integer
                description: Count of invalidated contacts
                format: int64
                example: 0
              readPercentage:
                type: number
                description: Read percentage of the the WhatsApp campaign created
                format: float
                example: 28.57
              stats:
                $ref: '#/components/schemas/WhatsappCampStats'
              createdAt:
                type: string
                description: Creation UTC date-time of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
                example: 2017-06-01T12:30:00Z
              modifiedAt:
                type: string
                description: UTC date-time of last modification of the WhatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ)
                example: 2017-05-01T12:30:00Z
        count:
          type: integer
          description: Number of WhatsApp campaigns retrieved
          format: int64
          example: 40
    createWhatsAppCampaign:
      type: object
      required:
        - name
        - templateId
        - scheduledAt
        - recipients
      properties:
        name:
          type: string
          description: Name of the WhatsApp campaign creation
          example: Test Campaign
        templateId:
          type: integer
          description: Id of the WhatsApp template in **approved** state
          example: 19
        scheduledAt:
          type: string
          description: |
            Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00**
          example: 2017-06-01T12:30:00+02:00
        recipients:
          type: object
          properties:
            excludedListIds:
              type: array
              description: List ids to exclude from the campaign
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              type: array
              description: |
                **Mandatory if scheduledAt is not empty**. List Ids to send the campaign to
              items:
                type: integer
                format: int64
                example: 32
            segments:
              description: |
                **Mandatory if listIds are not used**. Segment ids to send the campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
          description: Segment ids and List ids to include/exclude from campaign
    getWhatsAppConfig:
      type: object
      properties:
        whatsappBusinessAccountId:
          type: string
          description: Id of the WhatsApp business account
          example: 105569359072383
        sendingLimit:
          type: string
          description: Sending limit Information of the WhatsApp API account
          example: TIER_1K
        phoneNumberQuality:
          type: string
          description: Quality status of phone number associated with WhatsApp account. There are three quality ratings. example - **High (GREEN) , Medium (YELLOW) and Low(RED)**
          example: GREEN
          enum:
            - GREEN
            - YELLOW
            - RED
        whatsappBusinessAccountStatus:
          type: string
          description: Status information related to WhatsApp API account
          example: APPROVED
          enum:
            - APPROVED
            - PENDING
            - REJECTED
        businessStatus:
          type: string
          description: Verification status information of the Business account
          example: verified
        phoneNumberNameStatus:
          type: string
          description: Status of the name associated with WhatsApp Phone number
          example: APPROVED
          enum:
            - APPROVED
            - PENDING
            - REJECTED
    createWhatsAppTemplate:
      type: object
      required:
        - name
        - language
        - category
        - bodyText
      properties:
        name:
          type: string
          description: Name of the template
          example: Test template
        language:
          type: string
          description: |
            Language of the template. For Example :
            **en** for English
          example: en
        category:
          type: string
          description: Category of the template
          example: MARKETING
          enum:
            - MARKETING
            - UTILITY
        mediaUrl:
          type: string
          description: |
            Absolute url of the media file **(no local file)** for the header. **Use this field in you want to add media in Template header and headerText is empty**.
            Allowed extensions for media files are:
            #### jpeg | png | mp4 | pdf
          example: https://attachment.domain.com
        bodyText:
          type: string
          description: Body of the template. **Maximum allowed characters are 1024**
          example: making it look like readable English
        headerText:
          type: string
          description: |
            Text content of the header in the template. **Maximum allowed characters are 45**
            **Use this field to add text content in template header and if mediaUrl is empty**
          example: Test WhatsApp campaign
        source:
          type: string
          description: source of the template
          enum:
            - Automation
            - Conversations
    updateWhatsAppCampaign:
      type: object
      properties:
        campaignName:
          type: string
          description: Name of the campaign
          example: Test WhatsApp
        campaignStatus:
          type: string
          description: Status of the campaign
          example: scheduled
          enum:
            - scheduled
            - suspended
          default: scheduled
        rescheduleFor:
          type: string
          description: |
            Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00**
            Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign.
          example: 2017-06-01T12:30:00+02:00
        recipients:
          type: object
          properties:
            excludedListIds:
              type: array
              description: List ids to exclude from the campaign
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              type: array
              description: |
                **Mandatory if scheduledAt is not empty**. List Ids to send the campaign to
              items:
                type: integer
                format: int64
                example: 32
            segments:
              description: |
                **Mandatory if listIds are not used**. Segment ids to send the campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
          description: Segment ids and List ids to include/exclude from campaign
    createModel:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: ID of the object created
          format: int64
          example: 5
    createUpdateContactModel:
      type: object
      properties:
        id:
          type: integer
          description: ID of the contact when a new contact is created
          format: int64
          example: 122
    updateBatchContactsModel:
      type: object
      properties:
        successIds:
          type: array
          items:
            type: integer
            description: IDs which are successfully updated
            format: int64
          example: 1,2
        failureIds:
          type: array
          items:
            type: integer
            description: IDs which are not updated
            format: int64
          example: 3,4
    createSenderModel:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: ID of the Sender created
          format: int64
          example: 5
        spfError:
          type: boolean
          description: Status of SPF configuration for the sender (true = SPF not
            well configured, false = SPF well configured)
          example: true
        dkimError:
          type: boolean
          description: Status of DKIM configuration for the sender (true = DKIM not
            well configured, false = DKIM well configured)
          example: false
    createDomainModel:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: ID of the Domain created
          format: int64
          example: 5
        domain_name:
          type: string
          description: Domain
          example: true
        message:
          type: string
          description: Success message
          example: Domain added successfully. To authenticate it, add following DNS records
        dns_records:
          type: object
          properties:
            dkim_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            brevo_code:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            dmarc_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
    authenticateDomainModel:
      required:
        - domain_name
        - message
      type: object
      properties:
        domain_name:
          type: string
          description: Domain
          example: myexample.com
        message:
          type: string
          description: Success message
          example: Domain has been authenticated successfully.
    getDomainConfigurationModel:
      required:
        - domain
        - verified
        - authenticated
        - dns_records
      type: object
      properties:
        domain:
          type: string
          description: Domain
          example: myexample.com
        verified:
          type: boolean
          description: Status of domain verification (true=verified, false=non verified)
          example: true
        authenticated:
          type: boolean
          description: Status of domain authentication (true=authenticated, false=non authenticated)
          example: false
        dns_records:
          type: object
          properties:
            dkim_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            brevo_code:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
            dmarc_record:
              type: object
              properties:
                type:
                  type: string
                value:
                  type: string
                host_name:
                  type: string
                status:
                  type: boolean
    createSmtpEmail:
      type: object
      properties:
        messageId:
          type: string
          description: Message ID of the transactional email sent
          example: <201798300811.5787683@relay.domain.com>
        messageIds:
          type: array
          items:
            type: string
            description: version wise message ID's of the transactional emails sent
            example: [ '<201798300811.5787683@relay.domain.com>','<201798300811.5787683@relay.domain.com>' ]
    uploadImageModel:
      type: object
      properties:
        url:
          type: string
          description: URL of the image uploaded
          example: 'https://img.mailinblue.com/100000/images/rnb/original/62casdase8wewq9df1c2f27c.jpeg'
    scheduleSmtpEmail:
      type: object
      properties:
        messageId:
          type: string
          description: Message ID of the transactional email scheduled
          example: <201798300811.5787683@relay.domain.com>
        messageIds:
          type: array
          items:
            type: string
            description: version wise message ID's of the transactional emails scheduled
        batchId:
          type: string
          description: Batch ID of the batch transactional email scheduled
          example: 5c6cfa04-eed9-42c2-8b5c-6d470d978e9d
    createReseller:
      required:
        - authKey
      type: object
      properties:
        authKey:
          type: string
          description: AuthKey of Reseller child created
          example: xkeysib-21881axxxxxcc92e04-mIrexxxx7z
        id:
          type: integer
          description: Id of Reseller child created
          format: int64
          example: 1234567
    sendSms:
      required:
        - messageId
        - reference
      type: object
      properties:
        reference:
          type: string
          example: ab1cde2fgh3i4jklmno
        messageId:
          type: integer
          format: int64
          example: 1511882900176220
        smsCount:
          type: integer
          description: Count of SMS's to send multiple text messages
          format: int64
          example: 2
        usedCredits:
          type: number
          description: SMS credits used per text message
          format: float
          example: 0.7
        remainingCredits:
          type: number
          description: Remaining SMS credits of the user
          format: float
          example: 82.85
    createdProcessId:
      required:
        - processId
      type: object
      properties:
        processId:
          type: integer
          description: Id of the process created
          format: int64
          example: 78
    createUpdateFolder:
      type: object
      properties:
        name:
          type: string
          description: Name of the folder
          example: Wordpress Contacts
    postSendFailed:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Response code
          example: invalid_parameter
        message:
          type: string
          description: Response message
          example: The email could not be sent to all recipients
        unexistingEmails:
          type: array
          items:
            type: string
            description: Email addresses you tried to sent an email to, but not existing
              in your contacts
            format: email
            example: matthew.dow@example.com, elisa.carrely@example.com
        withoutListEmails:
          type: array
          items:
            type: string
            description: Email addresses you sent an email to, without a contact list
            format: email
            example: jeff.dean@example.com, jim.sue@example.com
        blackListedEmails:
          type: array
          items:
            type: string
            description: Email addresses which are blacklisted. ONLY FOR email-campign's
              sendTest OR smtp-template's sendTest api's.
            format: email
            example: jeff.dean@example.com, jim.sue@example.com
    postSendSmsTestFailed:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          description: Response code
          example: invalid_parameter
        message:
          type: string
          description: Response message
          example: The SMS could not be sent to all recipients
        unexistingSms:
          type: array
          items:
            type: string
            description: Email addresses you tried to sent a SMS to, but not existing
              in your contacts
            format: email
            example: 337699086644@mailin.com, 41778899954@mailin.com
        withoutListSms:
          type: array
          items:
            type: string
            description: Email addresses you sent a SMS to, without a contact list
            format: email
            example: 3542388988@mailin.com, 10976444477@mailin.com
    postContactInfo:
      required:
        - contacts
      type: object
      properties:
        contacts:
          type: object
          properties:
            success:
              oneOf:
                - type: array
                  items:
                    type: string
                    description: Email addresses which are successfully imported/removed
                    format: email
                  example: jeff32@example.com, jim56@example.com
                - type: array
                  items:
                    type: integer
                    description: IDs which are successfully imported/removed
                    format: int64
                  example: 1, 2
            failure:
              oneOf:
                - type: array
                  items:
                    type: string
                    description: Email addresses which can not be imported/removed, could be already in/out list and/or doesn't exist
                    format: email
                    example: jeff32@example.com, jim56@example.com
                - type: array
                  items:
                    type: integer
                    description: IDs which can not be imported/removed, could be already in/out list and/or doesn't exist
                    format: int64
                    example: 5, 6
            total:
              type: integer
              description: Displays the count of total number of contacts removed
                from list when user opts for "all" option.
              format: int64
              example: 27
            processId:
              type: integer
              description: Id of the process created to remove contacts from list
                when user opts for "all" option.
              format: int64
              example: 78
    getAggregatedReport:
      type: object
      properties:
        range:
          type: string
          description: Time frame of the report
          example: 2016-09-08|2017-04-06
        requests:
          type: integer
          description: Number of requests for the timeframe
          format: int64
          example: 263
        delivered:
          type: integer
          description: Number of delivered emails for the timeframe
          format: int64
          example: 249
        hardBounces:
          type: integer
          description: Number of hardbounces for the timeframe
          format: int64
          example: 1
        softBounces:
          type: integer
          description: Number of softbounces for the timeframe
          format: int64
          example: 4
        clicks:
          type: integer
          description: Number of clicks for the timeframe
          format: int64
          example: 12
        uniqueClicks:
          type: integer
          description: Number of unique clicks for the timeframe
          format: int64
          example: 8
        opens:
          type: integer
          description: Number of openings for the timeframe
          format: int64
          example: 47
        uniqueOpens:
          type: integer
          description: Number of unique openings for the timeframe
          format: int64
          example: 37
        spamReports:
          type: integer
          description: Number of complaint (spam report) for the timeframe
          format: int64
          example: 0
        blocked:
          type: integer
          description: Number of blocked contact emails for the timeframe
          format: int64
          example: 2
        invalid:
          type: integer
          description: Number of invalid emails for the timeframe
          format: int64
          example: 0
        unsubscribed:
          type: integer
          description: Number of unsubscribed emails for the timeframe
          format: int64
          example: 0
    getTransacBlockedContacts:
      type: object
      properties:
        count:
          type: integer
          description: Count of blocked or unsubscribed contact
          format: int64
          example: 1
        contacts:
          type: array
          items:
            required:
              - blockedAt
              - email
              - reason
              - senderEmail
            type: object
            properties:
              email:
                type: string
                description: Email address of the blocked or unsubscribed contact
                format: email
                example: john.smith@example.com
              senderEmail:
                type: string
                description: Sender email address of the blocked or unsubscribed contact
                format: email
                example: john.smith@example.com
              reason:
                type: object
                properties:
                  code:
                    type: string
                    description: Reason code for blocking / unsubscribing (This code
                      is safe for comparison)
                    example: AdminBlocked
                    enum:
                      - unsubscribedViaMA
                      - unsubscribedViaEmail
                      - adminBlocked
                      - unsubscribedViaApi
                      - hardBounce
                      - contactFlaggedAsSpam
                  message:
                    type: string
                    description: Reason for blocking / unsubscribing (This string
                      is not safe for comparison)
                    example: Admin blocked
                description: Reason for blocking / unsubscribing
                example: Admin blocked
              blockedAt:
                type: string
                description: Date when the contact was blocked or unsubscribed on
                example: 2017-05-01T12:30:00Z
    getReports:
      type: object
      properties:
        reports:
          type: array
          items:
            required:
              - blocked
              - clicks
              - date
              - delivered
              - hardBounces
              - invalid
              - opens
              - requests
              - softBounces
              - spamReports
              - uniqueClicks
              - uniqueOpens
              - unsubscribed
            type: object
            properties:
              date:
                type: string
                description: Date of the statistics
                format: date
                example: 2017-04-06
              requests:
                type: integer
                description: Number of requests for the date
                format: int64
                example: 65
              delivered:
                type: integer
                description: Number of delivered emails for the date
                format: int64
                example: 63
              hardBounces:
                type: integer
                description: Number of hardbounces for the date
                format: int64
                example: 1
              softBounces:
                type: integer
                description: Number of softbounces for the date
                format: int64
                example: 1
              clicks:
                type: integer
                description: Number of clicks for the date
                format: int64
                example: 6
              uniqueClicks:
                type: integer
                description: Number of unique clicks for the date
                format: int64
                example: 5
              opens:
                type: integer
                description: Number of openings for the date
                format: int64
                example: 58
              uniqueOpens:
                type: integer
                description: Number of unique openings for the date
                format: int64
                example: 52
              spamReports:
                type: integer
                description: Number of complaints (spam reports) for the date
                format: int64
                example: 0
              blocked:
                type: integer
                description: Number of blocked emails for the date
                format: int64
                example: 0
              invalid:
                type: integer
                description: Number of invalid emails for the date
                format: int64
                example: 0
              unsubscribed:
                type: integer
                description: Number of unsubscribed emails for the date
                format: int64
                example: 0
    getEmailEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            required:
              - date
              - email
              - event
              - messageId
            type: object
            properties:
              email:
                type: string
                description: Email address which generates the event
                format: email
                example: john.smith@example.com
              date:
                type: string
                description: UTC date-time on which the event has been generated
                example: 2017-03-12T12:30:00Z
              subject:
                type: string
                description: Subject of the event
                example: Sib client test
              messageId:
                type: string
                description: Message ID which generated the event
                example: <201798300811.5787683@relay.domain.com>
              event:
                type: string
                description: Event which occurred
                example: delivered
                enum:
                  - bounces
                  - hardBounces
                  - softBounces
                  - delivered
                  - spam
                  - requests
                  - opened
                  - clicks
                  - invalid
                  - deferred
                  - blocked
                  - unsubscribed
                  - error
                  - loadedByProxy
              reason:
                type: string
                description: Reason of bounce (only available if the event is hardbounce
                  or softbounce)
                example: Error connection timeout
              tag:
                type: string
                description: Tag of the email which generated the event
                example: OrderConfirmation
              ip:
                type: string
                description: IP from which the user has opened the email or clicked
                  on the link (only available if the event is opened or clicks)
                example: 165.87.3.15
              link:
                type: string
                description: The link which is sent to the user (only available if
                  the event is requests or opened or clicks)
                example: https://www.someexamplelink.com
              from:
                type: string
                description: Sender email from which the emails are sent
                format: email
                example: john@example.com
              templateId:
                type: integer
                description: ID of the template (only available if the email is template based)
                format: int64
                example: 4
    getSmsEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            properties:
              phoneNumber:
                type: string
                description: Phone number which has generated the event
                example: "00189001094"
              date:
                type: string
                description: UTC date-time on which the event has been generated
                example: 2017-03-12T12:30:00Z
              messageId:
                type: string
                description: Message ID which generated the event
                example: "1472640582425378"
              event:
                type: string
                description: Event which occurred
                example: accepted
                enum:
                  - bounces
                  - hardBounces
                  - softBounces
                  - delivered
                  - sent
                  - accepted
                  - unsubscription
                  - replies
                  - blocked
                  - rejected
              reason:
                type: string
                description: Reason of bounce (only available if the event is hardbounce
                  or softbounce)
                example: Message is undeliverable due to an incorrect / invalid /
                  blacklisted / permanently barred MSISDN for this operator
              reply:
                type: string
              tag:
                type: string
                description: Tag of the SMS which generated the event
                example: CabWaiting
    getSmtpTemplateOverview:
      required:
        - createdAt
        - htmlContent
        - id
        - isActive
        - modifiedAt
        - name
        - replyTo
        - sender
        - subject
        - tag
        - testSent
        - toField
      type: object
      properties:
        id:
          type: integer
          description: ID of the template
          format: int64
          example: 4
        name:
          type: string
          description: Name of the template
          example: Order Confirmation - EN
        subject:
          type: string
          description: Subject of the template
          example: Thanks for your order !
        isActive:
          type: boolean
          description: Status of template (true=active, false=inactive)
          example: true
        testSent:
          type: boolean
          description: Status of test sending for the template (true=test email has
            been sent, false=test email has not been sent)
          example: true
        sender:
          type: object
          properties:
            name:
              type: string
              description: From email for the template
              example: Mary form MyShop
            email:
              type: string
              description: From email for the template
              format: email
              example: contact@myshop.fr
            id:
              type: string
              description: Sender id of the template
              example: "43"
        replyTo:
          type: string
          description: Email defined as the "Reply to" for the template
          format: email
          example: replyto@domain.com
        toField:
          type: string
          description: Customisation of the "to" field for the template
          example: '{FIRSTNAME} {LASTNAME}'
        tag:
          type: string
          description: Tag of the template
          example: sports
        htmlContent:
          type: string
          description: HTML content of the template
          example: Your order n°xxxxx has been confirmed. Thanks for your purchase.
        createdAt:
          type: string
          description: Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-01T12:30:00Z
        modifiedAt:
          type: string
          description: Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        doiTemplate:
          type: boolean
          description: It is true if template is a valid Double opt-in (DOI) template,
            otherwise it is false. This field will be available only in case of single
            template detail call.
          example: false
    getSmtpTemplates:
      type: object
      properties:
        count:
          type: integer
          description: Count of transactional email templates
          format: int64
          example: 1
        templates:
          type: array
          items:
            $ref: '#/components/schemas/getSmtpTemplateOverview'
    getWebhook:
      required:
        - createdAt
        - description
        - events
        - id
        - modifiedAt
        - type
        - url
      type: object
      properties:
        url:
          type: string
          description: URL of the webhook
          format: url
          example: http://requestb.in/173lyyx1
        id:
          type: integer
          description: ID of the webhook
          format: int64
          example: 654
        description:
          type: string
          description: Description of the webhook
          example: Webhook triggered on campaign openings
        events:
          type: array
          items:
            type: string
            description: Events which will trigger the webhook when they occure
            example: opens,clicks
        type:
          type: string
          description: Type of webhook (marketing or transactional)
          example: marketing
          enum:
            - marketing
            - transactional
        createdAt:
          type: string
          description: Creation UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2016-12-01T12:50:00Z
        modifiedAt:
          type: string
          description: Last modification UTC date-time of the webhook (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T13:15:00Z
        batched:
          type: boolean
          description: Batching configuration of the webhook, we send batched webhooks if its true
          example: true
        auth:
          type: object
          description: Authentication header to be send with the webhook requests
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            type: object
            description: Headers send with the requests to the webhook
            example:
              key: cf-secret
              value: test-header-value
    getWebhooks:
      required:
        - webhooks
      type: object
      properties:
        webhooks:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getWebhook'
    getContactDetails:
      required:
        - attributes
        - createdAt
        - emailBlacklisted
        - id
        - listIds
        - modifiedAt
        - smsBlacklisted
      type: object
      properties:
        email:
          type: string
          description: Email address of the contact for which you requested the details
          format: email
          example: john.smith@example.com
        id:
          type: integer
          description: ID of the contact for which you requested the details
          format: int64
          example: 32
        emailBlacklisted:
          type: boolean
          description: Blacklist status for email campaigns (true=blacklisted, false=not
            blacklisted)
          example: false
        smsBlacklisted:
          type: boolean
          description: Blacklist status for SMS campaigns (true=blacklisted, false=not
            blacklisted)
          example: true
        createdAt:
          type: string
          description: Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        modifiedAt:
          type: string
          description: Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        listIds:
          type: array
          items:
            type: integer
            description: List(s) in which the contact is included
            format: int64
        listUnsubscribed:
          type: array
          items:
            type: integer
            description: List(s) in which the contact is included (only available
              if unsubscription per list is activated for the account)
            format: int64
        attributes:
          type: object
          properties: { }
          description: Set of attributes of the contact
          example:
            name: Joe
            email: joe@example.com
    getExtendedContactDetails:
      allOf:
        - $ref: '#/components/schemas/getContactDetails'
        - required:
            - statistics
          type: object
          properties:
            statistics:
              type: object
              properties:
                messagesSent:
                  type: array
                  description: Listing of the sent campaign for the contact
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
                hardBounces:
                  type: array
                  description: Listing of the hardbounes generated by the contact
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
                softBounces:
                  type: array
                  description: Listing of the softbounes generated by the contact
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
                complaints:
                  type: array
                  description: Listing of the complaints generated by the contact
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
                unsubscriptions:
                  required:
                    - adminUnsubscription
                    - userUnsubscription
                  type: object
                  properties:
                    userUnsubscription:
                      type: array
                      description: Contact unsubscribe via unsubscription link in a
                        campaign
                      items:
                        required:
                          - campaignId
                          - eventTime
                        type: object
                        properties:
                          campaignId:
                            type: integer
                            description: ID of the campaign which generated the event
                            format: int64
                            example: 3
                          eventTime:
                            type: string
                            description: UTC date-time of the event
                            example: 2017-03-12T20:15:13Z
                          ip:
                            type: string
                            description: IP from which the user has unsubscribed
                            example: 165.87.3.15
                    adminUnsubscription:
                      type: array
                      description: Contact has been unsubscribed from the administrator
                      items:
                        required:
                          - eventTime
                        type: object
                        properties:
                          eventTime:
                            type: string
                            description: UTC date-time of the event
                            example: 2017-03-12T20:15:13Z
                          ip:
                            type: string
                            description: IP from which the user has been unsubscribed
                            example: 165.87.3.15
                  description: Listing of the unsubscription for the contact
                opened:
                  type: array
                  description: Listing of the openings generated by the contact
                  items:
                    required:
                      - campaignId
                      - count
                      - eventTime
                      - ip
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      count:
                        type: integer
                        description: Number of openings for the campaign
                        format: int64
                        example: 1
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
                      ip:
                        type: string
                        description: IP from which the user has opened the email
                        example: 165.87.3.15
                clicked:
                  type: array
                  description: Listing of the clicks generated by the contact
                  items:
                    required:
                      - campaignId
                      - links
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      links:
                        type: array
                        description: Listing of the clicked links for the campaign
                        items:
                          required:
                            - count
                            - eventTime
                            - ip
                            - url
                          type: object
                          properties:
                            count:
                              type: integer
                              description: Number of clicks on this link for the campaign
                              format: int64
                              example: 1
                            eventTime:
                              type: string
                              description: UTC date-time of the event
                              example: 2017-03-12T20:15:13Z
                            ip:
                              type: string
                              description: IP from which the user has clicked on the
                                link
                              example: 165.87.3.15
                            url:
                              type: string
                              description: URL of the clicked link
                              example: www.myshop.com
                transacAttributes:
                  type: array
                  description: Listing of the transactional attributes for the contact
                  items:
                    type: object
                    properties: { }
                delivered:
                  type: array
                  description: Listing of the delivered campaign for the contact
                  items:
                    required:
                      - campaignId
                      - eventTime
                    type: object
                    properties:
                      campaignId:
                        type: integer
                        description: ID of the campaign which generated the event
                        format: int64
                        example: 3
                      eventTime:
                        type: string
                        description: UTC date-time of the event
                        example: 2017-03-12T20:15:13Z
              description: Campaign statistics of the contact
    getContactCampaignStats:
      type: object
      properties:
        messagesSent:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
        hardBounces:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
        softBounces:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
        complaints:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
        unsubscriptions:
          required:
            - adminUnsubscription
            - userUnsubscription
          type: object
          properties:
            userUnsubscription:
              type: array
              description: Contact has unsubscribed via the unsubscription link in
                the email
              items:
                required:
                  - campaignId
                  - eventTime
                type: object
                properties:
                  campaignId:
                    type: integer
                    description: ID of the campaign which generated the event
                    format: int64
                    example: 3
                  eventTime:
                    type: string
                    description: UTC date-time of the event
                    example: 2017-03-12T20:15:13Z
                  ip:
                    type: string
                    description: IP from which the user has unsubscribed
                    example: 165.87.3.15
            adminUnsubscription:
              type: array
              description: Contact has been unsubscribed from the administrator
              items:
                required:
                  - eventTime
                type: object
                properties:
                  eventTime:
                    type: string
                    description: UTC date-time of the event
                    example: 2017-03-12T20:15:13Z
                  ip:
                    type: string
                    description: IP from which the user has been unsubscribed
                    example: 165.87.3.15
        opened:
          type: array
          items:
            required:
              - campaignId
              - count
              - eventTime
              - ip
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              count:
                type: integer
                description: Number of openings of the campaign
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
              ip:
                type: string
                description: IP from which the user has opened the campaign
                example: 165.87.3.15
        clicked:
          type: array
          items:
            required:
              - campaignId
              - links
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              links:
                type: array
                items:
                  required:
                    - count
                    - eventTime
                    - ip
                    - url
                  type: object
                  properties:
                    count:
                      type: integer
                      description: Number of clicks on this link for the campaign
                      format: int64
                      example: 1
                    eventTime:
                      type: string
                      description: UTC date-time of the event
                      example: 2017-03-12T20:15:13Z
                    ip:
                      type: string
                      description: IP from which the user has clicked on the link
                      example: 165.87.3.15
                    url:
                      type: string
                      description: URL of the clicked link
                      example: www.myshop.com
        transacAttributes:
          type: array
          items:
            required:
              - orderDate
              - orderId
              - orderPrice
            type: object
            properties:
              orderDate:
                type: string
                description: Date of the order
                format: date
                example: 2017-03-12
              orderPrice:
                type: number
                description: Price of the order
                format: float
                example: 24.99
              orderId:
                type: integer
                description: ID of the order
                format: int64
                example: 248
        delivered:
          type: array
          items:
            required:
              - campaignId
              - eventTime
            type: object
            properties:
              campaignId:
                type: integer
                description: ID of the campaign which generated the event
                format: int64
                example: 3
              eventTime:
                type: string
                description: UTC date-time of the event
                example: 2017-03-12T20:15:13Z
      description: Campaign Statistics for the contact
    getContacts:
      required:
        - contacts
        - count
      type: object
      properties:
        contacts:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getContactDetails'
        count:
          type: integer
          description: Number of contacts
          format: int64
          example: 17655
    getAttributes:
      required:
        - attributes
      type: object
      properties:
        attributes:
          type: array
          description: Listing of available contact attributes in your account
          items:
            required:
              - category
              - name
            type: object
            properties:
              name:
                type: string
                description: Name of the attribute
                example: LASTNAME
              category:
                type: string
                description: Category of the attribute
                example: category
                enum:
                  - normal
                  - transactional
                  - category
                  - calculated
                  - global
              type:
                type: string
                description: Type of the attribute
                example: text
                enum:
                  - text
                  - date
                  - float
                  - id
                  - boolean
              enumeration:
                type: array
                description: Parameter only available for "category" type attributes.
                items:
                  required:
                    - label
                    - value
                  type: object
                  properties:
                    value:
                      type: integer
                      description: ID of Value of the "category" type attribute
                      format: int64
                      example: 1
                    label:
                      type: string
                      description: Label of the "category" type attribute
                      example: Women
              calculatedValue:
                type: string
                description: Calculated value formula
                example: COUNT[ORDER_ID,ORDER_DATE,==,NOW(-1)]
    getFolders:
      type: object
      properties:
        folders:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getFolder'
        count:
          type: integer
          description: Number of folders available in your account
          format: int64
          example: 10
    getFolder:
      required:
        - id
        - name
        - totalBlacklisted
        - totalSubscribers
        - uniqueSubscribers
      type: object
      properties:
        id:
          type: integer
          description: ID of the folder
          format: int64
          example: 2
        name:
          type: string
          description: Name of the folder
          example: Magento Customers
        totalBlacklisted:
          type: integer
          description: Number of blacklisted contacts in the folder
          format: int64
          example: 32
        totalSubscribers:
          type: integer
          description: Number of contacts in the folder
          format: int64
          example: 19777
        uniqueSubscribers:
          type: integer
          description: Number of unique contacts in the folder
          format: int64
          example: 16222
    getFolderLists:
      type: object
      properties:
        lists:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getList'
        count:
          type: integer
          description: Number of lists in the folder
          format: int64
          example: 6
    getLists:
      type: object
      properties:
        lists:
          type: array
          description: Listing of all the lists available in your account
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getList'
              - required:
                  - folderId
                type: object
                properties:
                  folderId:
                    type: integer
                    description: ID of the folder
                    format: int64
                    example: 2
        count:
          type: integer
          description: Number of lists in your account
          format: int64
          example: 150
    getSegments:
      type: object
      properties:
        segments:
          type: array
          description: Listing of all the segments available in your account
          items:
            type: object
            required:
              - id
              - name
              - segmentName
              - categoryName
          properties:
            id:
              type: integer
              description: ID of the list
              format: int64
              example: 23
            segmentName:
              type: string
              description: Name of the Segment
              example: My Segment
            categoryName:
              type: string
              description: Name of the Segment Category
              format: string
              example: New Category
            updatedAt:
              type: string
              description: Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: '2017-03-13T17:05:09Z'
        count:
          type: integer
          description: Number of Segments in your account
          format: int64
          example: 10
    getList:
      required:
        - id
        - name
        - totalBlacklisted
        - totalSubscribers
        - uniqueSubscribers
      type: object
      properties:
        id:
          type: integer
          description: ID of the list
          format: int64
          example: 23
        name:
          type: string
          description: Name of the list
          example: Magento Customers - EN
        totalBlacklisted:
          type: integer
          description: Number of blacklisted contacts in the list
          format: int64
          example: 13
        totalSubscribers:
          type: integer
          description: Number of contacts in the list
          format: int64
          example: 1776
        uniqueSubscribers:
          type: integer
          description: Number of unique contacts in the list
          format: int64
          example: 1789
    getExtendedList:
      allOf:
        - $ref: '#/components/schemas/getList'
        - required:
            - createdAt
            - folderId
          type: object
          properties:
            folderId:
              type: integer
              description: ID of the folder
              format: int64
              example: 2
            createdAt:
              type: string
              description: Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
              example: 2017-03-13T17:05:09Z
            campaignStats:
              type: array
              items:
                required:
                  - campaignId
                  - stats
                type: object
                properties:
                  campaignId:
                    type: integer
                    description: ID of the campaign
                    format: int64
                    example: 143
                  stats:
                    $ref: '#/components/schemas/getCampaignStats'
            dynamicList:
              type: boolean
              description: Status telling if the list is dynamic or not (true=dynamic,
                false=not dynamic)
              example: false
    getSmsCampaignStats:
      required:
        - answered
        - delivered
        - hardBounces
        - processing
        - sent
        - softBounces
        - unsubscriptions
      type: object
      properties:
        delivered:
          type: integer
          description: Number of delivered SMS
          format: int64
          example: 2987
        sent:
          type: integer
          description: Number of sent SMS
          format: int64
          example: 3000
        processing:
          type: integer
          description: Number of processing SMS
          format: int64
          example: 0
        softBounces:
          type: integer
          description: Number of softbounced SMS
          format: int64
          example: 3
        hardBounces:
          type: integer
          description: Number of hardbounced SMS
          format: int64
          example: 1
        unsubscriptions:
          type: integer
          description: Number of unsubscription SMS
          format: int64
          example: 3
        answered:
          type: integer
          description: Number of replies to the SMS
          format: int64
          example: 2
    getDeviceBrowserStats:
      required:
        - clickers
        - uniqueClicks
        - uniqueViews
        - viewed
      type: object
      properties:
        clickers:
          type: integer
          description: Number of total clicks for the campaign using the particular
            browser
          format: int64
          example: 2665
        uniqueClicks:
          type: integer
          description: Number of unique clicks for the campaign using the particular
            browser
          format: int64
          example: 2300
        viewed:
          type: integer
          description: Number of openings for the campaign using the particular browser
          format: int64
          example: 8999
        uniqueViews:
          type: integer
          description: Number of unique openings for the campaign using the particular
            browser
          format: int64
          example: 7779
    getCampaignStats:
      required:
        - clickers
        - complaints
        - delivered
        - hardBounces
        - sent
        - softBounces
        - uniqueClicks
        - uniqueViews
        - unsubscriptions
        - viewed
        - trackableViews
      type: object
      properties:
        listId:
          type: integer
          description: List Id of email campaign (only in case of get email campaign(s)(not
            for global stats))
          format: int64
          example: 2
        uniqueClicks:
          type: integer
          description: Number of unique clicks for the campaign
          format: int64
          example: 2300
        clickers:
          type: integer
          description: Number of total clicks for the campaign
          format: int64
          example: 2665
        complaints:
          type: integer
          description: Number of complaints (Spam reports) for the campaign
          format: int64
          example: 1
        delivered:
          type: integer
          description: Number of delivered emails for the campaign
          format: int64
          example: 19765
        sent:
          type: integer
          description: Number of sent emails for the campaign
          format: int64
          example: 19887
        softBounces:
          type: integer
          description: Number of softbounce for the campaign
          format: int64
          example: 100
        hardBounces:
          type: integer
          description: Number of harbounce for the campaign
          format: int64
          example: 87
        uniqueViews:
          type: integer
          description: Number of unique openings for the campaign
          format: int64
          example: 7779
        trackableViews:
          type: integer
          description: Recipients without any privacy protection option enabled in their email client
          format: int64
          example: 5661
        trackableViewsRate:
          type: number
          description: Rate of recipients without any privacy protection option enabled in their email client
          format: float
          example: 23.45
        estimatedViews:
          type: integer
          description: Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails
          format: int64
          example: 560
        unsubscriptions:
          type: integer
          description: Number of unsubscription for the campaign
          format: int64
          example: 2
        viewed:
          type: integer
          description: Number of openings for the campaign
          format: int64
          example: 8999
        deferred:
          type: integer
          description: Number of deferred emails for the campaign
          format: int64
          example: 30
        returnBounce:
          type: integer
          description: Total number of non-delivered campaigns for a particular campaign
            id.
          format: int64
          example: 5
    updateSmtpTemplate:
      type: object
      properties:
        tag:
          type: string
          description: Tag of the template
          example: OrderConfirmation
        sender:
          type: object
          properties:
            name:
              type: string
              description: Name of the sender
              example: Mary from MyShop
            email:
              type: string
              description: Email of the sender
              format: email
              example: contact@myshop.com
            id:
              type: integer
              description: |
                Select the sender for the template on the basis of sender id.
                _In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email)_.
              format: int64
              example: 3
          description: |
            Sender details including id or email and name (_optional_). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example:
            **{"name":"xyz", "email":"example@abc.com"}**
            **{"name":"xyz", "id":123}**
        templateName:
          type: string
          description: Name of the template
          example: Order Confirmation - EN
        htmlContent:
          type: string
          description: |
            **Required if htmlUrl is empty**. If the template is designed using Drag & Drop editor via HTML content, then the design page will not have Drag & Drop editor access for that template. Body of the message (HTML must have more than 10 characters)
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
        htmlUrl:
          type: string
          description: |
            **Required if htmlContent is empty**. URL to the body of the email (HTML)
          format: url
          example: https://html.domain.com
        subject:
          type: string
          description: Subject of the email
          example: Thanks for your purchase !
        replyTo:
          type: string
          description: Email on which campaign recipients will be able to reply to
          format: email
          example: support@myshop.com
        toField:
          type: string
          description: |
            To personalize the **To** Field. If you want to include the first name and last name of your recipient, add **{FNAME} {LNAME}**. These contact attributes must already exist in your Brevo account. If input parameter **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
          example: '{FNAME} {LNAME}'
        attachmentUrl:
          type: string
          description: |
            Absolute url of the attachment (**no local file**). Extensions allowed:
            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
          format: url
          example: https://attachment.domain.com
        isActive:
          type: boolean
          description: Status of the template. isActive = false means template is
            inactive, isActive = true means template is active
          example: true
    updateCampaignStatus:
      type: object
      properties:
        status:
          type: string
          description: |
            Note:- **replicateTemplate** status will be available **only for template type campaigns.**
          enum:
            - suspended
            - archive
            - darchive
            - sent
            - queued
            - replicate
            - replicateTemplate
            - draft
      description: Status of the campaign
      example: draft
    createSmtpTemplate:
      required:
        - sender
        - subject
        - templateName
      type: object
      properties:
        tag:
          type: string
          description: Tag of the template
          example: OrderConfirmation
        sender:
          type: object
          properties:
            name:
              type: string
              description: |
                Name of the sender. **If not passed, will be set to default**
              example: Mary from MyShop
            email:
              type: string
              description: Email of the sender
              format: email
              example: contact@myshop.com
            id:
              type: integer
              description: |
                Select the sender for the template on the basis of sender id.
                _In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email)_.
              format: int64
              example: 3
          description: |
            Sender details including id or email and name (_optional_). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example:
            **{"name":"xyz", "email":"example@abc.com"}**
            **{"name":"xyz", "id":123}**
        templateName:
          type: string
          description: Name of the template
          example: Order Confirmation - EN
        htmlContent:
          type: string
          description: |
            Body of the message (HTML version). The field must have more than 10 characters. **REQUIRED if htmlUrl is empty**
          example: The order n°xxxxx has been confirmed. Thanks for your purchase
        htmlUrl:
          type: string
          description: Url which contents the body of the email message. REQUIRED
            if htmlContent is empty
          format: url
          example: https://html.domain.com
        subject:
          type: string
          description: Subject of the template
          example: Thanks for your purchase !
        replyTo:
          type: string
          description: Email on which campaign recipients will be able to reply to
          format: email
          example: support@myshop.com
        toField:
          type: string
          description: |
            To personalize the **To** Field. If you want to include the first name and last name of your recipient, add **{FNAME} {LNAME}**. These contact attributes must already exist in your Brevo account. If input parameter **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
          example: '{FNAME} {LNAME}'
        attachmentUrl:
          type: string
          description: |
            Absolute url of the attachment (**no local file**). Extension allowed:
            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps'
          format: url
          example: https://attachment.domain.com
        isActive:
          type: boolean
          description: Status of template. isActive = true means template is active
            and isActive = false means template is inactive
          example: true
    createEmailCampaign:
      required:
        - name
        - sender
      type: object
      properties:
        tag:
          type: string
          description: Tag of the campaign
          example: Newsletter
        sender:
          type: object
          properties:
            name:
              type: string
              description: Sender Name
              example: Mary from MyShop
            email:
              type: string
              description: Sender email
              format: email
              example: newsletter@myshop.com
            id:
              type: integer
              description: |
                Select the sender for the campaign on the basis of sender id.
                _In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email)_.
              format: int64
              example: 3
          description: |
            Sender details including id or email and name (_optional_). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example:
            **{"name":"xyz", "email":"example@abc.com"}**
            **{"name":"xyz", "id":123}**
        name:
          type: string
          description: Name of the campaign
          example: Newsletter - May 2017
        htmlContent:
          type: string
          description: |
            Mandatory if htmlUrl and templateId are empty. Body of the message (HTML).
          example: '<!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please confirm your email address by clicking on the link below</p> </body> </html>'
        htmlUrl:
          type: string
          description: |
            **Mandatory if htmlContent and templateId are empty**. Url to the message (HTML). For example:
            **https://html.domain.com**
          format: url
          example: https://html.domain.com
        templateId:
          type: integer
          description: |
            **Mandatory if htmlContent and htmlUrl are empty**. Id of the transactional
            email template with status _active_. Used to copy only its content fetched
            from htmlContent/htmlUrl to an email campaign for RSS feature.
          format: int64
        scheduledAt:
          type: string
          description: |
            Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result**.
            If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part). For example:
            **2017-06-01T12:30:00+02:00**
          example: 2017-06-01T12:30:00+02:00
        subject:
          type: string
          description: |
            Subject of the campaign. **Mandatory if abTesting is false**.
            Ignored if abTesting is true.
          example: Discover the New Collection !
        previewText:
          type: string
          description: Preview text or preheader of the email campaign
          example: Thanks for your order!
        replyTo:
          type: string
          description: Email on which the campaign recipients will be able to reply
            to
          format: email
          example: support@myshop.com
        toField:
          type: string
          description: |
            To personalize the **To** Field. If you want to include the first name and last name of your recipient, add **{FNAME} {LNAME}**. These contact attributes must already exist in your Brevo account. If input parameter **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
          example: '{FNAME} {LNAME}'
        recipients:
          type: object
          properties:
            exclusionListIds:
              type: array
              description: List ids to exclude from the campaign
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              type: array
              description: |
                **Mandatory if scheduledAt is not empty**. List Ids to send the campaign to
              items:
                type: integer
                format: int64
                example: 32
            segmentIds:
              description: |
                **Mandatory if listIds are not used**. Segment ids to send the campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
          description: Segment ids and List ids to include/exclude from campaign
        attachmentUrl:
          type: string
          description: |
            Absolute url of the attachment (no local file).
            Extension allowed:
            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps
          format: url
          example: https://attachment.domain.com
        inlineImageActivation:
          type: boolean
          description: |
            Use true to embedded the images in your email. Final size of
            the email should be less than **4MB**. Campaigns with embedded images can
            _not be sent to more than 5000 contacts_
          example: true
          default: false
        mirrorActive:
          type: boolean
          description: Use true to enable the mirror link
          example: true
        footer:
          type: string
          description: Footer of the email campaign
          example: '[DEFAULT_FOOTER]'
        header:
          type: string
          description: Header of the email campaign
          example: '[DEFAULT_HEADER]'
        utmCampaign:
          type: string
          description: Customize the utm_campaign value. If this field is empty, the
            campaign name will be used. Only alphanumeric characters and spaces are
            allowed
          example: NL_05_2017
        params:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes to customize the type classic campaign. For example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if **type** is **classic**. It's considered only if campaign is in _New Template Language format_. The New Template Language is dependent on the values of **subject, htmlContent/htmlUrl, sender.name & toField**
          example:
            FNAME: Joe
            LNAME: Doe
        sendAtBestTime:
          type: boolean
          description: Set this to true if you want to send your campaign at best time.
          example: true
          default: false
        abTesting:
          type: boolean
          description: |
            Status of A/B Test. abTesting = false means it is disabled & abTesting = true means it is enabled. **subjectA, subjectB, splitRule, winnerCriteria & winnerDelay** will be considered when abTesting is set to true.
            subjectA & subjectB are mandatory together & subject if passed is ignored. **Can be set to true only if sendAtBestTime is false**.
            You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
          example: true
          default: false
        subjectA:
          type: string
          description: |
            Subject A of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          example: Discover the New Collection!
        subjectB:
          type: string
          description: |
            Subject B of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          example: Want to discover the New Collection?
        splitRule:
          maximum: 5E+1
          minimum: 1
          type: integer
          description: |
            Add the size of your test groups. **Mandatory if abTesting = true & 'recipients' is passed**. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
          format: int64
          example: 50
        winnerCriteria:
          type: string
          description: |
            Choose the metrics that will determinate the winning version. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerCriteria` is ignored if passed
          example: open
          enum:
            - open
            - click
        winnerDelay:
          maximum: 168
          minimum: 1
          type: integer
          description: |
            Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerDelay` is ignored if passed
          format: int64
          example: 50
        ipWarmupEnable:
          type: boolean
          description: |
            **Available for dedicated ip clients**. Set this to true if you wish to warm up your ip.
          example: true
          default: false
        initialQuota:
          type: integer
          description: |
            **Mandatory if ipWarmupEnable is set to true**. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
          format: int64
          example: 3000
        increaseRate:
          maximum: 1E+2
          minimum: 0
          type: integer
          description: |
            **Mandatory if ipWarmupEnable is set to true**. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
          format: int64
          example: 70
        unsubscriptionPageId:
          description: |
            Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page. If not entered, then the default unsubscription page will be used.
          type: string
          example: "62cbb7fabbe85021021aac52"
        updateFormId:
          description: |
            **Mandatory if templateId is used containing the {{ update_profile }} tag**. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form. If not entered, then the default update profile form will be used.
          type: string
          example: "6313436b9ad40e23b371d095"
    updateEmailCampaign:
      type: object
      properties:
        tag:
          type: string
          description: Tag of the campaign
          example: Newsletter
        sender:
          type: object
          properties:
            name:
              type: string
              description: Sender Name from which the campaign emails are sent
              example: Mary from MyShop
            email:
              type: string
              description: Sender email from which the campaign emails are sent
              format: email
              example: newsletter@myshop.com
            id:
              type: integer
              description: |
                Select the sender for the campaign on the basis of sender id. **In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email)**.
              format: int64
              example: 3
          description: |
            Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example:
            **{"name":"xyz", "email":"example@abc.com"}**
            **{"name":"xyz", "id":123}**
        name:
          type: string
          description: Name of the campaign
          example: Newsletter - May 2017
        htmlContent:
          type: string
          description: |
            Body of the message (HTML version). If the campaign is designed using Drag & Drop editor via HTML content, then the design page will not have Drag & Drop editor access for that campaign. **REQUIRED if htmlUrl is empty**
          example: '<!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please confirm your email address by clicking on the link below</p> </body> </html>'
        htmlUrl:
          type: string
          description: |
            Url which contents the body of the email message. **REQUIRED if htmlContent is empty**
          format: url
          example: https://html.domain.com
        scheduledAt:
          type: string
          description: |
            UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ).
            **Prefer to pass your timezone in date-time format for accurate result.**
            If sendAtBestTime is set to true, your campaign will be sent according
            to the date passed (ignoring the time part).
          example: 2017-06-01T12:30:00+02:00
        subject:
          type: string
          description: Subject of the campaign
          example: Discover the New Collection !
        previewText:
          type: string
          description: Preview text or preheader of the email campaign
          example: Thanks for your order!
        replyTo:
          type: string
          description: Email on which campaign recipients will be able to reply to
          format: email
          example: support@myshop.com
        toField:
          type: string
          description: |
            To personalize the **To** Field. If you want to include the first
            name and last name of your recipient, add **{FNAME} {LNAME}**. These contact
            attributes must already exist in your Brevo account. If input parameter
            **params** used please use **{{contact.FNAME}} {{contact.LNAME}}** for personalization
          example: '{FNAME} {LNAME}'
        recipients:
          type: object
          properties:
            exclusionListIds:
              type: array
              description: List ids which have to be excluded from a campaign
              items:
                type: integer
                format: int64
                example: 8
            listIds:
              type: array
              description: |
                Lists Ids to send the campaign to. **Campaign should only be updated with listIds if listIds were used to create it. REQUIRED if already not present in campaign and scheduledAt is not empty**
              items:
                type: integer
                format: int64
                example: 32
            segmentIds:
              description: |
                **Mandatory if listIds are not used. Campaign should only be updated with segmentIds if segmentIds were used to create it.** Segment ids to send the campaign to.
              type: array
              items:
                type: integer
                format: int64
                example: 23
          description: Segment ids and List ids to include/exclude from campaign
        attachmentUrl:
          type: string
          description: |
            Absolute url of the attachment (no local file).
            Extension allowed:
            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps'
          format: url
          example: https://attachment.domain.com
        inlineImageActivation:
          type: boolean
          description: |
            Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
            You cannot send a campaign of more than **4MB** with images embedded in the email. Campaigns with the images embedded in the email _must be sent to less than 5000 contacts_.
          example: true
          default: false
        mirrorActive:
          type: boolean
          description: Status of mirror links in campaign. mirrorActive = false means
            mirror links are deactivated, & mirrorActive = true means mirror links
            are activated, in the campaign
          example: true
        recurring:
          type: boolean
          description: |
            **FOR TRIGGER ONLY !** Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
          example: false
          default: false
        footer:
          type: string
          description: Footer of the email campaign
          example: '[DEFAULT_FOOTER]'
        header:
          type: string
          description: Header of the email campaign
          example: '[DEFAULT_HEADER]'
        utmCampaign:
          type: string
          description: Customize the utm_campaign value. If this field is empty, the
            campaign name will be used. Only alphanumeric characters and spaces are
            allowed
          example: NL_05_2017
        params:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes to customize the type classic campaign. For example: **{"FNAME":"Joe", "LNAME":"Doe"}**. Only available if **type** is **classic**. It's considered only if campaign is in _New Template Language format_. The New Template Language is dependent on the values of **subject, htmlContent/htmlUrl, sender.name & toField**
          example:
            FNAME: Joe
            LNAME: Doe
        sendAtBestTime:
          type: boolean
          description: |
            Set this to true if you want to send your campaign at best time.
            Note:- **if true, warmup ip will be disabled.**
          example: true
        abTesting:
          type: boolean
          description: |
            Status of A/B Test. abTesting = false means it is disabled & abTesting = true means it is enabled. **subjectA, subjectB, splitRule, winnerCriteria & winnerDelay** will be considered when abTesting is set to true.
            subjectA & subjectB are mandatory together & subject if passed is ignored. **Can be set to true only if sendAtBestTime is false**.
            You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B
          example: true
          default: false
        subjectA:
          type: string
          description: |
            Subject A of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          example: Discover the New Collection!
        subjectB:
          type: string
          description: |
            Subject B of the campaign. **Mandatory if abTesting = true**.
            subjectA & subjectB should have unique value
          example: Want to discover the New Collection?
        splitRule:
          maximum: 5E+1
          minimum: 1
          type: integer
          description: |
            Add the size of your test groups. **Mandatory if abTesting = true & 'recipients' is passed**. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else
          format: int64
          example: 50
        winnerCriteria:
          type: string
          description: |
            Choose the metrics that will determinate the winning version. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerCriteria` is ignored if passed
          example: open
          enum:
            - open
            - click
        winnerDelay:
          maximum: 168
          minimum: 1
          type: integer
          description: |
            Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. **Mandatory if _splitRule_ >= 1 and < 50**. If splitRule = 50, `winnerDelay` is ignored if passed
          format: int64
          example: 50
        ipWarmupEnable:
          type: boolean
          description: |
            **Available for dedicated ip clients**. Set this to true if you wish to warm up your ip.
          example: true
          default: false
        initialQuota:
          type: integer
          description: |
            Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000.
          format: int64
          example: 3000
        increaseRate:
          maximum: 1E+2
          minimum: 0
          type: integer
          description: |
            Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%.
          format: int64
          example: 70
        unsubscriptionPageId:
          description: |
            Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page.
          type: string
          example: "62cbb7fabbe85021021aac52"
        updateFormId:
          description: |
            **Mandatory if templateId is used containing the {{ update_profile }} tag**. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form.
          type: string
          example: "6313436b9ad40e23b371d095"
    getSharedTemplateUrl:
      required:
        - sharedUrl
      type: object
      properties:
        sharedUrl:
          type: string
          description: A unique URL for the email campaign or transactional template.
            This URL can be shared with other Brevo users.
          format: url
          example: https://my.brevo.com/pt2YU7R5W_guXlowgumy_VX4pFsKu._zd0Gjj96x1_GMmzc1Qps5ZIpj6nx-
    abTestCampaignResult:
      type: object
      properties:
        winningVersion:
          type: string
          description: Winning Campaign Info. pending = Campaign has been picked for
            sending and winning version is yet to be decided, tie = A tie happened
            between both the versions, notAvailable = Campaign has not yet been picked
            for sending.
          example: A
          enum:
            - notAvailable
            - pending
            - tie
            - A
            - B
        winningCriteria:
          type: string
          description: Criteria choosen for winning version (Open/Click)
          example: Open
          enum:
            - Open
            - Click
        winningSubjectLine:
          type: string
          description: Subject Line of current winning version
          example: Subject Line A
        openRate:
          type: string
          description: Open rate for current winning version
          example: 70%
        clickRate:
          type: string
          description: Click rate for current winning version
          example: 70%
        winningVersionRate:
          type: string
          description: Open/Click rate for the winner version
          example: 70%
        statistics:
          required:
            - clicks
            - complaints
            - hardBounces
            - openers
            - softBounces
            - unsubscribed
          type: object
          properties:
            openers:
              $ref: '#/components/schemas/abTestVersionStats'
            clicks:
              $ref: '#/components/schemas/abTestVersionStats'
            unsubscribed:
              $ref: '#/components/schemas/abTestVersionStats'
            hardBounces:
              $ref: '#/components/schemas/abTestVersionStats'
            softBounces:
              $ref: '#/components/schemas/abTestVersionStats'
            complaints:
              $ref: '#/components/schemas/abTestVersionStats'
        clickedLinks:
          required:
            - Version A
            - Version B
          type: object
          properties:
            Version A:
              $ref: '#/components/schemas/abTestVersionClicks'
            Version B:
              $ref: '#/components/schemas/abTestVersionClicks'
    emailExportRecipients:
      required:
        - recipientsType
      type: object
      properties:
        notifyURL:
          type: string
          description: Webhook called once the export process is finished. For reference,
            https://help.brevo.com/hc/en-us/articles/360007666479
          format: url
          example: http://requestb.in/173lyyx1
        recipientsType:
          type: string
          description: Type of recipients to export for a campaign
          example: openers
          enum:
            - all
            - nonClickers
            - nonOpeners
            - clickers
            - openers
            - softBounces
            - hardBounces
            - unsubscribed
    requestSmsRecipientExport:
      required:
        - recipientsType
      type: object
      properties:
        notifyURL:
          type: string
          description: URL that will be called once the export process is finished.
            For reference, https://help.brevo.com/hc/en-us/articles/360007666479
          format: url
          example: http://requestb.in/173lyyx1
        recipientsType:
          type: string
          description: Filter the recipients based on how they interacted with the
            campaign
          example: answered
          enum:
            - all
            - delivered
            - answered
            - softBounces
            - hardBounces
            - unsubscribed
    sendReport:
      required:
        - email
      type: object
      properties:
        language:
          type: string
          description: Language of email content for campaign report sending.
          example: en
          default: fr
          enum:
            - fr
            - es
            - pt
            - it
            - de
            - en
        email:
          required:
            - body
            - to
          type: object
          properties:
            to:
              type: array
              description: Email addresses of the recipients
              items:
                type: string
                description: Email address of the recipient
                format: email
                example: jim.suehan@example.com
            body:
              type: string
              description: Custom text message to be presented in the report email.
              example: Please find attached the report of our last email campaign.
          description: Custom attributes for the report email.
    uploadImageToGallery:
      required:
        - imageUrl
      type: object
      properties:
        imageUrl:
          type: string
          description: |
            The absolute url of the image (**no local file**). Maximum allowed size for image is **2MB**.
            Allowed extensions for images are:
            #### jpeg, jpg, png, bmp, gif.
          example: https://somedomain.com/image1.jpg
        name:
          type: string
          description: Name of the image.
          example: nature.jpg
    sendSmtpEmail:
      type: object
      properties:
        sender:
          description: |
            **Mandatory if `templateId` is not passed**. Pass name (_optional_) and email or id of sender from which emails will be sent. **`name` will be ignored if passed along with sender `id`**. For example,
            **{"name":"Mary from MyShop", "email":"no-reply@myshop.com"}**
            **{"id":2}**
          type: object
          properties:
            name:
              type: string
              description: |
                description: Name of the sender from which the emails will be sent. **Maximum allowed characters are 70**. Applicable only when email is passed.
              example: Mary from MyShop
            email:
              type: string
              description: Email of the sender from which the emails will be sent. Mandatory if sender id is not passed.
              format: email
              example: no-reply@myshop.com
            id:
              type: integer
              description: Id of the sender from which the emails will be sent. In order to select a sender with specific pool of IP’s, dedicated ip users shall pass id (instead of email). Mandatory if email is not passed.
              format: int64
              example: 2
        to:
          type: array
          description: |
            **Mandatory if messageVersions are not passed, ignored if messageVersions are passed**
            List of email addresses and names (_optional_) of the recipients. For example,
            **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]**
          items:
            required:
              - email
            type: object
            properties:
              email:
                type: string
                description: Email address of the recipient
                format: email
                example: jimmy98@example.com
              name:
                type: string
                description: |
                  Name of the recipient. **Maximum allowed characters are 70**.
                example: Jimmy
        bcc:
          type: array
          description: |
            List of email addresses and names (_optional_) of the recipients in bcc
          items:
            required:
              - email
            type: object
            properties:
              email:
                type: string
                description: Email address of the recipient in bcc
                format: email
                example: helen9766@example.com
              name:
                type: string
                description: |
                  Name of the recipient in bcc. **Maximum allowed characters are 70**.
                example: Helen
        cc:
          type: array
          description: |
            List of email addresses and names (_optional_) of the recipients in cc
          items:
            required:
              - email
            type: object
            properties:
              email:
                type: string
                description: Email address of the recipient in cc
                format: email
                example: ann6533@example.com
              name:
                type: string
                description: |
                  Name of the recipient in cc. **Maximum allowed characters are 70**.
                example: Ann
        htmlContent:
          type: string
          description: |
            HTML body of the message. **Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed**
          example: <!DOCTYPE html> <html> <body> <h1>Confirm you email</h1> <p>Please
            confirm your email address by clicking on the link below</p> </body> </html>
        textContent:
          type: string
          description: |
            Plain Text body of the message. **Ignored if 'templateId' is passed**
          example: Please confirm your email address by clicking on the link https://text.domain.com
        subject:
          type: string
          description: |
            Subject of the message. **Mandatory if 'templateId' is not passed**
          example: Login Email confirmation
        replyTo:
          required:
            - email
          type: object
          properties:
            email:
              type: string
              description: Email address in reply to
              format: email
              example: ann6533@example.com
            name:
              type: string
              description: |
                Name in reply to. **Maximum allowed characters are 70**.
              example: Ann
          description: |
            Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
            **{"email":"ann6533@example.com", "name":"Ann"}**
        attachment:
          type: array
          description: |
            Pass the _absolute URL_ (**no local file**) or the _base64 content_ of the attachment along with the attachment name. **Mandatory if attachment content is passed**. For example,
            **[{"url":"https://attachment.domain.com/myAttachmentFromUrl.jpg", "name":"myAttachmentFromUrl.jpg"}, {"content":"base64 example content", "name":"myAttachmentFromBase64.jpg"}]**.
            Allowed extensions for attachment file:
            #### xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub, eps, odt, mp3, m4a, m4v, wma, ogg, flac, wav, aif, aifc, aiff, mp4, mov, avi, mkv, mpeg, mpg, wmv, pkpass and xlsm.
            If `templateId` is passed and is in New Template Language format then both attachment url and content are accepted. If template is in Old template Language format, then `attachment` is ignored
          items:
            type: object
            properties:
              url:
                type: string
                description: |
                  Absolute url of the attachment (**no local file**).
                format: url
                example: https://attachment.domain.com/myAttachmentFromUrl.jpg
              content:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: Base64 encoded chunk data of the attachment generated
                  on the fly
                format: byte
                example: b3JkZXIucGRm
              name:
                type: string
                description: |
                  **Required if content is passed**. Name of the attachment
                example: myAttachment.png
        headers:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of custom headers (_not the standard headers_) that shall be sent along the mail headers in the original email. **'sender.ip'** header can be set (**only for dedicated ip users**) to mention the IP to be used for sending transactional emails. Headers are allowed in `This-Case-Only` (i.e. words separated by hyphen with first letter of each word in capital letter), they will be converted to such case styling if not in this format in the request payload. For example,
            **{"sender.ip":"1.2.3.4", "X-Mailin-custom":"some_custom_header", "idempotencyKey":"abc-123"}**.
          example:
            sender.ip: 1.2.3.4
            X-Mailin-custom: some_custom_header
            idempotencyKey: abc-123
        templateId:
          type: integer
          description: Id of the template.
          format: int64
          example: 2
        params:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes to customize the template. For example, **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if template is in New Template Language format**.
          example:
            FNAME: Joe
            LNAME: Doe
        messageVersions:
          type: array
          description: |
            You can customize and send out multiple versions of a mail. **templateId** can be customized only if global parameter contains templateId. **htmlContent and textContent** can be customized only if any of the two, htmlContent or textContent, is present in global parameters. Some global parameters such as **to(mandatory), bcc, cc, replyTo, subject** can also be customized specific to each version.
            Total number of recipients in one API request must not exceed 2000. However, you can still pass upto 99 recipients maximum in one message version.
            The size of individual params in all the messageVersions shall not exceed **100 KB** limit and that of cumulative params shall not exceed **1000 KB**.
            You can follow this **step-by-step guide** on how to use **messageVersions** to batch send emails - **https://developers.brevo.com/docs/batch-send-transactional-emails**
          items:
            type: object
            required:
              - to
            properties:
              to:
                type: array
                description: |
                  List of email addresses and names (_optional_) of the recipients. For example,
                  **[{"name":"Jimmy", "email":"jimmy98@example.com"}, {"name":"Joe", "email":"joe@example.com"}]**
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      type: string
                      description: Email address of the recipient
                      format: email
                      example: jimmy98@example.com
                    name:
                      type: string
                      description: |
                        Name of the recipient. **Maximum allowed characters are 70**.
                      example: Jimmy
              params:
                type: object
                additionalProperties: { }
                description: |
                  Pass the set of attributes to customize the template. For example, **{"FNAME":"Joe", "LNAME":"Doe"}**. It's **considered only if template is in New Template Language format**.
                example:
                  FNAME: Joe
                  LNAME: Doe
              bcc:
                type: array
                description: |
                  List of email addresses and names (_optional_) of the recipients in bcc
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      type: string
                      description: Email address of the recipient in bcc
                      format: email
                      example: helen9766@example.com
                    name:
                      type: string
                      description: |
                        Name of the recipient in bcc. **Maximum allowed characters are 70**.
                      example: Helen
              cc:
                type: array
                description: |
                  List of email addresses and names (_optional_) of the recipients in cc
                items:
                  required:
                    - email
                  type: object
                  properties:
                    email:
                      type: string
                      description: Email address of the recipient in cc
                      format: email
                      example: ann6533@example.com
                    name:
                      type: string
                      description: |
                        Name of the recipient in cc. **Maximum allowed characters are 70**.
                      example: Ann
              replyTo:
                required:
                  - email
                type: object
                properties:
                  email:
                    type: string
                    description: Email address in reply to
                    format: email
                    example: ann6533@example.com
                  name:
                    type: string
                    description: |
                      Name in reply to. **Maximum allowed characters are 70**.
                    example: Ann
                description: |
                  Email (**required**), along with name (_optional_), on which transactional mail recipients will be able to reply back. For example,
                  **{"email":"ann6533@example.com", "name":"Ann"}**
              subject:
                type: string
                description: |
                  Custom subject specific to message version
                example: Login Email confirmation
        tags:
          type: array
          description: Tag your emails to find them more easily
          items:
            type: string
            example: tag1
        scheduledAt:
          type: string
          description: UTC date-time on which the email has to schedule (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for scheduling. There can be an expected delay of +5 minutes in scheduled email delivery. **Please note this feature is currently a public beta**.
          format: date-time
          example: '2022-04-05T12:30:00+02:00'
        batchId:
          type: string
          description: Valid UUIDv4 batch id to identify the scheduled batches transactional email. If not passed we will create a valid UUIDv4 batch id at our end.
          example: '5c6cfa04-eed9-42c2-8b5c-6d470d978e9d'
    deleteHardbounces:
      type: object
      properties:
        startDate:
          type: string
          description: Starting date (YYYY-MM-DD) of the time period for deletion.
            The hardbounces occurred after this date will be deleted. Must be less
            than or equal to the endDate
          example: 2016-12-31
        endDate:
          type: string
          description: Ending date (YYYY-MM-DD) of the time period for deletion. The
            hardbounces until this date will be deleted. Must be greater than or equal
            to the startDate
          example: 2017-01-31
        contactEmail:
          type: string
          description: Target a specific email address
          format: email
          example: alex76@example.com
    blockDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          description: name of the domain to be blocked
          example: "example.com"
    createWebhook:
      required:
        - events
        - url
      type: object
      properties:
        url:
          type: string
          description: URL of the webhook
          format: url
          example: http://requestb.in/173lyyx1
        description:
          type: string
          description: Description of the webhook
          example: Webhook triggered on unsubscription
        events:
          type: array
          description: |
            - Events triggering the webhook. Possible values for **Transactional** type webhook:
            #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed`
            - Possible values for **Marketing** type webhook:
            #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`
            - Possible values for **Inbound** type webhook:
            #### `inboundEmailProcessed`
          items:
            type: string
            example: unsubscribed
            enum:
              - sent
              - hardBounce
              - softBounce
              - blocked
              - spam
              - delivered
              - request
              - click
              - invalid
              - deferred
              - opened
              - uniqueOpened
              - unsubscribed
              - listAddition
              - contactUpdated
              - contactDeleted
              - inboundEmailProcessed
        type:
          type: string
          description: Type of the webhook
          example: marketing
          default: transactional
          enum:
            - transactional
            - marketing
            - inbound
        domain:
          type: string
          description: Inbound domain of webhook, required in case of event type `inbound`
          example: example.com
        batched:
          type: boolean
          description: Batching configuration of the webhook, we send batched webhooks if its true
          example: true
        auth:
          type: object
          description: Authentication header to be send with the webhook requests
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            type: object
            description: Headers send with the requests to the webhook
            example:
              key: cf-secret
              value: test-header-value
    updateWebhook:
      type: object
      properties:
        url:
          type: string
          description: URL of the webhook
          format: url
          example: http://requestb.in/173lyyx1
        description:
          type: string
          description: Description of the webhook
          example: Webhook triggered on contact hardbounce
        events:
          type: array
          description: |
            - Events triggering the webhook. Possible values for **Transactional** type webhook:
            #### `sent` OR `request`, `delivered`, `hardBounce`, `softBounce`, `blocked`, `spam`, `invalid`, `deferred`, `click`, `opened`, `uniqueOpened` and `unsubscribed`
            - Possible values for **Marketing** type webhook:
            #### `spam`, `opened`, `click`, `hardBounce`, `softBounce`, `unsubscribed`, `listAddition` & `delivered`
            - Possible values for **Inbound** type webhook:
            #### `inboundEmailProcessed`
          items:
            type: string
            example: hardBounce
            enum:
              - sent
              - hardBounce
              - softBounce
              - blocked
              - spam
              - delivered
              - request
              - click
              - invalid
              - deferred
              - opened
              - uniqueOpened
              - unsubscribed
              - listAddition
              - contactUpdated
              - contactDeleted
              - inboundEmailProcessed
        domain:
          type: string
          description: Inbound domain of webhook, used in case of event type `inbound`
          example: example.com
        batched:
          type: boolean
          description: Batching configuration of the webhook, we send batched webhooks if its true
          example: true
        auth:
          type: object
          description: Authentication header to be send with the webhook requests
          example:
            type: bearer
            token: test-auth-token1234
        headers:
          type: array
          items:
            type: object
            description: Headers send with the requests to the webhook
            example:
              key: cf-secret
              value: test-header-value
    createDoiContact:
      required:
        - email
        - includeListIds
        - redirectionUrl
        - templateId
      type: object
      properties:
        email:
          type: string
          description: Email address where the confirmation email will be sent. This
            email address will be the identifier for all other contact attributes.
          format: email
          example: elly@example.com
        attributes:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes and their values. **These attributes must be present in your Brevo account**. For eg. **{'FNAME':'Elly', 'LNAME':'Roger'}**
          example:
            FNAME: Elly
            LNAME: Roger
        includeListIds:
          type: array
          description: Lists under user account where contact should be added
          items:
            type: integer
            description: Id of the list
            format: int64
            example: 36
        excludeListIds:
          type: array
          description: Lists under user account where contact should not be added
          items:
            type: integer
            description: Id of the list
            format: int64
            example: 36
        templateId:
          type: integer
          description: Id of the Double opt-in (DOI) template
          format: int64
          example: 2
        redirectionUrl:
          type: string
          description: |
            URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag **{{ params.DOIurl }}**.
          format: url
          example: http://requestb.in/173lyyx1
    createContact:
      type: object
      properties:
        email:
          type: string
          description: |
            Email address of the user. **Mandatory if "SMS" field is not passed in "attributes" parameter**. Mobile Number in **SMS** field should be passed with proper country code. For example:
            **{"SMS":"+91xxxxxxxxxx"}** or **{"SMS":"0091xxxxxxxxxx"}**
          format: email
          example: elly@example.com
        ext_id:
          description: Pass your own Id to create a contact.
          type: string
          example: 'externalId'
        attributes:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes and their values. The attribute's parameter should be passed in capital letter while creating a contact. Values that don't match the attribute type (e.g. text or string in a date attribute) will be ignored. **These attributes must be present in your Brevo account.**. For eg:
            **{"FNAME":"Elly", "LNAME":"Roger"}**
          example:
            FNAME: Elly
            LNAME: Roger
        emailBlacklisted:
          type: boolean
          description: Set this field to blacklist the contact for emails (emailBlacklisted
            = true)
          example: false
        smsBlacklisted:
          type: boolean
          description: Set this field to blacklist the contact for SMS (smsBlacklisted
            = true)
          example: false
        listIds:
          type: array
          description: Ids of the lists to add the contact to
          items:
            type: integer
            description: Id of the list to add the contact to
            format: int64
            example: 36
        updateEnabled:
          type: boolean
          description: Facilitate to update the existing contact in the same request
            (updateEnabled = true)
          example: false
          default: false
        smtpBlacklistSender:
          type: array
          description: transactional email forbidden sender for contact. Use only
            for email Contact ( only available if updateEnabled = true )
          items:
            type: string
            format: email
    updateContact:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: { }
          description: |
            Pass the set of attributes to be updated. **These attributes must be present in your account**. To update existing email address of a contact with the new one please pass EMAIL in attributes. For example, **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}**.
            The attribute's parameter should be passed in capital letter while updating a contact. Values that don't match the attribute type (e.g. text or string in a date attribute) will be ignored. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in **SMS** field should be passed with proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}**
          example:
            EMAIL: newemail@domain.com
            FNAME: Ellie
            LNAME: Roger
        ext_id:
          description: Pass your own Id to update ext_id of a contact.
          type: string
          example: 'updateExternalId'
        emailBlacklisted:
          type: boolean
          description: Set/unset this field to blacklist/allow the contact for emails
            (emailBlacklisted = true)
          example: false
        smsBlacklisted:
          type: boolean
          description: Set/unset this field to blacklist/allow the contact for SMS
            (smsBlacklisted = true)
          example: true
        listIds:
          type: array
          description: Ids of the lists to add the contact to
          items:
            type: integer
            description: Id of the list to add the contact to
            format: int64
            example: 65
        unlinkListIds:
          type: array
          description: Ids of the lists to remove the contact from
          items:
            type: integer
            description: Id of the list to remove the contact from
            format: int64
            example: 36
        smtpBlacklistSender:
          type: array
          description: transactional email forbidden sender for contact. Use only
            for email Contact
          items:
            type: string
            format: email
    updateBatchContacts:
      type: object
      properties:
        contacts:
          type: array
          description: List of contacts to be updated
          items:
            type: object
            properties:
              email:
                type: string
                description: Email address of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
                format: email
                example: elly@example.com
              id:
                type: integer
                description: id of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
                format: int64
                example: 31
              sms:
                type: string
                description: SMS of the user to be updated (For each operation only pass one of the supported contact identifiers. Email, id or sms)
                example: +91xxxxxxxxxx
              ext_id:
                description: Pass your own Id to update ext_id of a contact.
                type: string
                example: 'UpdateExternalId'
              attributes:
                type: object
                additionalProperties: { }
                description: |
                  Pass the set of attributes to be updated. **These attributes must be present in your account**. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, **{ "EMAIL":"newemail@domain.com", "FNAME":"Ellie", "LNAME":"Roger"}**.
                  Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in **SMS** field should be passed with proper country code. For example: **{"SMS":"+91xxxxxxxxxx"} or {"SMS":"0091xxxxxxxxxx"}**
                example:
                  EMAIL: newemail@domain.com
                  FNAME: Ellie
                  LNAME: Roger
              emailBlacklisted:
                type: boolean
                description: Set/unset this field to blacklist/allow the contact for emails
                  (emailBlacklisted = true)
                example: false
              smsBlacklisted:
                type: boolean
                description: Set/unset this field to blacklist/allow the contact for SMS
                  (smsBlacklisted = true)
                example: true
              listIds:
                type: array
                description: Ids of the lists to add the contact to
                items:
                  type: integer
                  description: Id of the list to add the contact to
                  format: int64
                  example: 65
              unlinkListIds:
                type: array
                description: Ids of the lists to remove the contact from
                items:
                  type: integer
                  description: Id of the list to remove the contact from
                  format: int64
                  example: 36
              smtpBlacklistSender:
                type: array
                description: transactional email forbidden sender for contact. Use only
                  for email Contact
                items:
                  type: string
                  format: email
    createAttribute:
      type: object
      properties:
        value:
          type: string
          description: |
            Value of the attribute. **Use only if the attribute's category is 'calculated' or 'global'**
          example: COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]
        isRecurring:
          type: boolean
          description: |
            Type of the attribute. **Use only if the attribute's category is 'calculated' or 'global'**
          example: true
        enumeration:
          type: array
          description: |
            List of values and labels that the attribute can take. **Use only if the attribute's category is "category"**. For example:
            **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
          items:
            required:
              - label
              - value
            type: object
            properties:
              value:
                type: integer
                description: Id of the value
                example: 1
              label:
                type: string
                description: Label of the value
                example: Women
        type:
          type: string
          description: |
            Type of the attribute. **Use only if the attribute's category is 'normal', 'category' or 'transactional'**
            Type **boolean** is only available if the category is **normal** attribute
            Type **id** is only available if the category is **transactional** attribute
            Type **category** is only available if the category is **category** attribute
          example: text
          enum:
            - text
            - date
            - float
            - boolean
            - id
            - category
    updateAttribute:
      type: object
      properties:
        value:
          type: string
          description: |
            Value of the attribute to update. **Use only if the attribute's category is 'calculated' or 'global'**
          example: COUNT[BLACKLISTED,BLACKLISTED,<,NOW()]
        enumeration:
          type: array
          description: |
            List of the values and labels that the attribute can take. **Use only if the attribute's category is "category"**. For example,
            **[{"value":1, "label":"male"}, {"value":2, "label":"female"}]**
          items:
            required:
              - label
              - value
            type: object
            properties:
              value:
                type: integer
                description: Id of the value
                example: 1
              label:
                type: string
                description: Label of the value
                example: Men
    createList:
      required:
        - folderId
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of the list
          example: Magento Customer - ES
        folderId:
          type: integer
          description: Id of the parent folder in which this list is to be created
          format: int64
          example: 2
    updateList:
      type: object
      properties:
        name:
          type: string
          description: Name of the list. Either of the two parameters (name, folderId)
            can be updated at a time.
          example: Magento Customer - ES
        folderId:
          type: integer
          description: Id of the folder in which the list is to be moved. Either of
            the two parameters (name, folderId) can be updated at a time.
          format: int64
          example: 2
    requestContactExport:
      type: object
      required:
        - customContactFilter
      properties:
        exportAttributes:
          type: array
          description: |
            List of all the attributes that you want to export. **These attributes must be present in your contact database.** For example:
            **['fname', 'lname', 'email']**
          items:
            type: string
            example: NAME
        customContactFilter:
          type: object
          properties:
            actionForContacts:
              type: string
              description: |
                **Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on contacts as per the list id.
                * **allContacts** - Fetch the list of all contacts for a particular list.
                * **subscribed & unsubscribed** - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list.
                * **unsubscribedPerList** - Fetch the list of contacts that are unsubscribed from a particular list only.
              enum:
                - allContacts
                - subscribed
                - unsubscribed
                - unsubscribedPerList
            actionForEmailCampaigns:
              type: string
              description: |
                **Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed.** This will export the contacts on the basis of provided action applied on email campaigns.
                * **openers & nonOpeners** - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign.
                * **clickers & nonClickers** - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign.
                * **unsubscribed** - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign.
                * **hardBounces & softBounces** - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).
              enum:
                - openers
                - nonOpeners
                - clickers
                - nonClickers
                - unsubscribed
                - hardBounces
                - softBounces
            actionForSmsCampaigns:
              type: string
              description: |
                **Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed.** This will export the contacts on the basis of provided action applied on sms campaigns.
                * **unsubscribed** - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns.
                * **hardBounces & softBounces** - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.
              enum:
                - hardBounces
                - softBounces
                - unsubscribed
            listId:
              type: integer
              description: |
                **Mandatory if actionForContacts is passed, ignored otherwise.** Id of the list for which the corresponding action shall be applied in the filter.
              format: int64
              example: 2
            emailCampaignId:
              type: integer
              description: |
                Considered only if **actionForEmailCampaigns** is passed, ignored otherwise. **Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed.**
                The id of the email campaign for which the corresponding action shall be applied in the filter.
              format: int64
              example: 12
            smsCampaignId:
              type: integer
              description: |
                Considered only if **actionForSmsCampaigns** is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter.
              format: int64
              example: 12
          description: |
            Set the filter for the contacts to be exported.
        notifyUrl:
          type: string
          description: Webhook that will be called once the export process is finished.
            For reference, https://help.brevo.com/hc/en-us/articles/360007666479
          format: url
          example: http://requestb.in/173lyyx1
    requestContactImport:
      type: object
      properties:
        fileUrl:
          type: string
          description: |
            **Mandatory if fileBody and jsonBody is not defined.** URL of the file to be imported (**no local file**). Possible file formats:
            #### .txt, .csv, .json
          format: url
          example: https://importfile.domain.com
        fileBody:
          type: string
          description: |
            **Mandatory if fileUrl and jsonBody is not defined.** CSV content to be imported. Use semicolon to separate multiple attributes. **Maximum allowed file body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
          example: "NAME;SURNAME;EMAIL\nSmith;John;john.smith@example.com\nRoger;Ellie;ellie36@example.com"
        jsonBody:
          type: array
          description: |
            **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files.
          items:
            type: object
            properties:
              email:
                type: string
              attributes:
                type: object
                additionalProperties: true
                description: List of attributes to be imported
            example: { "email": "ndicky0@ocn.ne.jp","attributes": { "LNAME": "Noemi","FNAME": "Dicky","COUNTRY": "DE","BIRTHDAY": "11/02/1989","PREFERED_COLOR": "BLACK","WHATSAPP": "33689965433","LANDLINE_NUMBER": "33689965433", "SMS": "33689965433" } }
        listIds:
          type: array
          description: |
            **Mandatory if newList is not defined.** Ids of the lists in which the contacts shall be imported. For example, **[2, 4, 7]**.
          items:
            type: integer
            description: List Id in which the contacts shall be imported
            format: int64
            example: 76
        notifyUrl:
          type: string
          description: URL that will be called once the import process is finished.
            For reference, https://help.brevo.com/hc/en-us/articles/360007666479
          format: url
          example: http://requestb.in/173lyyx1
        newList:
          type: object
          properties:
            listName:
              type: string
              description: |
                List with listName will be created first and users will be imported in it. **Mandatory if listIds is empty**.
              example: ContactImport - 2017-05
            folderId:
              type: integer
              description: |
                Id of the folder where this new list shall be created. **Mandatory if listName is not empty**
              format: int64
              example: 2
          description: To create a new list and import the contacts into it, pass
            the listName and an optional folderId.
        emailBlacklist:
          type: boolean
          description: To blacklist all the contacts for email
          example: false
          default: false
        disableNotification:
          type: boolean
          description: To disable email notification
          example: false
          default: false
        smsBlacklist:
          type: boolean
          description: To blacklist all the contacts for sms
          example: false
          default: false
        updateExistingContacts:
          type: boolean
          description: To facilitate the choice to update the existing contacts
          example: true
          default: true
        emptyContactsAttributes:
          type: boolean
          description: |
            To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in Brevo, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( **only available if `updateExistingContacts` set to true **)
          example: true
          default: false
    createSmsCampaign:
      required:
        - content
        - name
        - sender
      type: object
      properties:
        name:
          type: string
          description: Name of the campaign
          example: Spring Promo Code
        sender:
          maxLength: 15
          type: string
          description: |
            Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
        content:
          type: string
          description: |
            Content of the message. The **maximum characters used per SMS is 160**, if used more than that, it will be counted as more than one SMS
          example: 'Get a discount by visiting our NY store and saying : Happy Spring!'
        recipients:
          required:
            - listIds
          type: object
          properties:
            listIds:
              type: array
              description: |
                Lists Ids to send the campaign to. **REQUIRED if scheduledAt is not empty**
              items:
                type: integer
                description: List Id to send the campaign to
                format: int64
                example: 54
            exclusionListIds:
              type: array
              description: List ids which have to be excluded from a campaign
              items:
                type: integer
                description: List Id to exclude from the campaign
                format: int64
                example: 15
        scheduledAt:
          type: string
          description: |
            UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          example: 2017-05-05T12:30:00+02:00
        unicodeEnabled:
          type: boolean
          description: |
            Format of the message. It indicates whether the content should be treated as unicode or not.
          example: true
          default: false
        organisationPrefix:
          description: A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.**
          type: string
          example: MyCompany
        unsubscribeInstruction:
          description: Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.**
          type: string
          example: send Stop if you want to unsubscribe.
    updateSmsCampaign:
      type: object
      properties:
        name:
          type: string
          description: Name of the campaign
          example: Spring Promo Code
        sender:
          maxLength: 15
          type: string
          description: |
            Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
        content:
          type: string
          description: |
            Content of the message. The **maximum characters used per SMS is 160**, if used more than that, it will be counted as more than one SMS
          example: 'Get a discount by visiting our NY store and saying : Happy Spring!'
        recipients:
          required:
            - listIds
          type: object
          properties:
            listIds:
              type: array
              description: |
                Lists Ids to send the campaign to. **REQUIRED if scheduledAt is not empty**
              items:
                type: integer
                description: List Id to send the campaign to
                format: int64
                example: 54
            exclusionListIds:
              type: array
              description: List ids which have to be excluded from a campaign
              items:
                type: integer
                description: List Id to exclude from the campaign
                format: int64
                example: 15
        scheduledAt:
          type: string
          description: |
            UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**
          example: 2017-05-05T12:30:00+02:00
        unicodeEnabled:
          type: boolean
          description: |
            Format of the message. It indicates whether the content should be treated as unicode or not.
          example: true
          default: false
        organisationPrefix:
          description: A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.**
          type: string
          example: MyCompany
        unsubscribeInstruction:
          description: Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.**
          type: string
          example: send Stop if you want to unsubscribe.
    sendTransacSms:
      required:
        - content
        - recipient
        - sender
      type: object
      properties:
        sender:
          maxLength: 15
          type: string
          description: |
            Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters**
          example: MyShop
        recipient:
          type: string
          description: Mobile number to send SMS with the country code
          example: "33689965433"
        content:
          type: string
          description: |
            Content of the message. If more than **160 characters** long, will be sent as multiple text messages
          example: Enter this code:CCJJG8 to validate your account
        type:
          type: string
          description: Type of the SMS. Marketing SMS messages are those sent typically
            with marketing content. Transactional SMS messages are sent to individuals
            and are triggered in response to some action, such as a sign-up, purchase,
            etc.
          example: marketing
          default: transactional
          enum:
            - transactional
            - marketing
        tag:
          type: string
          description: Tag of the message
          example: accountValidation
        webUrl:
          type: string
          description: Webhook to call for each event triggered by the message (delivered
            etc.)
          format: url
          example: http://requestb.in/173lyyx1
        unicodeEnabled:
          type: boolean
          description: |
            Format of the message. It indicates whether the content should be treated as unicode or not.
          example: true
          default: false
        organisationPrefix:
          type: string
          description: A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.**
          example: MyCompany
    sendTestEmail:
      type: object
      properties:
        emailTo:
          type: array
          description: |
            List of the email addresses of the recipients whom you wish to send the test mail.
            _If left empty, the test mail will be sent to your entire test list. You can not send more than 50 test emails per day_.
          items:
            type: string
            description: Email addres of the recipient
            format: email
            example: helen.jurger@example.com
    sendTestSms:
      type: object
      properties:
        phoneNumber:
          type: string
          description: |
            Mobile number of the recipient with the country code. This number **must belong to one of your contacts in Brevo account and must not be blacklisted**
          example: "33689965433"
    getTransacAggregatedSmsReport:
      type: object
      properties:
        range:
          type: string
          description: Time frame of the report
          example: 2016-09-08|2017-04-06
        requests:
          type: integer
          description: Number of requests for the timeframe
          format: int64
          example: 263
        delivered:
          type: integer
          description: Number of delivered SMS for the timeframe
          format: int64
          example: 249
        hardBounces:
          type: integer
          description: Number of hardbounces for the timeframe
          format: int64
          example: 1
        softBounces:
          type: integer
          description: Number of softbounces for the timeframe
          format: int64
          example: 4
        blocked:
          type: integer
          description: Number of blocked contact for the timeframe
          format: int64
          example: 2
        unsubscribed:
          type: integer
          description: Number of unsubscription for the timeframe
          format: int64
          example: 6
        replied:
          type: integer
          description: Number of answered SMS for the timeframe
          format: int64
          example: 12
        accepted:
          type: integer
          description: Number of accepted for the timeframe
          format: int64
          example: 252
        rejected:
          type: integer
          description: Number of rejected for the timeframe
          format: int64
          example: 8
    getTransacSmsReport:
      type: object
      properties:
        reports:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                description: Date for which statistics are retrieved
                format: date
                example: 2017-03-17
              requests:
                type: integer
                description: Number of requests for the date
                format: int64
                example: 87
              delivered:
                type: integer
                description: Number of delivered SMS for the date
                format: int64
                example: 85
              hardBounces:
                type: integer
                description: Number of hardbounces for the date
                format: int64
                example: 1
              softBounces:
                type: integer
                description: Number of softbounces for the date
                format: int64
                example: 1
              blocked:
                type: integer
                description: Number of blocked contact for the date
                format: int64
                example: 0
              unsubscribed:
                type: integer
                description: Number of unsubscription for the date
                format: int64
                example: 1
              replied:
                type: integer
                description: Number of answered SMS for the date
                format: int64
                example: 2
              accepted:
                type: integer
                description: Number of accepted for the date
                format: int64
                example: 85
              rejected:
                type: integer
                description: Number of rejected for the date
                format: int64
                example: 1
    getIp:
      required:
        - active
        - domain
        - id
        - ip
      type: object
      properties:
        id:
          type: integer
          description: ID of the dedicated IP
          format: int64
          example: 3
        ip:
          type: string
          description: Dedicated IP
          example: 123.65.8.22
        active:
          type: boolean
          description: Status of the IP (true=active, false=inactive)
          example: true
        domain:
          type: string
          description: Domain associated to the IP
          example: mailing.myshop.com
    getIpsFromSender:
      required:
        - ips
      type: object
      properties:
        ips:
          type: array
          description: Dedicated IP(s) linked to a sender
          items:
            $ref: '#/components/schemas/getIpFromSender'
    getIps:
      required:
        - ips
      type: object
      properties:
        ips:
          type: array
          description: Dedicated IP(s) available on your account
          items:
            $ref: '#/components/schemas/getIp'
    getIpFromSender:
      required:
        - domain
        - id
        - ip
        - weight
      type: object
      properties:
        id:
          type: integer
          description: ID of the dedicated IP
          format: int64
          example: 3
        ip:
          type: string
          description: Dedicated IP
          example: 123.65.8.22
        domain:
          type: string
          description: Domain associated to the IP
          example: mailing.myshop.dom
        weight:
          type: integer
          description: Weight of the IP
          format: int64
          example: 75
    manageIp:
      type: object
      properties:
        ip:
          type: string
          description: Dedicated ID
          example: 123.65.8.22
    getTransacEmailContent:
      required:
        - attachmentCount
        - body
        - date
        - email
        - events
        - subject
      type: object
      properties:
        email:
          type: string
          description: Email address to which transactional email has been sent
          format: email
          example: abc@example.com
        subject:
          type: string
          description: Subject of the sent email
          example: Summer Camp
        templateId:
          type: integer
          description: Id of the template
          format: int64
          example: 2
        date:
          type: string
          description: Date on which transactional email was sent
          example: 2017-03-12T12:30:00Z
        events:
          type: array
          description: Series of events which occurred on the transactional email
          items:
            required:
              - name
              - time
            type: object
            properties:
              name:
                type: string
                description: Name of the event that occurred on the sent email
                example: delivered
              time:
                type: string
                description: Time at which the event occurred
                example: 2017-03-12T12:30:00Z
        body:
          type: string
          description: Actual content of the transactional email that has been sent
          example: <!DOCTYPE html> <html> <body> <h1>Greetings from the team</h1>
            <p>This is the actual html content sent</p> </body> </html>
        attachmentCount:
          type: integer
          description: Count of the attachments that were sent in the email
          format: int64
          example: 2
    getTransacEmailsList:
      type: object
      properties:
        count:
          type: integer
          description: Total number of transactional emails available on your account according to the passed filter
          format: int64
          example: 5
        transactionalEmails:
          type: array
          items:
            required:
              - date
              - email
              - messageId
              - subject
              - uuid
            type: object
            properties:
              email:
                type: string
                description: Email address to which transactional email has been sent
                format: email
                example: john.smith@example.com
              subject:
                type: string
                description: Subject of the sent email
                example: Summer Camp
              templateId:
                type: integer
                description: Id of the template
                format: int64
                example: 2
              messageId:
                type: string
                description: Message Id of the sent email
                example: <201798300811.5700093@relay.domain.com>
              uuid:
                type: string
                description: Unique id of the email sent to a particular contact
                example: 5a78c-209ok98262910-s99a341
              date:
                type: string
                description: Date on which transactional email was sent
                example: 2017-03-12T12:30:00Z
              from:
                type: string
                description: Email address of the sender from which the email was
                  sent
                format: email
                example: diana.doe@example.com
              tags:
                type: array
                description: Tags used for your email
                items:
                  type: string
                  example: tag1
    getBlockedDomains:
      type: object
      required:
        - domains
      properties:
        domains:
          description: List of all blocked domains
          type: array
          items:
            type: string
            description: name of blocked domain
            example: "contact.com"
    abTestVersionStats:
      required:
        - Version A
        - Version B
      type: object
      properties:
        Version A:
          type: string
          description: percentage of an event for version A
          example: 50%
        Version B:
          type: string
          description: percentage of an event for version B
          example: 50%
      description: Percentage of a particular event for both versions
    abTestVersionClicks:
      type: array
      description: Information on clicked links for a particular version
      items:
        required:
          - clickRate
          - clicksCount
          - link
        type: object
        properties:
          link:
            type: string
            description: URL of the link
            example: https://facbook.com/versionA
          clicksCount:
            type: integer
            description: Number of times a link is clicked
            format: int64
            example: 3.0
          clickRate:
            type: string
            description: Percentage of clicks of link with respect to total clicks
            example: 40%
    getInboundEmailEvents:
      type: object
      properties:
        events:
          type: array
          items:
            type: object
            required:
              - uuid
              - sender
              - date
              - recipient
            properties:
              uuid:
                description: 'UUID that can be used to fetch additional data'
                type: string
                format: uuid
              date:
                description: 'Date when email was received on SMTP relay'
                type: string
                format: date-time
              sender:
                description: 'Sender’s email address'
                type: string
                format: email
              recipient:
                description: 'Recipient’s email address'
                type: string
                format: email
    getInboundEmailEventsByUuid:
      type: object
      properties:
        receivedAt:
          description: 'Date when email was received on SMTP relay'
          type: string
          format: date-time
          example: "2019-05-25T11:53:26Z"
        deliveredAt:
          description: 'Date when email was delivered successfully to client’s webhook'
          type: string
          nullable: true
          format: date-time
        recipient:
          description: 'Recipient’s email address'
          type: string
          format: email
        sender:
          description: 'Sender’s email address'
          type: string
          format: email
        messageId:
          description: 'Value of the Message-ID header. This will be present only after the processing is done.'
          type: string
        subject:
          description: 'Value of the Subject header. This will be present only after the processing is done. '
          type: string
        attachments:
          description: 'List of attachments of the email. This will be present only after the processing is done.'
          type: array
          items:
            type: object
            properties:
              name:
                description: 'filename specified in the Content-Disposition header of the attachment'
                type: string
              contentType:
                description: 'value of the Content-Type header of the attachment'
                type: string
              contentId:
                description: 'value of the Content-ID header of the attachment.'
                type: string
              contentLength:
                description: 'size of the attachment in bytes'
                type: integer
        logs:
          description: 'List of events/logs that describe the lifecycle of the email on SIB platform'
          type: array
          items:
            type: object
            properties:
              date:
                description: 'Date of the event'
                type: string
                format: date-time
              type:
                description: 'Type of the event'
                type: string
                enum:
                  - received
                  - processed
                  - webhookFailed
                  - webhookDelivered
    getScheduledEmailByBatchId:
      type: object
      properties:
        count:
          type: integer
          description: 'Total number of batches'
        batches:
          type: array
          items:
            type: object
            required:
              - scheduledAt
              - createdAt
              - status
            properties:
              scheduledAt:
                description: 'Datetime for which the batch was scheduled'
                type: string
                format: date-time
              createdAt:
                description: 'Datetime on which the batch was scheduled'
                type: string
                format: date-time
              status:
                description: 'Current status of the scheduled batch'
                type: string
                enum:
                  - inProgress
                  - queued
                  - processed
                  - error
    getScheduledEmailByMessageId:
      type: object
      required:
        - scheduledAt
        - createdAt
        - status
      properties:
        scheduledAt:
          description: 'Datetime for which the email was scheduled'
          type: string
          format: date-time
        createdAt:
          description: 'Datetime on which the email was scheduled'
          type: string
          format: date-time
        status:
          description: 'Current status of the scheduled email'
          type: string
          enum:
            - inProgress
            - queued
            - processed
            - error
    subAccountsResponse:
      type: object
      properties:
        count:
          type: integer
          description: 'Total number of subaccounts'
        subAccounts:
          type: array
          items:
            type: object
            required:
              - id
              - companyName
              - active
              - createdAt
            properties:
              id:
                description: 'id of the sub-account'
                type: integer
                format: int64
              companyName:
                description: 'Name of the sub-account company'
                type: string
              active:
                description: 'Whether the sub-account is active or not'
                type: boolean
              createdAt:
                description: 'Timestamp when the sub-account was created'
                type: integer
                format: int64
    createSubAccount:
      type: object
      required:
        - companyName
        - email
      properties:
        companyName:
          description: 'Set the name of the sub-account company'
          type: string
        email:
          description: 'Email address for the organization'
          type: string
        language:
          description: 'Set the language of the sub-account'
          type: string
          enum:
            - en
            - fr
            - it
            - es
            - pt
            - de
        timezone:
          description: 'Set the timezone of the sub-account'
          type: string
      example:
        companyName: 'Test Sub-account'
        email: test-sub@example.com
        timezone: Europe/Paris
        language: en
    createSubAccountResponse:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: ID of the sub-account created
          format: int64
          example: 5
    corporateGroupDetailsResponse:
      type: object
      properties:
        group:
          type: object
          properties:
            id:
              type: string
              description: Group id
            groupName:
              type: string
              description: Name of the group
            createdAt:
              type: string
              description: Group creation date
        sub-accounts:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                description: Id of the sub-account organzation
              companyName:
                type: string
                description: Name of the sub-account organzation
              createdAt:
                type: string
                description: Creation date of the sub-account organzation
        users:
          type: array
          items:
            type: object
            properties:
              email:
                type: string
                description: Email address of the user
              lastName:
                type: string
                description: Last name of the user
              firstName:
                type: string
                description: First name of the user
    masterDetailsResponse:
      type: object
      properties:
        email:
          type: string
          description: Email id of master account
        companyName:
          type: string
          description: Company name of master account organization
        id:
          type: integer
          format: int64
          description: Unique identifier of the master account organization
        currencyCode:
          type: string
          description: Currency code of the master account organization
        timezone:
          type: string
          description: Timezone of the master account organization
        billingInfo:
          type: object
          description: Billing details of the master account organization
          properties:
            email:
              type: string
              description: Billing email id of master account
            companyName:
              type: string
              description: Company name of master account
            name:
              type: object
              description: Billing name of master account holder
              properties:
                givenName:
                  type: string
                  description: First name for billing
                familyName:
                  type: string
                  description: Last name for billing
            address:
              type: object
              description: Billing address of master account
              properties:
                streetAddress:
                  type: string
                  description: Street address
                locality:
                  type: string
                  description: Locality
                postalCode:
                  type: string
                  description: Postal code
                stateCode:
                  type: string
                  description: State code
                countryCode:
                  type: string
                  description: Country code
        planInfo:
          type: object
          description: Plan details
          properties:
            currencyCode:
              type: string
              description: Plan currency
            nextBillingAt:
              type: integer
              format: int64
              description: Timestamp of next billing date
            price:
              type: number
              description: Plan amount
            planPeriod:
              type: string
              description: Plan period type
              enum:
                - month
                - year
            subAccounts:
              type: integer
              description: Number of sub-accounts
            features:
              type: array
              description: List of provided features in the plan
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the feature
                  unitValue:
                    type: string
                    description: Unit value of the feature
                  quantity:
                    type: integer
                    format: int64
                    description: Quantity provided in the plan
                  quantityWithOverages:
                    type: integer
                    format: int64
                    description: Quantity with overages provided in the plan (only applicable on ENTv2)
                  used:
                    type: integer
                    format: int64
                    description: Quantity consumed by master
                  usedOverages:
                    type: integer
                    format: int64
                    description: Quantity consumed by sub-organizations over the admin plan limit (only applicable on ENTv2)
                  remaining:
                    type: integer
                    format: int64
                    description: Quantity remaining in the plan
    subAccountDetailsResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the sub-account user
        email:
          type: string
          description: Email id of the sub-account organization
        companyName:
          type: string
          description: Sub-account company name
        planInfo:
          type: object
          description: Sub-account plan details
          properties:
            credits:
              type: object
              description: Credits quota and remaining credits on the sub-account
              properties:
                sms:
                  type: integer
                  format: int64
                  description: SMS credits remaining on the sub-account
                emails:
                  type: object
                  description: Email credits remaining on the sub-account
                  properties:
                    quantity:
                      type: integer
                      format: int64
                      description: Quantity of email messaging limits provided
                    remaining:
                      type: integer
                      format: int64
                      description: Available email messaging limits for use
            features:
              type: object
              description: Features available on the sub-account
              properties:
                inbox:
                  type: object
                  description: Inbox details / Not available on ENTv2
                  properties:
                    quantity:
                      type: integer
                      format: int64
                      description: Quantity of inbox provided
                    remaining:
                      type: integer
                      format: int64
                      description: Available inboxes for use
                landingPage:
                  type: object
                  description: Landing page details / Not available on ENTv2
                  properties:
                    quantity:
                      type: integer
                      format: int64
                      description: Quantity of landing pages provided
                    remaining:
                      type: integer
                      format: int64
                      description: Available landing pages for use
                users:
                  type: object
                  description: Multi-account details
                  properties:
                    quantity:
                      type: integer
                      format: int64
                      description: Quantity of multi-account's provided
                    remaining:
                      type: integer
                      format: int64
                      description: Available multi-accounts for use
            planType:
              type: string
              description: type of the plan
    subAccountUpdatePlanRequest:
      type: object
      description: Details of the plan to be changed
      properties:
        credits:
          type: object
          description: Credit details to update
          properties:
            email:
              type: integer
              format: int64
              description: Number of email credits
        features:
          type: object
          description: Features details to update
          properties:
            users:
              type: integer
              format: int64
              description: Number of multi-users
            landingPage:
              type: integer
              format: int64
              description: Number of landing pages / Not required on ENTv2
            inbox:
              type: integer
              format: int64
              description: Number of inboxes / Not required on ENTv2
      example:
        credits:
          email: 5000
        features:
          users: 15
          landingPage: 20
          inbox: 10

    subAccountAppsToggleRequest:
      type: object
      description: List of enable/disable applications on the sub-account
      properties:
        inbox:
          type: boolean
          description: Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2
        whatsapp:
          type: boolean
          description: Set this field to enable or disable Whatsapp campaigns on the sub-account
        automation:
          type: boolean
          description: Set this field to enable or disable Automation on the sub-account
        email-campaigns:
          type: boolean
          description: Set this field to enable or disable Email Campaigns on the sub-account
        sms-campaigns:
          type: boolean
          description: Set this field to enable or disable SMS Marketing on the sub-account
        landing-pages:
          type: boolean
          description: Set this field to enable or disable Landing pages on the sub-account
        transactional-emails:
          type: boolean
          description: Set this field to enable or disable Transactional Email on the sub-account
        transactional-sms:
          type: boolean
          description: Set this field to enable or disable Transactional SMS on the sub-account
        facebook-ads:
          type: boolean
          description: Set this field to enable or disable Facebook ads on the sub-account
        web-push:
          type: boolean
          description: Set this field to enable or disable Web Push on the sub-account
        meetings:
          type: boolean
          description: Set this field to enable or disable Meetings on the sub-account
        conversations:
          type: boolean
          description: Set this field to enable or disable Conversations on the sub-account
        crm:
          type: boolean
          description: Set this field to enable or disable Sales CRM on the sub-account
      example:
        landing-pages: true
        sms-campaigns: false
        whatsapp: true
        meetings: true
        web-push: false

    TaskTypes:
      type: object
      description: Task types details
      properties:
        id:
          type: string
          description: Id of task type
          example: "61a88a2eb7a574180261234"
        title:
          type: string
          description: Title of task type
          example: "Email"
    Task:
      required:
        - taskTypeId
        - name
        - date
      type: object
      description: Task Details
      properties:
        id:
          type: string
          description: Unique task id
          example: "61a5cd07ca1347c82306ad06"
        taskTypeId:
          type: string
          description: Id for type of task e.g Call / Email / Meeting etc.
          example: "61a5cd07ca1347c82306ad09"
        name:
          type: string
          description: Name of task
          example: "Task: Connect with client"
        contactsIds:
          items:
            type: integer
          type: array
          description: Contact ids for contacts linked to this task
          example: [ 1, 2, 3 ]
        dealsIds:
          items:
            type: string
          type: array
          description: Deal ids for deals a task is linked to
          example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
        companiesIds:
          items:
            type: string
          type: array
          description: Companies ids for companies a task is linked to
          example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
    TaskReminder:
      required:
        - value
        - unit
        - types
      type: object
      description: Task reminder date/time for a task
      properties:
        value:
          type: integer
          example: 10
          description: Value of time unit before reminder is to be sent
        unit:
          type: string
          enum:
            - minutes
            - hours
            - weeks
            - days
          description: Unit of time before reminder is to be sent
        types:
          items:
            type: string
            enum:
              - email
              - push
          description: Type of task reminder e.g email, push
          type: array
          example: [
            "email"
          ]
    FileList:
      type: array
      description: List of files
      items:
        $ref: '#/components/schemas/FileData'
    FileDownloadableLink:
      type: object
      description: Downloadable file link
      properties:
        fileUrl:
          type: string
          description: A unique link to download the requested file.
          example: 'https://storage.googleapis.com/brevo-app-crm.......-sample.pdf'
    FileData:
      type: object
      description: File data that is uploaded
      properties:
        name:
          type: string
          description: Name of uploaded file
          example: "example.png"
        authorId:
          type: string
          description: Account id of user which created the file
          example: "61a5ce58y5d4795761045991"
        contactId:
          type: integer
          format: int64
          description: Contact id of contact on which file is uploaded
          example: 1
        dealId:
          type: string
          description: Deal id linked to a file
          example: "61a5ce58c5d4795761045991"
        companyId:
          type: string
          description: Company id linked to a file
          example: "61a5ce58c5d4795761045991"
        size:
          type: integer
          format: int64
          description: Size of file in bytes
          example: 10
        createdAt:
          type: string
          format: date-time
          example: "2017-05-01T17:05:03.000Z"
          description: File created date/time
    NoteData:
      required:
        - text
      type: object
      description: Note data to be saved
      properties:
        text:
          type: string
          maxLength: 3000
          minLength: 1
          example: "In communication with client for resolution of queries."
          description: Text content of a note
        contactIds:
          items:
            type: integer
          description: Contact Ids linked to a note
          type: array
          example: [
            247, 1, 2
          ]
        dealIds:
          items:
            type: string
          description: Deal Ids linked to a note
          type: array
          example: [
            "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991"
          ]
        companyIds:
          items:
            type: string
          description: Company Ids linked to a note
          type: array
          example: [
            "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991"
          ]
    Note:
      required:
        - text
      type: object
      description: Note Details
      properties:
        id:
          type: string
          description: Unique note Id
          example: "61a5cd07ca1347c82306ad09"
        text:
          type: string
          maxLength: 3000
          minLength: 1
          example: "In communication with client for resolution of queries."
          description: Text content of a note
        contactIds:
          items:
            type: integer
          description: Contact ids linked to a note
          type: array
          example: [
            247, 1, 2
          ]
        dealIds:
          items:
            type: string
          description: Deal ids linked to a note
          type: array
          example: [
            "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991"
          ]
        authorId:
          type: object
          description: Account details of user which created the note
          example: {
            id: "61a5ce58y5d4795761045991",
            email: "johndoe@example.com",
            locale: "en_GB",
            timezone: "Asia/Kolkata",
            name: {
              fullName: "John Doe"
            }
          }
        createdAt:
          type: string
          format: date-time
          example: "2017-05-01T17:05:03.000Z"
          description: Note created date/time
        updatedAt:
          type: string
          format: date-time
          example: "2017-05-01T17:05:03.000Z"
          description: Note updated date/time
    NoteId:
      type: object
      description: Updated Note ID
      properties:
        id:
          type: string
          description: Unique note Id
          example: "61a5cd07ca1347c82306ad09"
    NoteList:
      type: array
      description: List of notes
      items:
        $ref: '#/components/schemas/Note'
    TaskList:
      type: object
      description: List of tasks
      properties:
        items:
          type: array
          description: List of tasks
          items:
            $ref: '#/components/schemas/Task'
    Pipelines:
      type: array
      description: List of pipeline
      items:
        $ref: '#/components/schemas/Pipeline'
    PipelineStage:
      type: object
      description: List of stages
      properties:
        id:
          type: string
          description: Stage id
          example: "9e577ff7-8e42-4ab3-be26-2b5e01b42518"
        name:
          type: string
          description: Stage name
          example: "New"
    Pipeline:
      type: object
      description: List of stages
      properties:
        pipeline_name:
          type: string
          description: Pipeline name
          example: Sales Pipeline
        pipeline:
          type: string
          description: Pipeline id
          example: "5ea675e3da0dd085acaea610"
        stages:
          type: array
          description: List of stages
          items:
            $ref: '#/components/schemas/PipelineStage'
    DealAttributes:
      type: array
      description: List of deal attributes
      items:
        type: object
        description: List of attributes
        properties:
          internalName:
            type: string
            example: "deal_name"
          label:
            type: string
            example: "Deal Name"
          attributeTypeName:
            type: string
            example: "text"
          attributeOptions:
            type: array
            items:
              type: object
              example: {
                key: "custom key",
                value: "custom label"
              }
          isRequired:
            type: boolean
            example: true
    DealsList:
      type: object
      description: List of Deals
      properties:
        items:
          type: array
          description: List of deals
          items:
            $ref: '#/components/schemas/Deal'
    Deal:
      type: object
      description: Deal Details
      properties:
        id:
          type: string
          description: Unique deal id
          example: "629475917295261d9b1f4403"
        attributes:
          type: object
          description: Deal attributes with values
          example: {
            deal_name: "testname",
            deal_owner: "6093d2425a9b436e9519d034",
            amount: 12,
            pipeline: "6093d296ad1e9c5cf2140a58",
            deal_stage: "9e577ff7-8e42-4ab3-be26-2b5e01b42518",
            stage_updated_at: "2022-05-30T07:42:05.671Z",
            created_at: "2022-05-30T07:42:05.671Z",
            number_of_contacts: 1,
            last_updated_date: "2022-06-06T08:38:36.761Z",
            last_activity_date: "2022-06-06T08:38:36.000Z",
            next_activity_date: null,
            number_of_activities: 0
          }
        linkedContactsIds:
          items:
            type: integer
          type: array
          description: Contact ids for contacts linked to this deal
          example: [ 1, 2, 3 ]
        linkedCompaniesIds:
          items:
            type: string
          type: array
          description: Companies ids for companies linked to this deal
          example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
    CompaniesList:
      type: object
      description: List of companies
      properties:
        items:
          type: array
          description: List of compaies
          items:
            $ref: '#/components/schemas/Company'
    Company:
      type: object
      description: Company Details
      properties:
        id:
          type: string
          description: Unique comoany id
          example: "629475917295261d9b1f4403"
        attributes:
          type: object
          description: Company attributes with values
          example: {
            "created_at": "2022-01-13T19:04:24.376+05:30",
            "domain": "xyz",
            "last_updated_at": "2022-04-01T18:47:48.283+05:30",
            "name": "text",
            "number_of_contacts": 0,
            "owner": "62260474111b1101704a9d85",
            "owner_assign_date": "2022-04-01T18:21:13.379+05:30",
            "phone_number": 8171844192,
            "revenue": 10
          }
        linkedContactsIds:
          items:
            type: integer
          type: array
          format: in64
          description: Contact ids for contacts linked to this company
          example: [ 1, 2, 3 ]
        linkedDealsIds:
          items:
            type: string
          type: array
          format: objectID
          description: Deals ids for companies linked to this company
          example: [ "61a5ce58c5d4795761045990", "61a5ce58c5d4795761045991" , "61a5ce58c5d4795761045992" ]
    CompanyAttributes:
      type: array
      description: List of company attributes
      items:
        type: object
        description: List of attributes
        properties:
          internalName:
            type: string
            example: "name"
          label:
            type: string
            example: "Company Name"
          attributeTypeName:
            type: string
            example: "text"
          attributeOptions:
            type: array
            items:
              type: object
              example: {
                key: "custom key",
                value: "custom label"
              }
          isRequired:
            type: boolean
            example: true
    ConversationsMessage:
      type: object
      description: a Conversations message
      properties:
        id:
          type: string
          description: Message ID. It can be used for further manipulations with the message.
          example: eYBEm3gq3zc5ayE2g
        type:
          type: string
          enum: [ "agent", "visitor" ]
          description: '`"agent"` for agents’ messages, `"visitor"` for visitors’ messages.'
          example: agent
        text:
          type: string
          description: Message text or name of the attached file
          example: Good morning! How can I help you?
        visitorId:
          type: string
          description: visitor’s ID
          example: kZMvWhf8npAu3H6qd57w2Hv6nh6rnxvg
        agentId:
          type: string
          description: ID of the agent on whose behalf the message was sent (only in messages sent by an agent).
          example: d9nKoegKSjmCtyK78
        agentName:
          type: string
          description: Agent’s name as displayed to the visitor. Only in the messages sent by an agent.
          example: Liz
        createdAt:
          type: integer
          format: int64
          minimum: 0
          description: Timestamp in milliseconds.
          example: 1470222622433
        isPushed:
          type: boolean
          description: '`true` for pushed messages'
          example: true
        receivedFrom:
          type: string
          description: In two-way integrations, messages sent via REST API can be marked with receivedFrom property and then filtered out when received in a webhook to avoid infinite loop.
          example: SuperAwesomeHelpdesk
        file:
          type: object
          properties:
            filename:
              type: string
              description: Name of the file
              example: conversations.png
            size:
              type: integer
              format: int64
              minimum: 0
              description: Size in bytes
              example: 15538
            isImage:
              type: boolean
              description: Whether the file is an image
              example: true
            url:
              type: string
              format: url
              description: URL of the file
              example: https://ucarecdn.com/cee5c10c-8302-45c1-b1fb-43860ca941a9/
            imageInfo:
              type: object
              description: image info is passed in case the file is an image
              properties:
                width:
                  type: integer
                  format: int64
                  minimum: 0
                  description: Width of the image
                  example: 1129
                height:
                  type: integer
                  format: int64
                  minimum: 0
                  description: height of the image
                  example: 525
                previewUrl:
                  type: string
                  format: url
                  description: URL of the preview
                  example: https://ucarecdn.com/03cd56cd-1de9-4f65-996d-08afdf27fa1b/-/preview/800x800/-/quality/lighter/
    order:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - status
        - amount
        - products
      properties:
        id:
          description: 'Unique ID of the order.'
          type: string
          example: "14"
        createdAt:
          description: 'Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created.'
          type: string
          example: "2021-07-29T20:59:23.383Z"
        updatedAt:
          description: 'Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated.'
          type: string
          example: "2021-07-30T10:59:23.383Z"
        status:
          description: 'State of the order.'
          type: string
          example: "completed"
        amount:
          description: 'Total amount of the order, including all shipping expenses, tax and the price of items.'
          type: number
          example: 308.42
        products:
          type: array
          items:
            type: object
            required:
              - productId
              - quantity
              - price
            description: 'Details for the Products in an order.'
            properties:
              productId:
                type: string
                description: 'ID of the product.'
                example: "P1"
              quantity:
                type: number
                description: 'How many pieces of the product the visitor has added to the cart.'
                example: 10
              variantId:
                type: string
                description: 'Product ID of the red color shirts.'
                example: "P100"
              price:
                type: number
                description: 'The price of a unit of product'
                example: 99.99
        email:
          description: 'Email of the contact, Mandatory if "phone" field is not passed in "billing" parameter.'
          type: string
          example: "example@brevo.com"
        billing:
          description: 'Billing details of an order.'
          type: object
          properties:
            address:
              type: string
              description: 'Full billing address.'
              example: "15 Somewhere Road, Brynmenyn"
            city:
              type: string
              description: 'Exact city of the address.'
              example: "Basel"
            countryCode:
              type: string
              description: 'Billing country 2-letter ISO code.'
              example: "CA"
            phone:
              type: string
              description: 'Phone number to contact for further details about the order, Mandatory if "email" field is not passed.'
              example: "01559 032133"
            postCode:
              type: string
              description: 'Postcode for delivery and billing.'
              example: "4052"
            paymentMethod:
              type: string
              description: 'How the visitor will pay for the item(s), e.g. paypal, check, etc.'
              example: "PayPal"
            region:
              type: string
              description: 'Exact region (state/province) for delivery and billing.'
              example: "Northwestern Switzerland"
        coupons:
          description: 'Coupons applied to the order. Stored case insensitive.'
          type: array
          example:
            - "EASTER15OFF"
          items:
            type: string
    orderBatch:
      type: object
      required:
        - orders
      properties:
        orders:
          description: "array of order objects"
          type: array
          items:
            $ref: '#/components/schemas/order'
        notifyUrl:
          description: 'Notify Url provided by client to get the status of batch request'
          type: string
          example: "https://en.wikipedia.org/wiki/Webhook"
        historical:
          description: 'Defines wether you want your orders to be considered as live data or as historical data (import of past data, synchronising data). True: orders will not trigger any automation workflows. False: orders will trigger workflows as usual.'
          type: boolean
          default: true
          example: true
    createdBatchId:
      type: object
      required:
        - batchId
      properties:
        batchId:
          type: number
          description: 'Batch ID of the request'
          example: '1'
        count:
          type: integer
          description: Number of orders
          format: int64
          example: 17655
    getCategories:
      required:
        - categories
        - count
      type: object
      properties:
        categories:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getCategoryDetails'
        count:
          type: integer
          description: Number of categories
          format: int64
          example: 17655
    getCategoryDetails:
      required:
        - id
        - name
        - createdAt
        - modifiedAt
      type: object
      properties:
        id:
          type: string
          description: Category ID for which you requested the details
          format: string
          example: C11
        name:
          type: string
          description: Name of the category for which you requested the details
          format: string
          example: Electronics
        createdAt:
          type: string
          description: Creation UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        modifiedAt:
          type: string
          description: Last modification UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        url:
          type: string
          description: URL to the category
          format: string
          example: http://mydomain.com/category/clothing
        isDeleted:
          type: boolean
          description: category deleted from the shop's database
          format: string
          example: true
    createUpdateCategory:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: |
            Unique Category ID as saved in the shop
          format: email
          example: CAT123
        name:
          type: string
          description: |
            **Mandatory in case of creation**. Name of the Category, as displayed in the shop
          example: Electronics
        url:
          type: string
          description: URL to the category
          example: http://mydomain.com/category/electronics
        updateEnabled:
          type: boolean
          description: Facilitate to update the existing category in the same request
            (updateEnabled = true)
          example: false
          default: false
        deletedAt:
          type: string
          description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted from the shop's database
          example: 2017-05-12T12:30:00Z
    createUpdateCategories:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: |
            Unique Category ID as saved in the shop
          format: email
          example: CAT123
        name:
          type: string
          description: |
            **Mandatory in case of creation**. Name of the Category, as displayed in the shop
          example: Electronics
        url:
          type: string
          description: URL to the category
          example: http://mydomain.com/category/electronics
        deletedAt:
          type: string
          description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted from the shop's database
          example: 2017-05-12T12:30:00Z
    createUpdateBatchCategory:
      type: object
      required:
        - categories
      properties:
        categories:
          description: "array of categories objects"
          type: array
          items:
            $ref: '#/components/schemas/createUpdateCategories'
        updateEnabled:
          type: boolean
          description: Facilitate to update the existing categories in the same request
            (updateEnabled = true)
    createCategoryModel:
      type: object
      properties:
        id:
          type: integer
          description: ID of the category when a new category is created
          format: int64
          example: 122
    createUpdateBatchCategoryModel:
      type: object
      properties:
        createdCount:
          type: integer
          description: Number of the new created categories
          format: int64
          example: 7
        updatedCount:
          type: integer
          description: Number of the existing categories updated
          format: int64
          example: 5
    getProducts:
      required:
        - products
        - count
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/getProductDetails'
        count:
          type: integer
          description: Number of products
          format: int64
          example: 17655
    getProductDetails:
      required:
        - id
        - name
        - createdAt
        - modifiedAt
        - s3ThumbAnalytics
        - s3ThumbEditor
      type: object
      properties:
        id:
          type: string
          description: Product ID for which you requested the details
          format: string
          example: P11
        name:
          type: string
          description: Name of the product for which you requested the details
          format: string
          example: Iphone 11
        createdAt:
          type: string
          description: Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        modifiedAt:
          type: string
          description: Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ)
          example: 2017-05-12T12:30:00Z
        url:
          type: string
          description: URL to the product
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          type: string
          description: Absolute URL to the cover image of the product
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          type: string
          description: Product identifier from the shop
          format: string
        price:
          type: number
          description: Price of the product
          format: float
        categories:
          type: array
          items:
            type: string
          description: Category ID-s of the product
        parentId:
          type: string
          description: Parent product id of the product
          format: string
        s3Original:
          type: string
          description: S3 url of original image
          format: string
        s3ThumbAnalytics:
          type: string
          description: S3 thumbnail url of original image in 120x120 dimension for analytics section
          format: string
        s3ThumbEditor:
          type: string
          description: S3 thumbnail url of original image in 600x400 dimension for editor section
          format: string
        metaInfo:
          type: object
          description: Meta data of product such as description, vendor, producer, stock level, etc.
          example: {
            "description": "Shoes for sports",
            "brand": "addidas"
          }
        isDeleted:
          type: boolean
          description: product deleted from the shop's database
          example: true
    createUpdateProduct:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Product ID for which you requested the details
          format: string
          example: P11
        name:
          type: string
          description: Mandatory in case of creation**. Name of the product for which you requested the details
          format: string
          example: Iphone 11
        url:
          type: string
          description: URL to the product
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          type: string
          description: Absolute URL to the cover image of the product
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          type: string
          description: Product identifier from the shop
          format: string
        price:
          type: number
          description: Price of the product
          format: float
        categories:
          type: array
          items:
            type: string
          description: Category ID-s of the product
        parentId:
          type: string
          description: Parent product id of the product
          format: string
        metaInfo:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: integer
          description: Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10.
          example: {
            "description": "Shoes for sports",
            "brand": "addidas"
          }
        updateEnabled:
          type: boolean
          description: Facilitate to update the existing category in the same request
            (updateEnabled = true)
          example: false
          default: false
        deletedAt:
          type: string
          description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database

    createUpdateBatchProducts:
      type: object
      required:
        - products
      properties:
        products:
          description: "array of products objects"
          type: array
          items:
            $ref: '#/components/schemas/createUpdateProducts'
        updateEnabled:
          type: boolean
          description: Facilitate to update the existing categories in the same request
            (updateEnabled = true)
    createUpdateProducts:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Product ID for which you requested the details
          format: string
          example: P11
        name:
          type: string
          description: Mandatory in case of creation**. Name of the product for which you requested the details
          format: string
          example: Iphone 11
        url:
          type: string
          description: URL to the product
          format: string
          example: http://mydomain.com/product/electronics/product1
        imageUrl:
          type: string
          description: Absolute URL to the cover image of the product
          format: string
          example: http://mydomain.com/product-absoulte-url/img.jpeg
        sku:
          type: string
          description: Product identifier from the shop
          format: string
        price:
          type: number
          description: Price of the product
          format: float
        categories:
          type: array
          items:
            type: string
          description: Category ID-s of the product
        parentId:
          type: string
          description: Parent product id of the product
          format: string
        metaInfo:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: integer
          description: Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10.
          example: {
            "description": "Shoes for sports",
            "brand": "addidas"
          }
        deletedAt:
          type: string
          description: UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop's database
    createProductModel:
      type: object
      properties:
        id:
          type: integer
          description: ID of the Product when a new product is created
          format: int64
          example: 122
    createUpdateBatchProductsModel:
      type: object
      properties:
        createdCount:
          type: integer
          description: Number of the new created products
          format: int64
          example: 7
        updatedCount:
          type: integer
          description: Number of the existing products updated
          format: int64
          example: 5
    getCouponCollection:
      required:
        - id
        - name
        - defaultCoupon
        - createdAt
        - totalCoupons
        - remainingCoupons
      type: object
      properties:
        id:
          type: string
          description: The id of the collection
          format: uuidv4
          example: "23befbae-1505-47a8-bd27-e30ef739f32c"
        name:
          type: string
          description: The name of the collection
          format: uuidv4
          example: "SummerPromotions"
        defaultCoupon:
          type: string
          description: The default coupon of the collection
          example: 10 OFF
        createdAt:
          description: Datetime on which the collection was created
          type: string
          format: date-time
          example: 2023-01-06T05:03:47.053000000Z
        totalCoupons:
          description: Total coupons in the collection
          type: integer
          format: int64
          example: 10000
        remainingCoupons:
          description: Not sent coupons in the collection
          type: integer
          format: int64
          example: 5000
    sendWhatsappMessageTemplate:
      required:
        - senderNumber
        - templateId
        - contactNumbers
      type: object
      properties:
        templateId:
          type: integer
          description: ID of the template to send
          example: 123
        senderNumber:
          type: string
          format: mobile
          description: WhatsApp Number with country code. Example, 85264318721
          example: 919876543210
        # mediaUrl:
        #   type: string
        #   description: URL of the media to be sent
        #   format: url
        #   example: https://example.com/image.png
        params:
          type: object
          description: Pass the set of attributes to customize the template. For example, {"FNAME":"Joe", "LNAME":"Doe"}.
          example: { "FNAME": "Joe", "LNAME": "Doe" }
        contactNumbers:
          type: array
          description: List of phone numbers of the contacts
          items:
            type: string
            description: WhatsApp Number with country code. Example, 85264318721
            format: mobile
            example: 919876543210
    sendWhatsappMessageText:
      required:
        - senderNumber
        - contactNumbers
        - authType
        - text
      type: object
      properties:
        senderNumber:
          type: string
          format: mobile
          description: WhatsApp Number with country code. Example, 85264318721
          example: 919876543210
        text:
          type: string
          description: Text to be sent as message body (will be overridden if templateId is passed in the same request)
          example: Hi! There i am a message
        contactNumbers:
          type: array
          description: List of phone numbers of the contacts
          items:
            type: string
            description: WhatsApp Number with country code. Example, 85264318721
            format: mobile
            example: 919876543210
    getWhatsappEventReport:
      type: object
      properties:
        events:
          type: array
          items:
            required:
              - contactNumber
              - date
              - messageId
              - event
              - senderNumber
            type: object
            properties:
              contactNumber:
                type: string
                format: mobile
                description: WhatsApp Number with country code. Example, 85264318721
                example: 919876543210
              date:
                type: string
                description: UTC date-time on which the event has been generated
                example: 2017-03-12T12:30:00Z
              messageId:
                type: string
                description: Message ID which generated the event
                example: 23befbae-1505-47a8-bd27-e30ef739f32c
              event:
                type: string
                description: Event which occurred
                example: delivered
                enum:
                  - sent
                  - delivered
                  - read
                  - error
                  - unsubscribe
                  - reply
                  - soft-bounce
              reason:
                type: string
                description: Reason for the event (will be there in case of `error` and `soft-bounce` events)
                example: 23befbae-1505-47a8-bd27-e30ef739f32c
              body:
                type: string
                description: Text of the reply (will be there only in case of `reply` event with text)
                example: "Hi! I am a reply"
              mediaUrl:
                type: string
                format: url
                description: Url of the media reply (will be there only in case of `reply` event with media)
                example: "https://example.com/media.png"
              senderNumber:
                type: string
                format: mobile
                description: WhatsApp Number with country code. Example, 85264318721
                example: 919876543210
    getExternalFeedByUUID:
      type: object
      required:
        - id
        - name
        - url
        - authType
        - headers
        - maxRetries
        - cache
        - createdAt
        - modifiedAt
      properties:
        id:
          description: 'ID of the feed'
          type: string
          format: uuidv4
          example: 54377442-20a2-4c20-b761-d636c72de7b7
        name:
          description: 'Name of the feed'
          type: string
          example: New feed
        url:
          description: 'URL of the feed'
          type: string
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          type: string
          enum: [ basic, token, noAuth ]
          description: >
            Auth type of the feed:
            * `basic`
            * `token`
            * `noAuth`
        username:
          type: string
          description: Username for authType `basic`
          example: user
        password:
          type: string
          description: Password for authType `basic`
          example: password
        token:
          type: string
          description: Token for authType `token`
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          type: array
          description: Custom headers for the feed
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of the header
                example: userId
              value:
                type: string
                description: Value of the header
                example: 'user12345'
        maxRetries:
          type: integer
          description: Maximum number of retries on the feed url
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          type: boolean
          description: Toggle caching of feed url response
          example: true
        createdAt:
          description: 'Datetime on which the feed was created'
          type: string
          format: date-time
          example: '2022-10-06T05:03:47.053000000Z'
        modifiedAt:
          description: 'Datetime on which the feed was modified'
          type: string
          format: date-time
          example: '2022-10-06T05:03:47.053000000Z'
    getAllExternalFeeds:
      type: object
      properties:
        count:
          type: integer
          description: 'Total number of batches'
        feeds:
          type: array
          items:
            type: object
            required:
              - id
              - name
              - url
              - authType
              - headers
              - maxRetries
              - cache
              - createdAt
              - modifiedAt
            properties:
              id:
                description: 'ID of the feed'
                type: string
                format: uuidv4
                example: 54377442-20a2-4c20-b761-d636c72de7b7
              name:
                description: 'Name of the feed'
                type: string
                example: New feed
              url:
                description: 'URL of the feed'
                type: string
                format: url
                example: http://requestb.in/173lyyx1
              authType:
                type: string
                enum: [ basic, token, noAuth ]
                description: >
                  Auth type of the feed:
                  * `basic`
                  * `token`
                  * `noAuth`
              username:
                type: string
                description: Username for authType `basic`
                example: user
              password:
                type: string
                description: Password for authType `basic`
                example: password
              token:
                type: string
                description: Token for authType `token`
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              headers:
                type: array
                description: Custom headers for the feed
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the header
                      example: userId
                    value:
                      type: string
                      description: Value of the header
                      example: 'user12345'
              maxRetries:
                type: integer
                description: Maximum number of retries on the feed url
                example: 5
                minimum: 0
                maximum: 5
                default: 5
              cache:
                type: boolean
                description: Toggle caching of feed url response
                example: true
              createdAt:
                description: 'Datetime on which the feed was created'
                type: string
                format: date-time
                example: '2022-10-06T05:03:47.053000000Z'
              modifiedAt:
                description: 'Datetime on which the feed was modified'
                type: string
                format: date-time
                example: '2022-10-06T05:03:47.053000000Z'
    createExternalFeed:
      required:
        - name
        - url
      type: object
      properties:
        name:
          type: string
          description: Name of the feed
          example: New feed
        url:
          type: string
          description: URL of the feed
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          type: string
          enum: [ basic, token, noAuth ]
          default: noAuth
          description: >
            Auth type of the feed:
             * `basic`
             * `token`
             * `noAuth`
        username:
          type: string
          description: Username for authType `basic`
          example: user
        password:
          type: string
          description: Password for authType `basic`
          example: password
        token:
          type: string
          description: Token for authType `token`
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          type: array
          description: Custom headers for the feed
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of the header
                example: userId
              value:
                type: string
                description: Value of the header
                example: 'user12345'
          example:
            - name: header1
              value: value1
            - name: header2
              value: value2
        maxRetries:
          type: integer
          description: Maximum number of retries on the feed url
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          type: boolean
          description: Toggle caching of feed url response
          example: true
          default: false
    updateExternalFeed:
      type: object
      properties:
        name:
          type: string
          description: Name of the feed
          example: New feed
        url:
          type: string
          description: URL of the feed
          format: url
          example: http://requestb.in/173lyyx1
        authType:
          type: string
          enum: [ basic, token, noAuth ]
          description: >
            Auth type of the feed:
             * `basic`
             * `token`
             * `noAuth`
        username:
          type: string
          description: Username for authType `basic`
          example: user
        password:
          type: string
          description: Password for authType `basic`
          example: password
        token:
          type: string
          description: Token for authType `token`
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        headers:
          type: array
          description: Custom headers for the feed
          items:
            type: object
            properties:
              name:
                type: string
                description: Name of the header
                example: userId
              value:
                type: string
                description: Value of the header
                example: 'user12345'
          example:
            - name: header1
              value: value1
            - name: header2
              value: value2
        maxRetries:
          type: integer
          description: Maximum number of retries on the feed url
          example: 5
          minimum: 0
          maximum: 5
          default: 5
        cache:
          type: boolean
          description: Toggle caching of feed url response
          example: true
          default: false
    exportWebhooksHistory:
      required:
        - event
        - notifyURL
        - type
      type: object
      properties:
        days:
          type: integer
          description: Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_
          example: 7
        startDate:
          type: string
          description: Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate
          example: 2023-02-13
        endDate:
          type: string
          description: Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
          example: 2023-02-17
        sort:
          type: string
          description: Sorting order of records (asc or desc)
          example: desc
        type:
          type: string
          description: Filter the history based on webhook type
          example: transactional
          enum:
            - transactional
            - marketing
        event:
          type: string
          description: Filter the history for a specific event type
          example: request
          enum:
            - invalid_parameter
            - missing_parameter
            - hardBounce
            - softBounce
            - delivered
            - spam
            - request
            - opened
            - click
            - invalid
            - deferred
            - blocked
            - unsubscribed
            - error
            - uniqueOpened
            - loadedByProxy
            - allEvents
        notifyURL:
          type: string
          description: Webhook URL to receive CSV file link
          example: https://brevo.com
        webhookId:
          type: integer
          description: Filter the history for a specific webhook id
          example: 2345
        email:
          type: string
          description: Filter the history for a specific email
          example: example@brevo.com
        messageId:
          type: integer
          description: Filter the history for a specific message id. Applicable only for transactional webhooks.
          example: <23befbae-1505-47a8-bd27-e30ef739f32c@fr.sib>
  responses:
    createModel:
      description: successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createModel'
    createdProcessId:
      description: process id created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createdProcessId'
    createdBatchId:
      description: batch id created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createdBatchId'
  securitySchemes:
    api-key:
      type: apiKey
      description: The API key should be passed in the request headers as `api-key`
        for authentication.
      name: api-key
      in: header
x-samples-languages:
  - curl

