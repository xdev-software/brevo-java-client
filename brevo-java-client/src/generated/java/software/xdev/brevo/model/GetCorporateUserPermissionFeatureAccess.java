/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Granular feature permissions given to the user.
 */
@JsonPropertyOrder({
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_API_KEYS,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_MY_PLAN,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_USER_MANAGEMENT,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_APPS_MANAGEMENT,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_SUB_ORGANIZATION_GROUPS,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_CREATE_SUB_ORGANIZATIONS,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_MANAGE_SUB_ORGANIZATIONS,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_ANALYTICS,
  GetCorporateUserPermissionFeatureAccess.JSON_PROPERTY_SECURITY
})
@JsonTypeName("getCorporateUserPermission_feature_access")
public class GetCorporateUserPermissionFeatureAccess {
  public static final String JSON_PROPERTY_API_KEYS = "api_keys";
  @jakarta.annotation.Nullable
  private List<String> apiKeys = new ArrayList<>();

  public static final String JSON_PROPERTY_MY_PLAN = "my_plan";
  @jakarta.annotation.Nullable
  private List<String> myPlan = new ArrayList<>();

  public static final String JSON_PROPERTY_USER_MANAGEMENT = "user_management";
  @jakarta.annotation.Nullable
  private List<String> userManagement = new ArrayList<>();

  public static final String JSON_PROPERTY_APPS_MANAGEMENT = "apps_management";
  @jakarta.annotation.Nullable
  private List<String> appsManagement = new ArrayList<>();

  public static final String JSON_PROPERTY_SUB_ORGANIZATION_GROUPS = "sub_organization_groups";
  @jakarta.annotation.Nullable
  private List<String> subOrganizationGroups = new ArrayList<>();

  public static final String JSON_PROPERTY_CREATE_SUB_ORGANIZATIONS = "create_sub_organizations";
  @jakarta.annotation.Nullable
  private List<String> createSubOrganizations = new ArrayList<>();

  public static final String JSON_PROPERTY_MANAGE_SUB_ORGANIZATIONS = "manage_sub_organizations";
  @jakarta.annotation.Nullable
  private List<String> manageSubOrganizations = new ArrayList<>();

  public static final String JSON_PROPERTY_ANALYTICS = "analytics";
  @jakarta.annotation.Nullable
  private List<String> analytics = new ArrayList<>();

  public static final String JSON_PROPERTY_SECURITY = "security";
  @jakarta.annotation.Nullable
  private List<String> security = new ArrayList<>();

  public GetCorporateUserPermissionFeatureAccess() {
  }

  public GetCorporateUserPermissionFeatureAccess apiKeys(@jakarta.annotation.Nullable List<String> apiKeys) {
    
    this.apiKeys = apiKeys;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addApiKeysItem(String apiKeysItem) {
    if (this.apiKeys == null) {
      this.apiKeys = new ArrayList<>();
    }
    this.apiKeys.add(apiKeysItem);
    return this;
  }

  /**
   * Permission on api keys
   * @return apiKeys
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_API_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getApiKeys() {
    return apiKeys;
  }


  @JsonProperty(JSON_PROPERTY_API_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiKeys(@jakarta.annotation.Nullable List<String> apiKeys) {
    this.apiKeys = apiKeys;
  }

  public GetCorporateUserPermissionFeatureAccess myPlan(@jakarta.annotation.Nullable List<String> myPlan) {
    
    this.myPlan = myPlan;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addMyPlanItem(String myPlanItem) {
    if (this.myPlan == null) {
      this.myPlan = new ArrayList<>();
    }
    this.myPlan.add(myPlanItem);
    return this;
  }

  /**
   * Permission on my plan
   * @return myPlan
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMyPlan() {
    return myPlan;
  }


  @JsonProperty(JSON_PROPERTY_MY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMyPlan(@jakarta.annotation.Nullable List<String> myPlan) {
    this.myPlan = myPlan;
  }

  public GetCorporateUserPermissionFeatureAccess userManagement(@jakarta.annotation.Nullable List<String> userManagement) {
    
    this.userManagement = userManagement;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addUserManagementItem(String userManagementItem) {
    if (this.userManagement == null) {
      this.userManagement = new ArrayList<>();
    }
    this.userManagement.add(userManagementItem);
    return this;
  }

  /**
   * Permission on user management
   * @return userManagement
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUserManagement() {
    return userManagement;
  }


  @JsonProperty(JSON_PROPERTY_USER_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserManagement(@jakarta.annotation.Nullable List<String> userManagement) {
    this.userManagement = userManagement;
  }

  public GetCorporateUserPermissionFeatureAccess appsManagement(@jakarta.annotation.Nullable List<String> appsManagement) {
    
    this.appsManagement = appsManagement;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addAppsManagementItem(String appsManagementItem) {
    if (this.appsManagement == null) {
      this.appsManagement = new ArrayList<>();
    }
    this.appsManagement.add(appsManagementItem);
    return this;
  }

  /**
   * Permission on apps management
   * @return appsManagement
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPS_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAppsManagement() {
    return appsManagement;
  }


  @JsonProperty(JSON_PROPERTY_APPS_MANAGEMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppsManagement(@jakarta.annotation.Nullable List<String> appsManagement) {
    this.appsManagement = appsManagement;
  }

  public GetCorporateUserPermissionFeatureAccess subOrganizationGroups(@jakarta.annotation.Nullable List<String> subOrganizationGroups) {
    
    this.subOrganizationGroups = subOrganizationGroups;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addSubOrganizationGroupsItem(String subOrganizationGroupsItem) {
    if (this.subOrganizationGroups == null) {
      this.subOrganizationGroups = new ArrayList<>();
    }
    this.subOrganizationGroups.add(subOrganizationGroupsItem);
    return this;
  }

  /**
   * Permission on groups
   * @return subOrganizationGroups
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_ORGANIZATION_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSubOrganizationGroups() {
    return subOrganizationGroups;
  }


  @JsonProperty(JSON_PROPERTY_SUB_ORGANIZATION_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubOrganizationGroups(@jakarta.annotation.Nullable List<String> subOrganizationGroups) {
    this.subOrganizationGroups = subOrganizationGroups;
  }

  public GetCorporateUserPermissionFeatureAccess createSubOrganizations(@jakarta.annotation.Nullable List<String> createSubOrganizations) {
    
    this.createSubOrganizations = createSubOrganizations;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addCreateSubOrganizationsItem(String createSubOrganizationsItem) {
    if (this.createSubOrganizations == null) {
      this.createSubOrganizations = new ArrayList<>();
    }
    this.createSubOrganizations.add(createSubOrganizationsItem);
    return this;
  }

  /**
   * Permission on create sub-accounts
   * @return createSubOrganizations
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_SUB_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCreateSubOrganizations() {
    return createSubOrganizations;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_SUB_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateSubOrganizations(@jakarta.annotation.Nullable List<String> createSubOrganizations) {
    this.createSubOrganizations = createSubOrganizations;
  }

  public GetCorporateUserPermissionFeatureAccess manageSubOrganizations(@jakarta.annotation.Nullable List<String> manageSubOrganizations) {
    
    this.manageSubOrganizations = manageSubOrganizations;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addManageSubOrganizationsItem(String manageSubOrganizationsItem) {
    if (this.manageSubOrganizations == null) {
      this.manageSubOrganizations = new ArrayList<>();
    }
    this.manageSubOrganizations.add(manageSubOrganizationsItem);
    return this;
  }

  /**
   * Permission on manage sub-accounts
   * @return manageSubOrganizations
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANAGE_SUB_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getManageSubOrganizations() {
    return manageSubOrganizations;
  }


  @JsonProperty(JSON_PROPERTY_MANAGE_SUB_ORGANIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManageSubOrganizations(@jakarta.annotation.Nullable List<String> manageSubOrganizations) {
    this.manageSubOrganizations = manageSubOrganizations;
  }

  public GetCorporateUserPermissionFeatureAccess analytics(@jakarta.annotation.Nullable List<String> analytics) {
    
    this.analytics = analytics;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addAnalyticsItem(String analyticsItem) {
    if (this.analytics == null) {
      this.analytics = new ArrayList<>();
    }
    this.analytics.add(analyticsItem);
    return this;
  }

  /**
   * Permission on analytics
   * @return analytics
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAnalytics() {
    return analytics;
  }


  @JsonProperty(JSON_PROPERTY_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnalytics(@jakarta.annotation.Nullable List<String> analytics) {
    this.analytics = analytics;
  }

  public GetCorporateUserPermissionFeatureAccess security(@jakarta.annotation.Nullable List<String> security) {
    
    this.security = security;
    return this;
  }

  public GetCorporateUserPermissionFeatureAccess addSecurityItem(String securityItem) {
    if (this.security == null) {
      this.security = new ArrayList<>();
    }
    this.security.add(securityItem);
    return this;
  }

  /**
   * Permission on security
   * @return security
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSecurity() {
    return security;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurity(@jakarta.annotation.Nullable List<String> security) {
    this.security = security;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCorporateUserPermissionFeatureAccess getCorporateUserPermissionFeatureAccess = (GetCorporateUserPermissionFeatureAccess) o;
    return Objects.equals(this.apiKeys, getCorporateUserPermissionFeatureAccess.apiKeys) &&
        Objects.equals(this.myPlan, getCorporateUserPermissionFeatureAccess.myPlan) &&
        Objects.equals(this.userManagement, getCorporateUserPermissionFeatureAccess.userManagement) &&
        Objects.equals(this.appsManagement, getCorporateUserPermissionFeatureAccess.appsManagement) &&
        Objects.equals(this.subOrganizationGroups, getCorporateUserPermissionFeatureAccess.subOrganizationGroups) &&
        Objects.equals(this.createSubOrganizations, getCorporateUserPermissionFeatureAccess.createSubOrganizations) &&
        Objects.equals(this.manageSubOrganizations, getCorporateUserPermissionFeatureAccess.manageSubOrganizations) &&
        Objects.equals(this.analytics, getCorporateUserPermissionFeatureAccess.analytics) &&
        Objects.equals(this.security, getCorporateUserPermissionFeatureAccess.security);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeys, myPlan, userManagement, appsManagement, subOrganizationGroups, createSubOrganizations, manageSubOrganizations, analytics, security);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCorporateUserPermissionFeatureAccess {\n");
    sb.append("    apiKeys: ").append(toIndentedString(apiKeys)).append("\n");
    sb.append("    myPlan: ").append(toIndentedString(myPlan)).append("\n");
    sb.append("    userManagement: ").append(toIndentedString(userManagement)).append("\n");
    sb.append("    appsManagement: ").append(toIndentedString(appsManagement)).append("\n");
    sb.append("    subOrganizationGroups: ").append(toIndentedString(subOrganizationGroups)).append("\n");
    sb.append("    createSubOrganizations: ").append(toIndentedString(createSubOrganizations)).append("\n");
    sb.append("    manageSubOrganizations: ").append(toIndentedString(manageSubOrganizations)).append("\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `api_keys` to the URL query string
    if (getApiKeys() != null) {
      for (int i = 0; i < getApiKeys().size(); i++) {
        try {
          joiner.add(String.format("%sapi_keys%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getApiKeys().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `my_plan` to the URL query string
    if (getMyPlan() != null) {
      for (int i = 0; i < getMyPlan().size(); i++) {
        try {
          joiner.add(String.format("%smy_plan%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getMyPlan().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `user_management` to the URL query string
    if (getUserManagement() != null) {
      for (int i = 0; i < getUserManagement().size(); i++) {
        try {
          joiner.add(String.format("%suser_management%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getUserManagement().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `apps_management` to the URL query string
    if (getAppsManagement() != null) {
      for (int i = 0; i < getAppsManagement().size(); i++) {
        try {
          joiner.add(String.format("%sapps_management%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAppsManagement().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `sub_organization_groups` to the URL query string
    if (getSubOrganizationGroups() != null) {
      for (int i = 0; i < getSubOrganizationGroups().size(); i++) {
        try {
          joiner.add(String.format("%ssub_organization_groups%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSubOrganizationGroups().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `create_sub_organizations` to the URL query string
    if (getCreateSubOrganizations() != null) {
      for (int i = 0; i < getCreateSubOrganizations().size(); i++) {
        try {
          joiner.add(String.format("%screate_sub_organizations%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getCreateSubOrganizations().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `manage_sub_organizations` to the URL query string
    if (getManageSubOrganizations() != null) {
      for (int i = 0; i < getManageSubOrganizations().size(); i++) {
        try {
          joiner.add(String.format("%smanage_sub_organizations%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getManageSubOrganizations().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `analytics` to the URL query string
    if (getAnalytics() != null) {
      for (int i = 0; i < getAnalytics().size(); i++) {
        try {
          joiner.add(String.format("%sanalytics%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getAnalytics().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `security` to the URL query string
    if (getSecurity() != null) {
      for (int i = 0; i < getSecurity().size(); i++) {
        try {
          joiner.add(String.format("%ssecurity%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getSecurity().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

