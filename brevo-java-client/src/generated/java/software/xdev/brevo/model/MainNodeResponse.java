/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainNodeResponse
 */
@JsonPropertyOrder({
  MainNodeResponse.JSON_PROPERTY_ARGS,
  MainNodeResponse.JSON_PROPERTY_ARRAY,
  MainNodeResponse.JSON_PROPERTY_BOOLEAN,
  MainNodeResponse.JSON_PROPERTY_DESCRIPTION,
  MainNodeResponse.JSON_PROPERTY_FLOAT,
  MainNodeResponse.JSON_PROPERTY_INT,
  MainNodeResponse.JSON_PROPERTY_OP,
  MainNodeResponse.JSON_PROPERTY_STRING
})
@JsonTypeName("main.nodeResponse")
public class MainNodeResponse {
  public static final String JSON_PROPERTY_ARGS = "args";
  @jakarta.annotation.Nullable
  private List<MainNodeResponse> args = new ArrayList<>();

  public static final String JSON_PROPERTY_ARRAY = "array";
  @jakarta.annotation.Nullable
  private List<MainNodeResponse> array = new ArrayList<>();

  public static final String JSON_PROPERTY_BOOLEAN = "boolean";
  @jakarta.annotation.Nullable
  private Boolean _boolean;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_FLOAT = "float";
  @jakarta.annotation.Nullable
  private BigDecimal _float;

  public static final String JSON_PROPERTY_INT = "int";
  @jakarta.annotation.Nullable
  private Long _int;

  public static final String JSON_PROPERTY_OP = "op";
  @jakarta.annotation.Nullable
  private String op;

  public static final String JSON_PROPERTY_STRING = "string";
  @jakarta.annotation.Nullable
  private String string;

  public MainNodeResponse() {
  }

  public MainNodeResponse args(@jakarta.annotation.Nullable List<MainNodeResponse> args) {
    
    this.args = args;
    return this;
  }

  public MainNodeResponse addArgsItem(MainNodeResponse argsItem) {
    if (this.args == null) {
      this.args = new ArrayList<>();
    }
    this.args.add(argsItem);
    return this;
  }

  /**
   * array[object]
   * @return args
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MainNodeResponse> getArgs() {
    return args;
  }


  @JsonProperty(JSON_PROPERTY_ARGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArgs(@jakarta.annotation.Nullable List<MainNodeResponse> args) {
    this.args = args;
  }

  public MainNodeResponse array(@jakarta.annotation.Nullable List<MainNodeResponse> array) {
    
    this.array = array;
    return this;
  }

  public MainNodeResponse addArrayItem(MainNodeResponse arrayItem) {
    if (this.array == null) {
      this.array = new ArrayList<>();
    }
    this.array.add(arrayItem);
    return this;
  }

  /**
   * Array values for rule definition
   * @return array
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MainNodeResponse> getArray() {
    return array;
  }


  @JsonProperty(JSON_PROPERTY_ARRAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArray(@jakarta.annotation.Nullable List<MainNodeResponse> array) {
    this.array = array;
  }

  public MainNodeResponse _boolean(@jakarta.annotation.Nullable Boolean _boolean) {
    
    this._boolean = _boolean;
    return this;
  }

  /**
   * Boolean values for rule definition
   * @return _boolean
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOOLEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBoolean() {
    return _boolean;
  }


  @JsonProperty(JSON_PROPERTY_BOOLEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoolean(@jakarta.annotation.Nullable Boolean _boolean) {
    this._boolean = _boolean;
  }

  public MainNodeResponse description(@jakarta.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * Description for rule definition
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }

  public MainNodeResponse _float(@jakarta.annotation.Nullable BigDecimal _float) {
    
    this._float = _float;
    return this;
  }

  /**
   * Float values for rule definition
   * @return _float
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLOAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFloat() {
    return _float;
  }


  @JsonProperty(JSON_PROPERTY_FLOAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFloat(@jakarta.annotation.Nullable BigDecimal _float) {
    this._float = _float;
  }

  public MainNodeResponse _int(@jakarta.annotation.Nullable Long _int) {
    
    this._int = _int;
    return this;
  }

  /**
   * int64
   * @return _int
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInt() {
    return _int;
  }


  @JsonProperty(JSON_PROPERTY_INT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInt(@jakarta.annotation.Nullable Long _int) {
    this._int = _int;
  }

  public MainNodeResponse op(@jakarta.annotation.Nullable String op) {
    
    this.op = op;
    return this;
  }

  /**
   * Operator selected for rule definition
   * @return op
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOp() {
    return op;
  }


  @JsonProperty(JSON_PROPERTY_OP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOp(@jakarta.annotation.Nullable String op) {
    this.op = op;
  }

  public MainNodeResponse string(@jakarta.annotation.Nullable String string) {
    
    this.string = string;
    return this;
  }

  /**
   * Boolean values for rule definition
   * @return string
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getString() {
    return string;
  }


  @JsonProperty(JSON_PROPERTY_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setString(@jakarta.annotation.Nullable String string) {
    this.string = string;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainNodeResponse mainNodeResponse = (MainNodeResponse) o;
    return Objects.equals(this.args, mainNodeResponse.args) &&
        Objects.equals(this.array, mainNodeResponse.array) &&
        Objects.equals(this._boolean, mainNodeResponse._boolean) &&
        Objects.equals(this.description, mainNodeResponse.description) &&
        Objects.equals(this._float, mainNodeResponse._float) &&
        Objects.equals(this._int, mainNodeResponse._int) &&
        Objects.equals(this.op, mainNodeResponse.op) &&
        Objects.equals(this.string, mainNodeResponse.string);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, array, _boolean, description, _float, _int, op, string);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainNodeResponse {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    array: ").append(toIndentedString(array)).append("\n");
    sb.append("    _boolean: ").append(toIndentedString(_boolean)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _float: ").append(toIndentedString(_float)).append("\n");
    sb.append("    _int: ").append(toIndentedString(_int)).append("\n");
    sb.append("    op: ").append(toIndentedString(op)).append("\n");
    sb.append("    string: ").append(toIndentedString(string)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `args` to the URL query string
    if (getArgs() != null) {
      for (int i = 0; i < getArgs().size(); i++) {
        if (getArgs().get(i) != null) {
          joiner.add(getArgs().get(i).toUrlQueryString(String.format("%sargs%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `array` to the URL query string
    if (getArray() != null) {
      for (int i = 0; i < getArray().size(); i++) {
        if (getArray().get(i) != null) {
          joiner.add(getArray().get(i).toUrlQueryString(String.format("%sarray%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `boolean` to the URL query string
    if (getBoolean() != null) {
      try {
        joiner.add(String.format("%sboolean%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBoolean()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      try {
        joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `float` to the URL query string
    if (getFloat() != null) {
      try {
        joiner.add(String.format("%sfloat%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFloat()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `int` to the URL query string
    if (getInt() != null) {
      try {
        joiner.add(String.format("%sint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `op` to the URL query string
    if (getOp() != null) {
      try {
        joiner.add(String.format("%sop%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `string` to the URL query string
    if (getString() != null) {
      try {
        joiner.add(String.format("%sstring%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getString()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

