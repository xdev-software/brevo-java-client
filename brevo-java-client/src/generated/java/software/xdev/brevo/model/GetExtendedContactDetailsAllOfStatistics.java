/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.GetExtendedContactDetailsAllOfStatisticsClicked;
import software.xdev.brevo.model.GetExtendedContactDetailsAllOfStatisticsMessagesSent;
import software.xdev.brevo.model.GetExtendedContactDetailsAllOfStatisticsOpened;
import software.xdev.brevo.model.GetExtendedContactDetailsAllOfStatisticsUnsubscriptions;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Campaign statistics of the contact
 */
@JsonPropertyOrder({
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_MESSAGES_SENT,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_HARD_BOUNCES,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_SOFT_BOUNCES,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_COMPLAINTS,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_UNSUBSCRIPTIONS,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_OPENED,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_CLICKED,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_TRANSAC_ATTRIBUTES,
  GetExtendedContactDetailsAllOfStatistics.JSON_PROPERTY_DELIVERED
})
@JsonTypeName("getExtendedContactDetails_allOf_statistics")
public class GetExtendedContactDetailsAllOfStatistics {
  public static final String JSON_PROPERTY_MESSAGES_SENT = "messagesSent";
  private List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> messagesSent;

  public static final String JSON_PROPERTY_HARD_BOUNCES = "hardBounces";
  private List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> hardBounces;

  public static final String JSON_PROPERTY_SOFT_BOUNCES = "softBounces";
  private List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> softBounces;

  public static final String JSON_PROPERTY_COMPLAINTS = "complaints";
  private List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> complaints;

  public static final String JSON_PROPERTY_UNSUBSCRIPTIONS = "unsubscriptions";
  private GetExtendedContactDetailsAllOfStatisticsUnsubscriptions unsubscriptions;

  public static final String JSON_PROPERTY_OPENED = "opened";
  private List<GetExtendedContactDetailsAllOfStatisticsOpened> opened;

  public static final String JSON_PROPERTY_CLICKED = "clicked";
  private List<GetExtendedContactDetailsAllOfStatisticsClicked> clicked;

  public static final String JSON_PROPERTY_TRANSAC_ATTRIBUTES = "transacAttributes";
  private List<Object> transacAttributes;

  public static final String JSON_PROPERTY_DELIVERED = "delivered";
  private List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> delivered;

  public GetExtendedContactDetailsAllOfStatistics() {
  }

  public GetExtendedContactDetailsAllOfStatistics messagesSent(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> messagesSent) {
    
    this.messagesSent = messagesSent;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addMessagesSentItem(GetExtendedContactDetailsAllOfStatisticsMessagesSent messagesSentItem) {
    if (this.messagesSent == null) {
      this.messagesSent = new ArrayList<>();
    }
    this.messagesSent.add(messagesSentItem);
    return this;
  }

   /**
   * Listing of the sent campaign for the contact
   * @return messagesSent
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGES_SENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> getMessagesSent() {
    return messagesSent;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGES_SENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessagesSent(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> messagesSent) {
    this.messagesSent = messagesSent;
  }


  public GetExtendedContactDetailsAllOfStatistics hardBounces(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> hardBounces) {
    
    this.hardBounces = hardBounces;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addHardBouncesItem(GetExtendedContactDetailsAllOfStatisticsMessagesSent hardBouncesItem) {
    if (this.hardBounces == null) {
      this.hardBounces = new ArrayList<>();
    }
    this.hardBounces.add(hardBouncesItem);
    return this;
  }

   /**
   * Listing of the hardbounes generated by the contact
   * @return hardBounces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> getHardBounces() {
    return hardBounces;
  }


  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHardBounces(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> hardBounces) {
    this.hardBounces = hardBounces;
  }


  public GetExtendedContactDetailsAllOfStatistics softBounces(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> softBounces) {
    
    this.softBounces = softBounces;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addSoftBouncesItem(GetExtendedContactDetailsAllOfStatisticsMessagesSent softBouncesItem) {
    if (this.softBounces == null) {
      this.softBounces = new ArrayList<>();
    }
    this.softBounces.add(softBouncesItem);
    return this;
  }

   /**
   * Listing of the softbounes generated by the contact
   * @return softBounces
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> getSoftBounces() {
    return softBounces;
  }


  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoftBounces(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> softBounces) {
    this.softBounces = softBounces;
  }


  public GetExtendedContactDetailsAllOfStatistics complaints(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> complaints) {
    
    this.complaints = complaints;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addComplaintsItem(GetExtendedContactDetailsAllOfStatisticsMessagesSent complaintsItem) {
    if (this.complaints == null) {
      this.complaints = new ArrayList<>();
    }
    this.complaints.add(complaintsItem);
    return this;
  }

   /**
   * Listing of the complaints generated by the contact
   * @return complaints
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPLAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> getComplaints() {
    return complaints;
  }


  @JsonProperty(JSON_PROPERTY_COMPLAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComplaints(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> complaints) {
    this.complaints = complaints;
  }


  public GetExtendedContactDetailsAllOfStatistics unsubscriptions(GetExtendedContactDetailsAllOfStatisticsUnsubscriptions unsubscriptions) {
    
    this.unsubscriptions = unsubscriptions;
    return this;
  }

   /**
   * Get unsubscriptions
   * @return unsubscriptions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNSUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GetExtendedContactDetailsAllOfStatisticsUnsubscriptions getUnsubscriptions() {
    return unsubscriptions;
  }


  @JsonProperty(JSON_PROPERTY_UNSUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnsubscriptions(GetExtendedContactDetailsAllOfStatisticsUnsubscriptions unsubscriptions) {
    this.unsubscriptions = unsubscriptions;
  }


  public GetExtendedContactDetailsAllOfStatistics opened(List<GetExtendedContactDetailsAllOfStatisticsOpened> opened) {
    
    this.opened = opened;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addOpenedItem(GetExtendedContactDetailsAllOfStatisticsOpened openedItem) {
    if (this.opened == null) {
      this.opened = new ArrayList<>();
    }
    this.opened.add(openedItem);
    return this;
  }

   /**
   * Listing of the openings generated by the contact
   * @return opened
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPENED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsOpened> getOpened() {
    return opened;
  }


  @JsonProperty(JSON_PROPERTY_OPENED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpened(List<GetExtendedContactDetailsAllOfStatisticsOpened> opened) {
    this.opened = opened;
  }


  public GetExtendedContactDetailsAllOfStatistics clicked(List<GetExtendedContactDetailsAllOfStatisticsClicked> clicked) {
    
    this.clicked = clicked;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addClickedItem(GetExtendedContactDetailsAllOfStatisticsClicked clickedItem) {
    if (this.clicked == null) {
      this.clicked = new ArrayList<>();
    }
    this.clicked.add(clickedItem);
    return this;
  }

   /**
   * Listing of the clicks generated by the contact
   * @return clicked
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLICKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsClicked> getClicked() {
    return clicked;
  }


  @JsonProperty(JSON_PROPERTY_CLICKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClicked(List<GetExtendedContactDetailsAllOfStatisticsClicked> clicked) {
    this.clicked = clicked;
  }


  public GetExtendedContactDetailsAllOfStatistics transacAttributes(List<Object> transacAttributes) {
    
    this.transacAttributes = transacAttributes;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addTransacAttributesItem(Object transacAttributesItem) {
    if (this.transacAttributes == null) {
      this.transacAttributes = new ArrayList<>();
    }
    this.transacAttributes.add(transacAttributesItem);
    return this;
  }

   /**
   * Listing of the transactional attributes for the contact
   * @return transacAttributes
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSAC_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getTransacAttributes() {
    return transacAttributes;
  }


  @JsonProperty(JSON_PROPERTY_TRANSAC_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransacAttributes(List<Object> transacAttributes) {
    this.transacAttributes = transacAttributes;
  }


  public GetExtendedContactDetailsAllOfStatistics delivered(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> delivered) {
    
    this.delivered = delivered;
    return this;
  }

  public GetExtendedContactDetailsAllOfStatistics addDeliveredItem(GetExtendedContactDetailsAllOfStatisticsMessagesSent deliveredItem) {
    if (this.delivered == null) {
      this.delivered = new ArrayList<>();
    }
    this.delivered.add(deliveredItem);
    return this;
  }

   /**
   * Listing of the delivered campaign for the contact
   * @return delivered
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> getDelivered() {
    return delivered;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelivered(List<GetExtendedContactDetailsAllOfStatisticsMessagesSent> delivered) {
    this.delivered = delivered;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExtendedContactDetailsAllOfStatistics getExtendedContactDetailsAllOfStatistics = (GetExtendedContactDetailsAllOfStatistics) o;
    return Objects.equals(this.messagesSent, getExtendedContactDetailsAllOfStatistics.messagesSent) &&
        Objects.equals(this.hardBounces, getExtendedContactDetailsAllOfStatistics.hardBounces) &&
        Objects.equals(this.softBounces, getExtendedContactDetailsAllOfStatistics.softBounces) &&
        Objects.equals(this.complaints, getExtendedContactDetailsAllOfStatistics.complaints) &&
        Objects.equals(this.unsubscriptions, getExtendedContactDetailsAllOfStatistics.unsubscriptions) &&
        Objects.equals(this.opened, getExtendedContactDetailsAllOfStatistics.opened) &&
        Objects.equals(this.clicked, getExtendedContactDetailsAllOfStatistics.clicked) &&
        Objects.equals(this.transacAttributes, getExtendedContactDetailsAllOfStatistics.transacAttributes) &&
        Objects.equals(this.delivered, getExtendedContactDetailsAllOfStatistics.delivered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messagesSent, hardBounces, softBounces, complaints, unsubscriptions, opened, clicked, transacAttributes, delivered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExtendedContactDetailsAllOfStatistics {\n");
    sb.append("    messagesSent: ").append(toIndentedString(messagesSent)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    unsubscriptions: ").append(toIndentedString(unsubscriptions)).append("\n");
    sb.append("    opened: ").append(toIndentedString(opened)).append("\n");
    sb.append("    clicked: ").append(toIndentedString(clicked)).append("\n");
    sb.append("    transacAttributes: ").append(toIndentedString(transacAttributes)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `messagesSent` to the URL query string
    if (getMessagesSent() != null) {
      for (int i = 0; i < getMessagesSent().size(); i++) {
        if (getMessagesSent().get(i) != null) {
          joiner.add(getMessagesSent().get(i).toUrlQueryString(String.format("%smessagesSent%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `hardBounces` to the URL query string
    if (getHardBounces() != null) {
      for (int i = 0; i < getHardBounces().size(); i++) {
        if (getHardBounces().get(i) != null) {
          joiner.add(getHardBounces().get(i).toUrlQueryString(String.format("%shardBounces%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `softBounces` to the URL query string
    if (getSoftBounces() != null) {
      for (int i = 0; i < getSoftBounces().size(); i++) {
        if (getSoftBounces().get(i) != null) {
          joiner.add(getSoftBounces().get(i).toUrlQueryString(String.format("%ssoftBounces%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `complaints` to the URL query string
    if (getComplaints() != null) {
      for (int i = 0; i < getComplaints().size(); i++) {
        if (getComplaints().get(i) != null) {
          joiner.add(getComplaints().get(i).toUrlQueryString(String.format("%scomplaints%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `unsubscriptions` to the URL query string
    if (getUnsubscriptions() != null) {
      joiner.add(getUnsubscriptions().toUrlQueryString(prefix + "unsubscriptions" + suffix));
    }

    // add `opened` to the URL query string
    if (getOpened() != null) {
      for (int i = 0; i < getOpened().size(); i++) {
        if (getOpened().get(i) != null) {
          joiner.add(getOpened().get(i).toUrlQueryString(String.format("%sopened%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `clicked` to the URL query string
    if (getClicked() != null) {
      for (int i = 0; i < getClicked().size(); i++) {
        if (getClicked().get(i) != null) {
          joiner.add(getClicked().get(i).toUrlQueryString(String.format("%sclicked%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `transacAttributes` to the URL query string
    if (getTransacAttributes() != null) {
      for (int i = 0; i < getTransacAttributes().size(); i++) {
        try {
          joiner.add(String.format("%stransacAttributes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getTransacAttributes().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `delivered` to the URL query string
    if (getDelivered() != null) {
      for (int i = 0; i < getDelivered().size(); i++) {
        if (getDelivered().get(i) != null) {
          joiner.add(getDelivered().get(i).toUrlQueryString(String.format("%sdelivered%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

