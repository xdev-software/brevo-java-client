/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import software.xdev.brevo.model.AbTestVersionStats;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * AbTestCampaignResultStatistics
 */
@JsonPropertyOrder({
  AbTestCampaignResultStatistics.JSON_PROPERTY_OPENERS,
  AbTestCampaignResultStatistics.JSON_PROPERTY_CLICKS,
  AbTestCampaignResultStatistics.JSON_PROPERTY_UNSUBSCRIBED,
  AbTestCampaignResultStatistics.JSON_PROPERTY_HARD_BOUNCES,
  AbTestCampaignResultStatistics.JSON_PROPERTY_SOFT_BOUNCES,
  AbTestCampaignResultStatistics.JSON_PROPERTY_COMPLAINTS
})
@JsonTypeName("abTestCampaignResult_statistics")
public class AbTestCampaignResultStatistics {
  public static final String JSON_PROPERTY_OPENERS = "openers";
  private AbTestVersionStats openers;

  public static final String JSON_PROPERTY_CLICKS = "clicks";
  private AbTestVersionStats clicks;

  public static final String JSON_PROPERTY_UNSUBSCRIBED = "unsubscribed";
  private AbTestVersionStats unsubscribed;

  public static final String JSON_PROPERTY_HARD_BOUNCES = "hardBounces";
  private AbTestVersionStats hardBounces;

  public static final String JSON_PROPERTY_SOFT_BOUNCES = "softBounces";
  private AbTestVersionStats softBounces;

  public static final String JSON_PROPERTY_COMPLAINTS = "complaints";
  private AbTestVersionStats complaints;

  public AbTestCampaignResultStatistics() {
  }

  public AbTestCampaignResultStatistics openers(AbTestVersionStats openers) {
    
    this.openers = openers;
    return this;
  }

   /**
   * Get openers
   * @return openers
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OPENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getOpeners() {
    return openers;
  }


  @JsonProperty(JSON_PROPERTY_OPENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOpeners(AbTestVersionStats openers) {
    this.openers = openers;
  }

  public AbTestCampaignResultStatistics clicks(AbTestVersionStats clicks) {
    
    this.clicks = clicks;
    return this;
  }

   /**
   * Get clicks
   * @return clicks
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getClicks() {
    return clicks;
  }


  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClicks(AbTestVersionStats clicks) {
    this.clicks = clicks;
  }

  public AbTestCampaignResultStatistics unsubscribed(AbTestVersionStats unsubscribed) {
    
    this.unsubscribed = unsubscribed;
    return this;
  }

   /**
   * Get unsubscribed
   * @return unsubscribed
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getUnsubscribed() {
    return unsubscribed;
  }


  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnsubscribed(AbTestVersionStats unsubscribed) {
    this.unsubscribed = unsubscribed;
  }

  public AbTestCampaignResultStatistics hardBounces(AbTestVersionStats hardBounces) {
    
    this.hardBounces = hardBounces;
    return this;
  }

   /**
   * Get hardBounces
   * @return hardBounces
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getHardBounces() {
    return hardBounces;
  }


  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHardBounces(AbTestVersionStats hardBounces) {
    this.hardBounces = hardBounces;
  }

  public AbTestCampaignResultStatistics softBounces(AbTestVersionStats softBounces) {
    
    this.softBounces = softBounces;
    return this;
  }

   /**
   * Get softBounces
   * @return softBounces
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getSoftBounces() {
    return softBounces;
  }


  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSoftBounces(AbTestVersionStats softBounces) {
    this.softBounces = softBounces;
  }

  public AbTestCampaignResultStatistics complaints(AbTestVersionStats complaints) {
    
    this.complaints = complaints;
    return this;
  }

   /**
   * Get complaints
   * @return complaints
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPLAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public AbTestVersionStats getComplaints() {
    return complaints;
  }


  @JsonProperty(JSON_PROPERTY_COMPLAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComplaints(AbTestVersionStats complaints) {
    this.complaints = complaints;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbTestCampaignResultStatistics abTestCampaignResultStatistics = (AbTestCampaignResultStatistics) o;
    return Objects.equals(this.openers, abTestCampaignResultStatistics.openers) &&
        Objects.equals(this.clicks, abTestCampaignResultStatistics.clicks) &&
        Objects.equals(this.unsubscribed, abTestCampaignResultStatistics.unsubscribed) &&
        Objects.equals(this.hardBounces, abTestCampaignResultStatistics.hardBounces) &&
        Objects.equals(this.softBounces, abTestCampaignResultStatistics.softBounces) &&
        Objects.equals(this.complaints, abTestCampaignResultStatistics.complaints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openers, clicks, unsubscribed, hardBounces, softBounces, complaints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbTestCampaignResultStatistics {\n");
    sb.append("    openers: ").append(toIndentedString(openers)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `openers` to the URL query string
    if (getOpeners() != null) {
      joiner.add(getOpeners().toUrlQueryString(prefix + "openers" + suffix));
    }

    // add `clicks` to the URL query string
    if (getClicks() != null) {
      joiner.add(getClicks().toUrlQueryString(prefix + "clicks" + suffix));
    }

    // add `unsubscribed` to the URL query string
    if (getUnsubscribed() != null) {
      joiner.add(getUnsubscribed().toUrlQueryString(prefix + "unsubscribed" + suffix));
    }

    // add `hardBounces` to the URL query string
    if (getHardBounces() != null) {
      joiner.add(getHardBounces().toUrlQueryString(prefix + "hardBounces" + suffix));
    }

    // add `softBounces` to the URL query string
    if (getSoftBounces() != null) {
      joiner.add(getSoftBounces().toUrlQueryString(prefix + "softBounces" + suffix));
    }

    // add `complaints` to the URL query string
    if (getComplaints() != null) {
      joiner.add(getComplaints().toUrlQueryString(prefix + "complaints" + suffix));
    }

    return joiner.toString();
  }

}

