/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Features details to update
 */
@JsonPropertyOrder({
  SubAccountUpdatePlanRequestFeatures.JSON_PROPERTY_USERS,
  SubAccountUpdatePlanRequestFeatures.JSON_PROPERTY_LANDING_PAGE,
  SubAccountUpdatePlanRequestFeatures.JSON_PROPERTY_INBOX
})
@JsonTypeName("subAccountUpdatePlanRequest_features")
public class SubAccountUpdatePlanRequestFeatures {
  public static final String JSON_PROPERTY_USERS = "users";
  private Long users;

  public static final String JSON_PROPERTY_LANDING_PAGE = "landingPage";
  private Long landingPage;

  public static final String JSON_PROPERTY_INBOX = "inbox";
  private Long inbox;

  public SubAccountUpdatePlanRequestFeatures() {
  }

  public SubAccountUpdatePlanRequestFeatures users(Long users) {
    
    this.users = users;
    return this;
  }

  /**
   * Number of multi-users
   * @return users
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(Long users) {
    this.users = users;
  }

  public SubAccountUpdatePlanRequestFeatures landingPage(Long landingPage) {
    
    this.landingPage = landingPage;
    return this;
  }

  /**
   * Number of landing pages / Not required on ENTv2
   * @return landingPage
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANDING_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLandingPage() {
    return landingPage;
  }


  @JsonProperty(JSON_PROPERTY_LANDING_PAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLandingPage(Long landingPage) {
    this.landingPage = landingPage;
  }

  public SubAccountUpdatePlanRequestFeatures inbox(Long inbox) {
    
    this.inbox = inbox;
    return this;
  }

  /**
   * Number of inboxes / Not required on ENTv2
   * @return inbox
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInbox() {
    return inbox;
  }


  @JsonProperty(JSON_PROPERTY_INBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInbox(Long inbox) {
    this.inbox = inbox;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubAccountUpdatePlanRequestFeatures subAccountUpdatePlanRequestFeatures = (SubAccountUpdatePlanRequestFeatures) o;
    return Objects.equals(this.users, subAccountUpdatePlanRequestFeatures.users) &&
        Objects.equals(this.landingPage, subAccountUpdatePlanRequestFeatures.landingPage) &&
        Objects.equals(this.inbox, subAccountUpdatePlanRequestFeatures.inbox);
  }

  @Override
  public int hashCode() {
    return Objects.hash(users, landingPage, inbox);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubAccountUpdatePlanRequestFeatures {\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    landingPage: ").append(toIndentedString(landingPage)).append("\n");
    sb.append("    inbox: ").append(toIndentedString(inbox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `users` to the URL query string
    if (getUsers() != null) {
      try {
        joiner.add(String.format("%susers%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsers()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `landingPage` to the URL query string
    if (getLandingPage() != null) {
      try {
        joiner.add(String.format("%slandingPage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLandingPage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inbox` to the URL query string
    if (getInbox() != null) {
      try {
        joiner.add(String.format("%sinbox%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInbox()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

