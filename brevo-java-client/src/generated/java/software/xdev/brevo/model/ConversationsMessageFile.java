/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import software.xdev.brevo.model.ConversationsMessageFileImageInfo;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ConversationsMessageFile
 */
@JsonPropertyOrder({
  ConversationsMessageFile.JSON_PROPERTY_FILENAME,
  ConversationsMessageFile.JSON_PROPERTY_SIZE,
  ConversationsMessageFile.JSON_PROPERTY_IS_IMAGE,
  ConversationsMessageFile.JSON_PROPERTY_URL,
  ConversationsMessageFile.JSON_PROPERTY_IMAGE_INFO
})
@JsonTypeName("ConversationsMessage_file")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConversationsMessageFile {
  public static final String JSON_PROPERTY_FILENAME = "filename";
  private String filename;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_IS_IMAGE = "isImage";
  private Boolean isImage;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_IMAGE_INFO = "imageInfo";
  private ConversationsMessageFileImageInfo imageInfo;

  public ConversationsMessageFile() {
  }

  public ConversationsMessageFile filename(String filename) {
    
    this.filename = filename;
    return this;
  }

   /**
   * Name of the file
   * @return filename
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilename() {
    return filename;
  }


  @JsonProperty(JSON_PROPERTY_FILENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilename(String filename) {
    this.filename = filename;
  }


  public ConversationsMessageFile size(Long size) {
    
    this.size = size;
    return this;
  }

   /**
   * Size in bytes
   * minimum: 0
   * @return size
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public ConversationsMessageFile isImage(Boolean isImage) {
    
    this.isImage = isImage;
    return this;
  }

   /**
   * Whether the file is an image
   * @return isImage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsImage() {
    return isImage;
  }


  @JsonProperty(JSON_PROPERTY_IS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }


  public ConversationsMessageFile url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL of the file
   * @return url
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public ConversationsMessageFile imageInfo(ConversationsMessageFileImageInfo imageInfo) {
    
    this.imageInfo = imageInfo;
    return this;
  }

   /**
   * Get imageInfo
   * @return imageInfo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConversationsMessageFileImageInfo getImageInfo() {
    return imageInfo;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImageInfo(ConversationsMessageFileImageInfo imageInfo) {
    this.imageInfo = imageInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsMessageFile conversationsMessageFile = (ConversationsMessageFile) o;
    return Objects.equals(this.filename, conversationsMessageFile.filename) &&
        Objects.equals(this.size, conversationsMessageFile.size) &&
        Objects.equals(this.isImage, conversationsMessageFile.isImage) &&
        Objects.equals(this.url, conversationsMessageFile.url) &&
        Objects.equals(this.imageInfo, conversationsMessageFile.imageInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filename, size, isImage, url, imageInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsMessageFile {\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    imageInfo: ").append(toIndentedString(imageInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `filename` to the URL query string
    if (getFilename() != null) {
      try {
        joiner.add(String.format("%sfilename%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilename()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `size` to the URL query string
    if (getSize() != null) {
      try {
        joiner.add(String.format("%ssize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isImage` to the URL query string
    if (getIsImage() != null) {
      try {
        joiner.add(String.format("%sisImage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `imageInfo` to the URL query string
    if (getImageInfo() != null) {
      joiner.add(getImageInfo().toUrlQueryString(prefix + "imageInfo" + suffix));
    }

    return joiner.toString();
  }

}

