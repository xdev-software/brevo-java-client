/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.MainFilter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainGetContactRewardsPayload
 */
@JsonPropertyOrder({
  MainGetContactRewardsPayload.JSON_PROPERTY_CONTACT_ID,
  MainGetContactRewardsPayload.JSON_PROPERTY_LIMIT,
  MainGetContactRewardsPayload.JSON_PROPERTY_METADATA,
  MainGetContactRewardsPayload.JSON_PROPERTY_OFFSET,
  MainGetContactRewardsPayload.JSON_PROPERTY_REWARD_ID,
  MainGetContactRewardsPayload.JSON_PROPERTY_SORT,
  MainGetContactRewardsPayload.JSON_PROPERTY_SORT_FIELD
})
@JsonTypeName("main.getContactRewardsPayload")
public class MainGetContactRewardsPayload {
  public static final String JSON_PROPERTY_CONTACT_ID = "contactId";
  @jakarta.annotation.Nonnull
  private Integer contactId;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  @jakarta.annotation.Nullable
  private Integer limit;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @jakarta.annotation.Nullable
  private List<MainFilter> metadata = new ArrayList<>();

  public static final String JSON_PROPERTY_OFFSET = "offset";
  @jakarta.annotation.Nullable
  private Integer offset;

  public static final String JSON_PROPERTY_REWARD_ID = "rewardId";
  @jakarta.annotation.Nullable
  private String rewardId;

  /**
   * Sort the documents in ascending or descending order
   */
  public enum SortEnum {
    ASC(String.valueOf("asc")),
    
    DESC(String.valueOf("desc"));

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SORT = "sort";
  @jakarta.annotation.Nullable
  private SortEnum sort;

  /**
   * Sort documents by field
   */
  public enum SortFieldEnum {
    UPDATED_AT(String.valueOf("updatedAt")),
    
    CREATED_AT(String.valueOf("createdAt"));

    private String value;

    SortFieldEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortFieldEnum fromValue(String value) {
      for (SortFieldEnum b : SortFieldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SORT_FIELD = "sortField";
  @jakarta.annotation.Nullable
  private SortFieldEnum sortField;

  public MainGetContactRewardsPayload() {
  }

  public MainGetContactRewardsPayload contactId(@jakarta.annotation.Nonnull Integer contactId) {
    
    this.contactId = contactId;
    return this;
  }

  /**
   * Contact to attribute the reward
   * minimum: 1
   * @return contactId
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getContactId() {
    return contactId;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContactId(@jakarta.annotation.Nonnull Integer contactId) {
    this.contactId = contactId;
  }

  public MainGetContactRewardsPayload limit(@jakarta.annotation.Nullable Integer limit) {
    
    this.limit = limit;
    return this;
  }

  /**
   * Number of documents per page
   * minimum: 1
   * maximum: 500
   * @return limit
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimit(@jakarta.annotation.Nullable Integer limit) {
    this.limit = limit;
  }

  public MainGetContactRewardsPayload metadata(@jakarta.annotation.Nullable List<MainFilter> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public MainGetContactRewardsPayload addMetadataItem(MainFilter metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Data to define the reward for that particular contact
   * @return metadata
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MainFilter> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@jakarta.annotation.Nullable List<MainFilter> metadata) {
    this.metadata = metadata;
  }

  public MainGetContactRewardsPayload offset(@jakarta.annotation.Nullable Integer offset) {
    
    this.offset = offset;
    return this;
  }

  /**
   * Index of the first document in the page
   * minimum: 0
   * @return offset
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOffset(@jakarta.annotation.Nullable Integer offset) {
    this.offset = offset;
  }

  public MainGetContactRewardsPayload rewardId(@jakarta.annotation.Nullable String rewardId) {
    
    this.rewardId = rewardId;
    return this;
  }

  /**
   * Unique identifier of the associated reward
   * @return rewardId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRewardId() {
    return rewardId;
  }


  @JsonProperty(JSON_PROPERTY_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRewardId(@jakarta.annotation.Nullable String rewardId) {
    this.rewardId = rewardId;
  }

  public MainGetContactRewardsPayload sort(@jakarta.annotation.Nullable SortEnum sort) {
    
    this.sort = sort;
    return this;
  }

  /**
   * Sort the documents in ascending or descending order
   * @return sort
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SortEnum getSort() {
    return sort;
  }


  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSort(@jakarta.annotation.Nullable SortEnum sort) {
    this.sort = sort;
  }

  public MainGetContactRewardsPayload sortField(@jakarta.annotation.Nullable SortFieldEnum sortField) {
    
    this.sortField = sortField;
    return this;
  }

  /**
   * Sort documents by field
   * @return sortField
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SortFieldEnum getSortField() {
    return sortField;
  }


  @JsonProperty(JSON_PROPERTY_SORT_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortField(@jakarta.annotation.Nullable SortFieldEnum sortField) {
    this.sortField = sortField;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainGetContactRewardsPayload mainGetContactRewardsPayload = (MainGetContactRewardsPayload) o;
    return Objects.equals(this.contactId, mainGetContactRewardsPayload.contactId) &&
        Objects.equals(this.limit, mainGetContactRewardsPayload.limit) &&
        Objects.equals(this.metadata, mainGetContactRewardsPayload.metadata) &&
        Objects.equals(this.offset, mainGetContactRewardsPayload.offset) &&
        Objects.equals(this.rewardId, mainGetContactRewardsPayload.rewardId) &&
        Objects.equals(this.sort, mainGetContactRewardsPayload.sort) &&
        Objects.equals(this.sortField, mainGetContactRewardsPayload.sortField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, limit, metadata, offset, rewardId, sort, sortField);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainGetContactRewardsPayload {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    rewardId: ").append(toIndentedString(rewardId)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    sortField: ").append(toIndentedString(sortField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `contactId` to the URL query string
    if (getContactId() != null) {
      try {
        joiner.add(String.format("%scontactId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContactId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `limit` to the URL query string
    if (getLimit() != null) {
      try {
        joiner.add(String.format("%slimit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLimit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (int i = 0; i < getMetadata().size(); i++) {
        if (getMetadata().get(i) != null) {
          joiner.add(getMetadata().get(i).toUrlQueryString(String.format("%smetadata%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `offset` to the URL query string
    if (getOffset() != null) {
      try {
        joiner.add(String.format("%soffset%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOffset()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rewardId` to the URL query string
    if (getRewardId() != null) {
      try {
        joiner.add(String.format("%srewardId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRewardId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sort` to the URL query string
    if (getSort() != null) {
      try {
        joiner.add(String.format("%ssort%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSort()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sortField` to the URL query string
    if (getSortField() != null) {
      try {
        joiner.add(String.format("%ssortField%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSortField()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

