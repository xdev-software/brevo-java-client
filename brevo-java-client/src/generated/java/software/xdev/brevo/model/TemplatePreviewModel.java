/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TemplatePreviewModel
 */
@JsonPropertyOrder({
  TemplatePreviewModel.JSON_PROPERTY_FROM_EMAIL,
  TemplatePreviewModel.JSON_PROPERTY_FROM_NAME,
  TemplatePreviewModel.JSON_PROPERTY_HTML,
  TemplatePreviewModel.JSON_PROPERTY_SUBJECT,
  TemplatePreviewModel.JSON_PROPERTY_USED_FEED_NAMES,
  TemplatePreviewModel.JSON_PROPERTY_PREVIEW_TEXT
})
@JsonTypeName("templatePreviewModel")
public class TemplatePreviewModel {
  public static final String JSON_PROPERTY_FROM_EMAIL = "fromEmail";
  @jakarta.annotation.Nullable
  private String fromEmail;

  public static final String JSON_PROPERTY_FROM_NAME = "fromName";
  @jakarta.annotation.Nullable
  private String fromName;

  public static final String JSON_PROPERTY_HTML = "html";
  @jakarta.annotation.Nullable
  private String html;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @jakarta.annotation.Nullable
  private String subject;

  public static final String JSON_PROPERTY_USED_FEED_NAMES = "usedFeedNames";
  @jakarta.annotation.Nullable
  private List<String> usedFeedNames = new ArrayList<>();

  public static final String JSON_PROPERTY_PREVIEW_TEXT = "previewText";
  @jakarta.annotation.Nullable
  private String previewText;

  public TemplatePreviewModel() {
  }

  public TemplatePreviewModel fromEmail(@jakarta.annotation.Nullable String fromEmail) {
    
    this.fromEmail = fromEmail;
    return this;
  }

  /**
   * Sender email address
   * @return fromEmail
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromEmail() {
    return fromEmail;
  }


  @JsonProperty(JSON_PROPERTY_FROM_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromEmail(@jakarta.annotation.Nullable String fromEmail) {
    this.fromEmail = fromEmail;
  }

  public TemplatePreviewModel fromName(@jakarta.annotation.Nullable String fromName) {
    
    this.fromName = fromName;
    return this;
  }

  /**
   * Sender Name
   * @return fromName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromName() {
    return fromName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromName(@jakarta.annotation.Nullable String fromName) {
    this.fromName = fromName;
  }

  public TemplatePreviewModel html(@jakarta.annotation.Nullable String html) {
    
    this.html = html;
    return this;
  }

  /**
   * Html content of the template
   * @return html
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtml() {
    return html;
  }


  @JsonProperty(JSON_PROPERTY_HTML)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtml(@jakarta.annotation.Nullable String html) {
    this.html = html;
  }

  public TemplatePreviewModel subject(@jakarta.annotation.Nullable String subject) {
    
    this.subject = subject;
    return this;
  }

  /**
   * subject of the template
   * @return subject
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(@jakarta.annotation.Nullable String subject) {
    this.subject = subject;
  }

  public TemplatePreviewModel usedFeedNames(@jakarta.annotation.Nullable List<String> usedFeedNames) {
    
    this.usedFeedNames = usedFeedNames;
    return this;
  }

  public TemplatePreviewModel addUsedFeedNamesItem(String usedFeedNamesItem) {
    if (this.usedFeedNames == null) {
      this.usedFeedNames = new ArrayList<>();
    }
    this.usedFeedNames.add(usedFeedNamesItem);
    return this;
  }

  /**
   * Get usedFeedNames
   * @return usedFeedNames
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_FEED_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUsedFeedNames() {
    return usedFeedNames;
  }


  @JsonProperty(JSON_PROPERTY_USED_FEED_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedFeedNames(@jakarta.annotation.Nullable List<String> usedFeedNames) {
    this.usedFeedNames = usedFeedNames;
  }

  public TemplatePreviewModel previewText(@jakarta.annotation.Nullable String previewText) {
    
    this.previewText = previewText;
    return this;
  }

  /**
   * Preview text of the template
   * @return previewText
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviewText() {
    return previewText;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewText(@jakarta.annotation.Nullable String previewText) {
    this.previewText = previewText;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplatePreviewModel templatePreviewModel = (TemplatePreviewModel) o;
    return Objects.equals(this.fromEmail, templatePreviewModel.fromEmail) &&
        Objects.equals(this.fromName, templatePreviewModel.fromName) &&
        Objects.equals(this.html, templatePreviewModel.html) &&
        Objects.equals(this.subject, templatePreviewModel.subject) &&
        Objects.equals(this.usedFeedNames, templatePreviewModel.usedFeedNames) &&
        Objects.equals(this.previewText, templatePreviewModel.previewText);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromEmail, fromName, html, subject, usedFeedNames, previewText);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplatePreviewModel {\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    usedFeedNames: ").append(toIndentedString(usedFeedNames)).append("\n");
    sb.append("    previewText: ").append(toIndentedString(previewText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fromEmail` to the URL query string
    if (getFromEmail() != null) {
      try {
        joiner.add(String.format("%sfromEmail%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFromEmail()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fromName` to the URL query string
    if (getFromName() != null) {
      try {
        joiner.add(String.format("%sfromName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFromName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `html` to the URL query string
    if (getHtml() != null) {
      try {
        joiner.add(String.format("%shtml%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHtml()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subject` to the URL query string
    if (getSubject() != null) {
      try {
        joiner.add(String.format("%ssubject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `usedFeedNames` to the URL query string
    if (getUsedFeedNames() != null) {
      for (int i = 0; i < getUsedFeedNames().size(); i++) {
        try {
          joiner.add(String.format("%susedFeedNames%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getUsedFeedNames().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `previewText` to the URL query string
    if (getPreviewText() != null) {
      try {
        joiner.add(String.format("%spreviewText%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviewText()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

