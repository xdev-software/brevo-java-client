/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * WhatsappCampStats
 */
@JsonPropertyOrder({
  WhatsappCampStats.JSON_PROPERTY_SENT,
  WhatsappCampStats.JSON_PROPERTY_DELIVERED,
  WhatsappCampStats.JSON_PROPERTY_READ,
  WhatsappCampStats.JSON_PROPERTY_UNSUBSCRIBE,
  WhatsappCampStats.JSON_PROPERTY_NOT_SENT
})
public class WhatsappCampStats {
  public static final String JSON_PROPERTY_SENT = "sent";
  @jakarta.annotation.Nonnull
  private Integer sent;

  public static final String JSON_PROPERTY_DELIVERED = "delivered";
  @jakarta.annotation.Nonnull
  private Integer delivered;

  public static final String JSON_PROPERTY_READ = "read";
  @jakarta.annotation.Nonnull
  private Integer read;

  public static final String JSON_PROPERTY_UNSUBSCRIBE = "unsubscribe";
  @jakarta.annotation.Nonnull
  private Integer unsubscribe;

  public static final String JSON_PROPERTY_NOT_SENT = "notSent";
  @jakarta.annotation.Nonnull
  private Integer notSent;

  public WhatsappCampStats() {
  }

  public WhatsappCampStats sent(@jakarta.annotation.Nonnull Integer sent) {
    
    this.sent = sent;
    return this;
  }

  /**
   * Get sent
   * @return sent
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSent() {
    return sent;
  }


  @JsonProperty(JSON_PROPERTY_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSent(@jakarta.annotation.Nonnull Integer sent) {
    this.sent = sent;
  }

  public WhatsappCampStats delivered(@jakarta.annotation.Nonnull Integer delivered) {
    
    this.delivered = delivered;
    return this;
  }

  /**
   * Get delivered
   * @return delivered
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDelivered() {
    return delivered;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDelivered(@jakarta.annotation.Nonnull Integer delivered) {
    this.delivered = delivered;
  }

  public WhatsappCampStats read(@jakarta.annotation.Nonnull Integer read) {
    
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_READ)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRead() {
    return read;
  }


  @JsonProperty(JSON_PROPERTY_READ)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRead(@jakarta.annotation.Nonnull Integer read) {
    this.read = read;
  }

  public WhatsappCampStats unsubscribe(@jakarta.annotation.Nonnull Integer unsubscribe) {
    
    this.unsubscribe = unsubscribe;
    return this;
  }

  /**
   * Get unsubscribe
   * @return unsubscribe
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUnsubscribe() {
    return unsubscribe;
  }


  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnsubscribe(@jakarta.annotation.Nonnull Integer unsubscribe) {
    this.unsubscribe = unsubscribe;
  }

  public WhatsappCampStats notSent(@jakarta.annotation.Nonnull Integer notSent) {
    
    this.notSent = notSent;
    return this;
  }

  /**
   * Get notSent
   * @return notSent
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOT_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNotSent() {
    return notSent;
  }


  @JsonProperty(JSON_PROPERTY_NOT_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotSent(@jakarta.annotation.Nonnull Integer notSent) {
    this.notSent = notSent;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WhatsappCampStats whatsappCampStats = (WhatsappCampStats) o;
    return Objects.equals(this.sent, whatsappCampStats.sent) &&
        Objects.equals(this.delivered, whatsappCampStats.delivered) &&
        Objects.equals(this.read, whatsappCampStats.read) &&
        Objects.equals(this.unsubscribe, whatsappCampStats.unsubscribe) &&
        Objects.equals(this.notSent, whatsappCampStats.notSent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sent, delivered, read, unsubscribe, notSent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WhatsappCampStats {\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    unsubscribe: ").append(toIndentedString(unsubscribe)).append("\n");
    sb.append("    notSent: ").append(toIndentedString(notSent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `sent` to the URL query string
    if (getSent() != null) {
      try {
        joiner.add(String.format("%ssent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `delivered` to the URL query string
    if (getDelivered() != null) {
      try {
        joiner.add(String.format("%sdelivered%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDelivered()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `read` to the URL query string
    if (getRead() != null) {
      try {
        joiner.add(String.format("%sread%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRead()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `unsubscribe` to the URL query string
    if (getUnsubscribe() != null) {
      try {
        joiner.add(String.format("%sunsubscribe%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnsubscribe()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `notSent` to the URL query string
    if (getNotSent() != null) {
      try {
        joiner.add(String.format("%snotSent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNotSent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

