/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetAccountActivityLogsInner
 */
@JsonPropertyOrder({
  GetAccountActivityLogsInner.JSON_PROPERTY_ACTION,
  GetAccountActivityLogsInner.JSON_PROPERTY_DATE,
  GetAccountActivityLogsInner.JSON_PROPERTY_USER_EMAIL,
  GetAccountActivityLogsInner.JSON_PROPERTY_USER_IP,
  GetAccountActivityLogsInner.JSON_PROPERTY_USER_AGENT
})
@JsonTypeName("getAccountActivity_logs_inner")
public class GetAccountActivityLogsInner {
  public static final String JSON_PROPERTY_ACTION = "action";
  @jakarta.annotation.Nonnull
  private String action;

  public static final String JSON_PROPERTY_DATE = "date";
  @jakarta.annotation.Nonnull
  private String date;

  public static final String JSON_PROPERTY_USER_EMAIL = "user_email";
  @jakarta.annotation.Nonnull
  private String userEmail;

  public static final String JSON_PROPERTY_USER_IP = "user_ip";
  @jakarta.annotation.Nonnull
  private String userIp;

  public static final String JSON_PROPERTY_USER_AGENT = "user_agent";
  @jakarta.annotation.Nonnull
  private String userAgent;

  public GetAccountActivityLogsInner() {
  }

  public GetAccountActivityLogsInner action(@jakarta.annotation.Nonnull String action) {
    
    this.action = action;
    return this;
  }

  /**
   * Type of activity in the account.
   * @return action
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAction(@jakarta.annotation.Nonnull String action) {
    this.action = action;
  }

  public GetAccountActivityLogsInner date(@jakarta.annotation.Nonnull String date) {
    
    this.date = date;
    return this;
  }

  /**
   * Time of the activity.
   * @return date
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(@jakarta.annotation.Nonnull String date) {
    this.date = date;
  }

  public GetAccountActivityLogsInner userEmail(@jakarta.annotation.Nonnull String userEmail) {
    
    this.userEmail = userEmail;
    return this;
  }

  /**
   * Email address of the user who performed activity in the account.
   * @return userEmail
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserEmail() {
    return userEmail;
  }


  @JsonProperty(JSON_PROPERTY_USER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserEmail(@jakarta.annotation.Nonnull String userEmail) {
    this.userEmail = userEmail;
  }

  public GetAccountActivityLogsInner userIp(@jakarta.annotation.Nonnull String userIp) {
    
    this.userIp = userIp;
    return this;
  }

  /**
   * IP address of the user who performed activity in the account.
   * @return userIp
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserIp() {
    return userIp;
  }


  @JsonProperty(JSON_PROPERTY_USER_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserIp(@jakarta.annotation.Nonnull String userIp) {
    this.userIp = userIp;
  }

  public GetAccountActivityLogsInner userAgent(@jakarta.annotation.Nonnull String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Browser details of the user who performed the activity.
   * @return userAgent
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUserAgent() {
    return userAgent;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserAgent(@jakarta.annotation.Nonnull String userAgent) {
    this.userAgent = userAgent;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountActivityLogsInner getAccountActivityLogsInner = (GetAccountActivityLogsInner) o;
    return Objects.equals(this.action, getAccountActivityLogsInner.action) &&
        Objects.equals(this.date, getAccountActivityLogsInner.date) &&
        Objects.equals(this.userEmail, getAccountActivityLogsInner.userEmail) &&
        Objects.equals(this.userIp, getAccountActivityLogsInner.userIp) &&
        Objects.equals(this.userAgent, getAccountActivityLogsInner.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, date, userEmail, userIp, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountActivityLogsInner {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userIp: ").append(toIndentedString(userIp)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `action` to the URL query string
    if (getAction() != null) {
      try {
        joiner.add(String.format("%saction%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAction()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      try {
        joiner.add(String.format("%sdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `user_email` to the URL query string
    if (getUserEmail() != null) {
      try {
        joiner.add(String.format("%suser_email%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserEmail()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `user_ip` to the URL query string
    if (getUserIp() != null) {
      try {
        joiner.add(String.format("%suser_ip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserIp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `user_agent` to the URL query string
    if (getUserAgent() != null) {
      try {
        joiner.add(String.format("%suser_agent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUserAgent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

