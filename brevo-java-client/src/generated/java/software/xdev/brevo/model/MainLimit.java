/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainLimit
 */
@JsonPropertyOrder({
  MainLimit.JSON_PROPERTY_CREATED_AT,
  MainLimit.JSON_PROPERTY_DURATION_UNIT,
  MainLimit.JSON_PROPERTY_DURATION_VALUE,
  MainLimit.JSON_PROPERTY_LIMIT_VALUE,
  MainLimit.JSON_PROPERTY_REWARD_LIMIT_ID,
  MainLimit.JSON_PROPERTY_SLIDING_SCHEDULE,
  MainLimit.JSON_PROPERTY_TYPE,
  MainLimit.JSON_PROPERTY_UPDATED_AT
})
@JsonTypeName("main.limit")
public class MainLimit {
  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @jakarta.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_DURATION_UNIT = "durationUnit";
  @jakarta.annotation.Nullable
  private String durationUnit;

  public static final String JSON_PROPERTY_DURATION_VALUE = "durationValue";
  @jakarta.annotation.Nullable
  private Integer durationValue;

  public static final String JSON_PROPERTY_LIMIT_VALUE = "limitValue";
  @jakarta.annotation.Nullable
  private Integer limitValue;

  public static final String JSON_PROPERTY_REWARD_LIMIT_ID = "rewardLimitId";
  @jakarta.annotation.Nullable
  private String rewardLimitId;

  public static final String JSON_PROPERTY_SLIDING_SCHEDULE = "slidingSchedule";
  @jakarta.annotation.Nullable
  private Boolean slidingSchedule;

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable
  private String type;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @jakarta.annotation.Nullable
  private OffsetDateTime updatedAt;

  public MainLimit() {
  }

  public MainLimit createdAt(@jakarta.annotation.Nullable OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Timestamp when the reward limit was created
   * @return createdAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(@jakarta.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public MainLimit durationUnit(@jakarta.annotation.Nullable String durationUnit) {
    
    this.durationUnit = durationUnit;
    return this;
  }

  /**
   * Unit of time for the reward limit&#39;s availability (e.g., day/week/month/year).
   * @return durationUnit
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDurationUnit() {
    return durationUnit;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationUnit(@jakarta.annotation.Nullable String durationUnit) {
    this.durationUnit = durationUnit;
  }

  public MainLimit durationValue(@jakarta.annotation.Nullable Integer durationValue) {
    
    this.durationValue = durationValue;
    return this;
  }

  /**
   * Number of days/weeks/month/year for reward limit
   * @return durationValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDurationValue() {
    return durationValue;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationValue(@jakarta.annotation.Nullable Integer durationValue) {
    this.durationValue = durationValue;
  }

  public MainLimit limitValue(@jakarta.annotation.Nullable Integer limitValue) {
    
    this.limitValue = limitValue;
    return this;
  }

  /**
   * Value of the limit
   * @return limitValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimitValue() {
    return limitValue;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimitValue(@jakarta.annotation.Nullable Integer limitValue) {
    this.limitValue = limitValue;
  }

  public MainLimit rewardLimitId(@jakarta.annotation.Nullable String rewardLimitId) {
    
    this.rewardLimitId = rewardLimitId;
    return this;
  }

  /**
   * Unique identifier for the reward limit
   * @return rewardLimitId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REWARD_LIMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRewardLimitId() {
    return rewardLimitId;
  }


  @JsonProperty(JSON_PROPERTY_REWARD_LIMIT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRewardLimitId(@jakarta.annotation.Nullable String rewardLimitId) {
    this.rewardLimitId = rewardLimitId;
  }

  public MainLimit slidingSchedule(@jakarta.annotation.Nullable Boolean slidingSchedule) {
    
    this.slidingSchedule = slidingSchedule;
    return this;
  }

  /**
   * Select true to calculate all redeems/attributions from the previous value of selected durationUnit to the current time
   * @return slidingSchedule
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLIDING_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSlidingSchedule() {
    return slidingSchedule;
  }


  @JsonProperty(JSON_PROPERTY_SLIDING_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlidingSchedule(@jakarta.annotation.Nullable Boolean slidingSchedule) {
    this.slidingSchedule = slidingSchedule;
  }

  public MainLimit type(@jakarta.annotation.Nullable String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Type of reward
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = type;
  }

  public MainLimit updatedAt(@jakarta.annotation.Nullable OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Timestamp when the reward limit was created
   * @return updatedAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(@jakarta.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainLimit mainLimit = (MainLimit) o;
    return Objects.equals(this.createdAt, mainLimit.createdAt) &&
        Objects.equals(this.durationUnit, mainLimit.durationUnit) &&
        Objects.equals(this.durationValue, mainLimit.durationValue) &&
        Objects.equals(this.limitValue, mainLimit.limitValue) &&
        Objects.equals(this.rewardLimitId, mainLimit.rewardLimitId) &&
        Objects.equals(this.slidingSchedule, mainLimit.slidingSchedule) &&
        Objects.equals(this.type, mainLimit.type) &&
        Objects.equals(this.updatedAt, mainLimit.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, durationUnit, durationValue, limitValue, rewardLimitId, slidingSchedule, type, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainLimit {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    durationUnit: ").append(toIndentedString(durationUnit)).append("\n");
    sb.append("    durationValue: ").append(toIndentedString(durationValue)).append("\n");
    sb.append("    limitValue: ").append(toIndentedString(limitValue)).append("\n");
    sb.append("    rewardLimitId: ").append(toIndentedString(rewardLimitId)).append("\n");
    sb.append("    slidingSchedule: ").append(toIndentedString(slidingSchedule)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `durationUnit` to the URL query string
    if (getDurationUnit() != null) {
      try {
        joiner.add(String.format("%sdurationUnit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurationUnit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `durationValue` to the URL query string
    if (getDurationValue() != null) {
      try {
        joiner.add(String.format("%sdurationValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurationValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `limitValue` to the URL query string
    if (getLimitValue() != null) {
      try {
        joiner.add(String.format("%slimitValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLimitValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rewardLimitId` to the URL query string
    if (getRewardLimitId() != null) {
      try {
        joiner.add(String.format("%srewardLimitId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRewardLimitId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `slidingSchedule` to the URL query string
    if (getSlidingSchedule() != null) {
      try {
        joiner.add(String.format("%sslidingSchedule%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSlidingSchedule()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

