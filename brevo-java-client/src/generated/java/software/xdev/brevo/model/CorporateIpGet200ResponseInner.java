/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CorporateIpGet200ResponseInner
 */
@JsonPropertyOrder({
  CorporateIpGet200ResponseInner.JSON_PROPERTY_IP,
  CorporateIpGet200ResponseInner.JSON_PROPERTY_DOMAIN,
  CorporateIpGet200ResponseInner.JSON_PROPERTY_TRANSACTIONAL
})
@JsonTypeName("_corporate_ip_get_200_response_inner")
public class CorporateIpGet200ResponseInner {
  public static final String JSON_PROPERTY_IP = "ip";
  @jakarta.annotation.Nullable
  private String ip;

  public static final String JSON_PROPERTY_DOMAIN = "domain";
  @jakarta.annotation.Nullable
  private String domain;

  public static final String JSON_PROPERTY_TRANSACTIONAL = "transactional";
  @jakarta.annotation.Nullable
  private Boolean transactional;

  public CorporateIpGet200ResponseInner() {
  }

  public CorporateIpGet200ResponseInner ip(@jakarta.annotation.Nullable String ip) {
    
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIp() {
    return ip;
  }


  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIp(@jakarta.annotation.Nullable String ip) {
    this.ip = ip;
  }

  public CorporateIpGet200ResponseInner domain(@jakarta.annotation.Nullable String domain) {
    
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(@jakarta.annotation.Nullable String domain) {
    this.domain = domain;
  }

  public CorporateIpGet200ResponseInner transactional(@jakarta.annotation.Nullable Boolean transactional) {
    
    this.transactional = transactional;
    return this;
  }

  /**
   * Get transactional
   * @return transactional
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTransactional() {
    return transactional;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactional(@jakarta.annotation.Nullable Boolean transactional) {
    this.transactional = transactional;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorporateIpGet200ResponseInner corporateIpGet200ResponseInner = (CorporateIpGet200ResponseInner) o;
    return Objects.equals(this.ip, corporateIpGet200ResponseInner.ip) &&
        Objects.equals(this.domain, corporateIpGet200ResponseInner.domain) &&
        Objects.equals(this.transactional, corporateIpGet200ResponseInner.transactional);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, domain, transactional);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorporateIpGet200ResponseInner {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    transactional: ").append(toIndentedString(transactional)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ip` to the URL query string
    if (getIp() != null) {
      try {
        joiner.add(String.format("%sip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `domain` to the URL query string
    if (getDomain() != null) {
      try {
        joiner.add(String.format("%sdomain%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDomain()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transactional` to the URL query string
    if (getTransactional() != null) {
      try {
        joiner.add(String.format("%stransactional%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransactional()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

