/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ConversionSourceMetrics
 */
@JsonPropertyOrder({
  ConversionSourceMetrics.JSON_PROPERTY_ID,
  ConversionSourceMetrics.JSON_PROPERTY_CONVERSION_SOURCE,
  ConversionSourceMetrics.JSON_PROPERTY_ORDERS_COUNT,
  ConversionSourceMetrics.JSON_PROPERTY_REVENUE,
  ConversionSourceMetrics.JSON_PROPERTY_AVERAGE_BASKET
})
public class ConversionSourceMetrics {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets conversionSource
   */
  public enum ConversionSourceEnum {
    EMAIL_CAMPAIGN(String.valueOf("email_campaign")),
    
    SMS_CAMPAIGN(String.valueOf("sms_campaign")),
    
    AUTOMATION_WORKFLOW_EMAIL(String.valueOf("automation_workflow_email")),
    
    AUTOMATION_WORKFLOW_SMS(String.valueOf("automation_workflow_sms"));

    private String value;

    ConversionSourceEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ConversionSourceEnum fromValue(String value) {
      for (ConversionSourceEnum b : ConversionSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CONVERSION_SOURCE = "conversionSource";
  @jakarta.annotation.Nonnull
  private ConversionSourceEnum conversionSource;

  public static final String JSON_PROPERTY_ORDERS_COUNT = "ordersCount";
  @jakarta.annotation.Nonnull
  private BigDecimal ordersCount;

  public static final String JSON_PROPERTY_REVENUE = "revenue";
  @jakarta.annotation.Nonnull
  private Float revenue;

  public static final String JSON_PROPERTY_AVERAGE_BASKET = "averageBasket";
  @jakarta.annotation.Nonnull
  private Float averageBasket;

  public ConversionSourceMetrics() {
  }

  public ConversionSourceMetrics id(@jakarta.annotation.Nonnull String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull String id) {
    this.id = id;
  }

  public ConversionSourceMetrics conversionSource(@jakarta.annotation.Nonnull ConversionSourceEnum conversionSource) {
    
    this.conversionSource = conversionSource;
    return this;
  }

  /**
   * Get conversionSource
   * @return conversionSource
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONVERSION_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ConversionSourceEnum getConversionSource() {
    return conversionSource;
  }


  @JsonProperty(JSON_PROPERTY_CONVERSION_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConversionSource(@jakarta.annotation.Nonnull ConversionSourceEnum conversionSource) {
    this.conversionSource = conversionSource;
  }

  public ConversionSourceMetrics ordersCount(@jakarta.annotation.Nonnull BigDecimal ordersCount) {
    
    this.ordersCount = ordersCount;
    return this;
  }

  /**
   * Get ordersCount
   * @return ordersCount
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDERS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getOrdersCount() {
    return ordersCount;
  }


  @JsonProperty(JSON_PROPERTY_ORDERS_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrdersCount(@jakarta.annotation.Nonnull BigDecimal ordersCount) {
    this.ordersCount = ordersCount;
  }

  public ConversionSourceMetrics revenue(@jakarta.annotation.Nonnull Float revenue) {
    
    this.revenue = revenue;
    return this;
  }

  /**
   * Get revenue
   * @return revenue
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REVENUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getRevenue() {
    return revenue;
  }


  @JsonProperty(JSON_PROPERTY_REVENUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRevenue(@jakarta.annotation.Nonnull Float revenue) {
    this.revenue = revenue;
  }

  public ConversionSourceMetrics averageBasket(@jakarta.annotation.Nonnull Float averageBasket) {
    
    this.averageBasket = averageBasket;
    return this;
  }

  /**
   * Get averageBasket
   * @return averageBasket
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BASKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getAverageBasket() {
    return averageBasket;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BASKET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBasket(@jakarta.annotation.Nonnull Float averageBasket) {
    this.averageBasket = averageBasket;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionSourceMetrics conversionSourceMetrics = (ConversionSourceMetrics) o;
    return Objects.equals(this.id, conversionSourceMetrics.id) &&
        Objects.equals(this.conversionSource, conversionSourceMetrics.conversionSource) &&
        Objects.equals(this.ordersCount, conversionSourceMetrics.ordersCount) &&
        Objects.equals(this.revenue, conversionSourceMetrics.revenue) &&
        Objects.equals(this.averageBasket, conversionSourceMetrics.averageBasket);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, conversionSource, ordersCount, revenue, averageBasket);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionSourceMetrics {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    conversionSource: ").append(toIndentedString(conversionSource)).append("\n");
    sb.append("    ordersCount: ").append(toIndentedString(ordersCount)).append("\n");
    sb.append("    revenue: ").append(toIndentedString(revenue)).append("\n");
    sb.append("    averageBasket: ").append(toIndentedString(averageBasket)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `conversionSource` to the URL query string
    if (getConversionSource() != null) {
      try {
        joiner.add(String.format("%sconversionSource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConversionSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `ordersCount` to the URL query string
    if (getOrdersCount() != null) {
      try {
        joiner.add(String.format("%sordersCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrdersCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `revenue` to the URL query string
    if (getRevenue() != null) {
      try {
        joiner.add(String.format("%srevenue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevenue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `averageBasket` to the URL query string
    if (getAverageBasket() != null) {
      try {
        joiner.add(String.format("%saverageBasket%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAverageBasket()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

