/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.ConversionSourceMetrics;
import software.xdev.brevo.model.EcommerceAttributionMetricsGet200ResponseTotals;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * EcommerceAttributionMetricsGet200Response
 */
@JsonPropertyOrder({
  EcommerceAttributionMetricsGet200Response.JSON_PROPERTY_RESULTS,
  EcommerceAttributionMetricsGet200Response.JSON_PROPERTY_TOTALS
})
@JsonTypeName("_ecommerce_attribution_metrics_get_200_response")
public class EcommerceAttributionMetricsGet200Response {
  public static final String JSON_PROPERTY_RESULTS = "results";
  @jakarta.annotation.Nonnull
  private List<ConversionSourceMetrics> results = new ArrayList<>();

  public static final String JSON_PROPERTY_TOTALS = "totals";
  @jakarta.annotation.Nonnull
  private EcommerceAttributionMetricsGet200ResponseTotals totals;

  public EcommerceAttributionMetricsGet200Response() {
  }

  public EcommerceAttributionMetricsGet200Response results(@jakarta.annotation.Nonnull List<ConversionSourceMetrics> results) {
    
    this.results = results;
    return this;
  }

  public EcommerceAttributionMetricsGet200Response addResultsItem(ConversionSourceMetrics resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * List of conversion attribution metrics
   * @return results
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ConversionSourceMetrics> getResults() {
    return results;
  }


  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResults(@jakarta.annotation.Nonnull List<ConversionSourceMetrics> results) {
    this.results = results;
  }

  public EcommerceAttributionMetricsGet200Response totals(@jakarta.annotation.Nonnull EcommerceAttributionMetricsGet200ResponseTotals totals) {
    
    this.totals = totals;
    return this;
  }

  /**
   * Get totals
   * @return totals
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public EcommerceAttributionMetricsGet200ResponseTotals getTotals() {
    return totals;
  }


  @JsonProperty(JSON_PROPERTY_TOTALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotals(@jakarta.annotation.Nonnull EcommerceAttributionMetricsGet200ResponseTotals totals) {
    this.totals = totals;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EcommerceAttributionMetricsGet200Response ecommerceAttributionMetricsGet200Response = (EcommerceAttributionMetricsGet200Response) o;
    return Objects.equals(this.results, ecommerceAttributionMetricsGet200Response.results) &&
        Objects.equals(this.totals, ecommerceAttributionMetricsGet200Response.totals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(results, totals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EcommerceAttributionMetricsGet200Response {\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    totals: ").append(toIndentedString(totals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `results` to the URL query string
    if (getResults() != null) {
      for (int i = 0; i < getResults().size(); i++) {
        if (getResults().get(i) != null) {
          try {
            joiner.add(String.format("%sresults%s%s=%s", prefix, suffix,
                "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                URLEncoder.encode(String.valueOf(getResults().get(i)), "UTF-8").replaceAll("\\+", "%20")));
          } catch (UnsupportedEncodingException e) {
            // Should never happen, UTF-8 is always supported
            throw new RuntimeException(e);
          }
        }
      }
    }

    // add `totals` to the URL query string
    if (getTotals() != null) {
      joiner.add(getTotals().toUrlQueryString(prefix + "totals" + suffix));
    }

    return joiner.toString();
  }

}

