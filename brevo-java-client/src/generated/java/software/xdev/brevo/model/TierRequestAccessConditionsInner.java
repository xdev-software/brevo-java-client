/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * TierRequestAccessConditionsInner
 */
@JsonPropertyOrder({
  TierRequestAccessConditionsInner.JSON_PROPERTY_BALANCE_DEFINITION_ID,
  TierRequestAccessConditionsInner.JSON_PROPERTY_MINIMUM_VALUE
})
@JsonTypeName("tierRequest_accessConditions_inner")
public class TierRequestAccessConditionsInner {
  public static final String JSON_PROPERTY_BALANCE_DEFINITION_ID = "balanceDefinitionId";
  @jakarta.annotation.Nullable
  private UUID balanceDefinitionId;

  public static final String JSON_PROPERTY_MINIMUM_VALUE = "minimumValue";
  @jakarta.annotation.Nullable
  private Integer minimumValue;

  public TierRequestAccessConditionsInner() {
  }

  public TierRequestAccessConditionsInner balanceDefinitionId(@jakarta.annotation.Nullable UUID balanceDefinitionId) {
    
    this.balanceDefinitionId = balanceDefinitionId;
    return this;
  }

  /**
   * Balance definition identifier for accessing the tier
   * @return balanceDefinitionId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BALANCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getBalanceDefinitionId() {
    return balanceDefinitionId;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBalanceDefinitionId(@jakarta.annotation.Nullable UUID balanceDefinitionId) {
    this.balanceDefinitionId = balanceDefinitionId;
  }

  public TierRequestAccessConditionsInner minimumValue(@jakarta.annotation.Nullable Integer minimumValue) {
    
    this.minimumValue = minimumValue;
    return this;
  }

  /**
   * Minimum value required to access the tier
   * @return minimumValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinimumValue() {
    return minimumValue;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumValue(@jakarta.annotation.Nullable Integer minimumValue) {
    this.minimumValue = minimumValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TierRequestAccessConditionsInner tierRequestAccessConditionsInner = (TierRequestAccessConditionsInner) o;
    return Objects.equals(this.balanceDefinitionId, tierRequestAccessConditionsInner.balanceDefinitionId) &&
        Objects.equals(this.minimumValue, tierRequestAccessConditionsInner.minimumValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceDefinitionId, minimumValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TierRequestAccessConditionsInner {\n");
    sb.append("    balanceDefinitionId: ").append(toIndentedString(balanceDefinitionId)).append("\n");
    sb.append("    minimumValue: ").append(toIndentedString(minimumValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `balanceDefinitionId` to the URL query string
    if (getBalanceDefinitionId() != null) {
      try {
        joiner.add(String.format("%sbalanceDefinitionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBalanceDefinitionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `minimumValue` to the URL query string
    if (getMinimumValue() != null) {
      try {
        joiner.add(String.format("%sminimumValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinimumValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

