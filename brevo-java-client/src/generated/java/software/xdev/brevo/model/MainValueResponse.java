/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.MainNodeResponse;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainValueResponse
 */
@JsonPropertyOrder({
  MainValueResponse.JSON_PROPERTY_ARRAY,
  MainValueResponse.JSON_PROPERTY_BOOLEAN,
  MainValueResponse.JSON_PROPERTY_CONTACT_PROPERTY,
  MainValueResponse.JSON_PROPERTY_DATE,
  MainValueResponse.JSON_PROPERTY_EVENT_PROPERTY,
  MainValueResponse.JSON_PROPERTY_EXPRESSION,
  MainValueResponse.JSON_PROPERTY_NUMBER,
  MainValueResponse.JSON_PROPERTY_STRING
})
@JsonTypeName("main.valueResponse")
public class MainValueResponse {
  public static final String JSON_PROPERTY_ARRAY = "array";
  @jakarta.annotation.Nullable
  private List<MainValueResponse> array = new ArrayList<>();

  public static final String JSON_PROPERTY_BOOLEAN = "boolean";
  @jakarta.annotation.Nullable
  private Boolean _boolean;

  public static final String JSON_PROPERTY_CONTACT_PROPERTY = "contactProperty";
  @jakarta.annotation.Nullable
  private String contactProperty;

  public static final String JSON_PROPERTY_DATE = "date";
  @jakarta.annotation.Nullable
  private String date;

  public static final String JSON_PROPERTY_EVENT_PROPERTY = "eventProperty";
  @jakarta.annotation.Nullable
  private String eventProperty;

  public static final String JSON_PROPERTY_EXPRESSION = "expression";
  @jakarta.annotation.Nullable
  private MainNodeResponse expression;

  public static final String JSON_PROPERTY_NUMBER = "number";
  @jakarta.annotation.Nullable
  private BigDecimal number;

  public static final String JSON_PROPERTY_STRING = "string";
  @jakarta.annotation.Nullable
  private String string;

  public MainValueResponse() {
  }

  public MainValueResponse array(@jakarta.annotation.Nullable List<MainValueResponse> array) {
    
    this.array = array;
    return this;
  }

  public MainValueResponse addArrayItem(MainValueResponse arrayItem) {
    if (this.array == null) {
      this.array = new ArrayList<>();
    }
    this.array.add(arrayItem);
    return this;
  }

  /**
   * Array values to define the rule
   * @return array
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MainValueResponse> getArray() {
    return array;
  }


  @JsonProperty(JSON_PROPERTY_ARRAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArray(@jakarta.annotation.Nullable List<MainValueResponse> array) {
    this.array = array;
  }

  public MainValueResponse _boolean(@jakarta.annotation.Nullable Boolean _boolean) {
    
    this._boolean = _boolean;
    return this;
  }

  /**
   * Boolean values for rule definition
   * @return _boolean
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOOLEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getBoolean() {
    return _boolean;
  }


  @JsonProperty(JSON_PROPERTY_BOOLEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoolean(@jakarta.annotation.Nullable Boolean _boolean) {
    this._boolean = _boolean;
  }

  public MainValueResponse contactProperty(@jakarta.annotation.Nullable String contactProperty) {
    
    this.contactProperty = contactProperty;
    return this;
  }

  /**
   * string
   * @return contactProperty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContactProperty() {
    return contactProperty;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactProperty(@jakarta.annotation.Nullable String contactProperty) {
    this.contactProperty = contactProperty;
  }

  public MainValueResponse date(@jakarta.annotation.Nullable String date) {
    
    this.date = date;
    return this;
  }

  /**
   * Selected date for rule definition
   * @return date
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(@jakarta.annotation.Nullable String date) {
    this.date = date;
  }

  public MainValueResponse eventProperty(@jakarta.annotation.Nullable String eventProperty) {
    
    this.eventProperty = eventProperty;
    return this;
  }

  /**
   * Selected event property for rule definition
   * @return eventProperty
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventProperty() {
    return eventProperty;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventProperty(@jakarta.annotation.Nullable String eventProperty) {
    this.eventProperty = eventProperty;
  }

  public MainValueResponse expression(@jakarta.annotation.Nullable MainNodeResponse expression) {
    
    this.expression = expression;
    return this;
  }

  /**
   * Created expression for rule definition
   * @return expression
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MainNodeResponse getExpression() {
    return expression;
  }


  @JsonProperty(JSON_PROPERTY_EXPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpression(@jakarta.annotation.Nullable MainNodeResponse expression) {
    this.expression = expression;
  }

  public MainValueResponse number(@jakarta.annotation.Nullable BigDecimal number) {
    
    this.number = number;
    return this;
  }

  /**
   * Boolean values for rule definition
   * @return number
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumber() {
    return number;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumber(@jakarta.annotation.Nullable BigDecimal number) {
    this.number = number;
  }

  public MainValueResponse string(@jakarta.annotation.Nullable String string) {
    
    this.string = string;
    return this;
  }

  /**
   * String values for rule definition
   * @return string
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getString() {
    return string;
  }


  @JsonProperty(JSON_PROPERTY_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setString(@jakarta.annotation.Nullable String string) {
    this.string = string;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainValueResponse mainValueResponse = (MainValueResponse) o;
    return Objects.equals(this.array, mainValueResponse.array) &&
        Objects.equals(this._boolean, mainValueResponse._boolean) &&
        Objects.equals(this.contactProperty, mainValueResponse.contactProperty) &&
        Objects.equals(this.date, mainValueResponse.date) &&
        Objects.equals(this.eventProperty, mainValueResponse.eventProperty) &&
        Objects.equals(this.expression, mainValueResponse.expression) &&
        Objects.equals(this.number, mainValueResponse.number) &&
        Objects.equals(this.string, mainValueResponse.string);
  }

  @Override
  public int hashCode() {
    return Objects.hash(array, _boolean, contactProperty, date, eventProperty, expression, number, string);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainValueResponse {\n");
    sb.append("    array: ").append(toIndentedString(array)).append("\n");
    sb.append("    _boolean: ").append(toIndentedString(_boolean)).append("\n");
    sb.append("    contactProperty: ").append(toIndentedString(contactProperty)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    eventProperty: ").append(toIndentedString(eventProperty)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    string: ").append(toIndentedString(string)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `array` to the URL query string
    if (getArray() != null) {
      for (int i = 0; i < getArray().size(); i++) {
        if (getArray().get(i) != null) {
          joiner.add(getArray().get(i).toUrlQueryString(String.format("%sarray%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `boolean` to the URL query string
    if (getBoolean() != null) {
      try {
        joiner.add(String.format("%sboolean%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBoolean()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contactProperty` to the URL query string
    if (getContactProperty() != null) {
      try {
        joiner.add(String.format("%scontactProperty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContactProperty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      try {
        joiner.add(String.format("%sdate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `eventProperty` to the URL query string
    if (getEventProperty() != null) {
      try {
        joiner.add(String.format("%seventProperty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEventProperty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expression` to the URL query string
    if (getExpression() != null) {
      joiner.add(getExpression().toUrlQueryString(prefix + "expression" + suffix));
    }

    // add `number` to the URL query string
    if (getNumber() != null) {
      try {
        joiner.add(String.format("%snumber%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumber()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `string` to the URL query string
    if (getString() != null) {
      try {
        joiner.add(String.format("%sstring%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getString()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

