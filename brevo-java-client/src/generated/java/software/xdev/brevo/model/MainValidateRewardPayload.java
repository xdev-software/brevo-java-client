/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainValidateRewardPayload
 */
@JsonPropertyOrder({
  MainValidateRewardPayload.JSON_PROPERTY_ATTRIBUTED_REWARD_ID,
  MainValidateRewardPayload.JSON_PROPERTY_CODE,
  MainValidateRewardPayload.JSON_PROPERTY_CONTACT_ID,
  MainValidateRewardPayload.JSON_PROPERTY_LOYALTY_SUBSCRIPTION_ID,
  MainValidateRewardPayload.JSON_PROPERTY_POINT_OF_SELL_ID,
  MainValidateRewardPayload.JSON_PROPERTY_REWARD_ID
})
@JsonTypeName("main.validateRewardPayload")
public class MainValidateRewardPayload {
  public static final String JSON_PROPERTY_ATTRIBUTED_REWARD_ID = "attributedRewardId";
  @jakarta.annotation.Nullable
  private UUID attributedRewardId;

  public static final String JSON_PROPERTY_CODE = "code";
  @jakarta.annotation.Nullable
  private String code;

  public static final String JSON_PROPERTY_CONTACT_ID = "contactId";
  @jakarta.annotation.Nullable
  private Long contactId;

  public static final String JSON_PROPERTY_LOYALTY_SUBSCRIPTION_ID = "loyaltySubscriptionId";
  @jakarta.annotation.Nullable
  private String loyaltySubscriptionId;

  public static final String JSON_PROPERTY_POINT_OF_SELL_ID = "pointOfSellId";
  @jakarta.annotation.Nullable
  private String pointOfSellId;

  public static final String JSON_PROPERTY_REWARD_ID = "rewardId";
  @jakarta.annotation.Nullable
  private UUID rewardId;

  public MainValidateRewardPayload() {
  }

  public MainValidateRewardPayload attributedRewardId(@jakarta.annotation.Nullable UUID attributedRewardId) {
    
    this.attributedRewardId = attributedRewardId;
    return this;
  }

  /**
   * Unique identifier for the attributed reward
   * @return attributedRewardId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTED_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getAttributedRewardId() {
    return attributedRewardId;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTED_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributedRewardId(@jakarta.annotation.Nullable UUID attributedRewardId) {
    this.attributedRewardId = attributedRewardId;
  }

  public MainValidateRewardPayload code(@jakarta.annotation.Nullable String code) {
    
    this.code = code;
    return this;
  }

  /**
   * Validation code for the reward
   * @return code
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(@jakarta.annotation.Nullable String code) {
    this.code = code;
  }

  public MainValidateRewardPayload contactId(@jakarta.annotation.Nullable Long contactId) {
    
    this.contactId = contactId;
    return this;
  }

  /**
   * Unique identifier for the contact
   * minimum: 1
   * @return contactId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getContactId() {
    return contactId;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(@jakarta.annotation.Nullable Long contactId) {
    this.contactId = contactId;
  }

  public MainValidateRewardPayload loyaltySubscriptionId(@jakarta.annotation.Nullable String loyaltySubscriptionId) {
    
    this.loyaltySubscriptionId = loyaltySubscriptionId;
    return this;
  }

  /**
   * Identifier for the loyalty subscription
   * @return loyaltySubscriptionId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOYALTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLoyaltySubscriptionId() {
    return loyaltySubscriptionId;
  }


  @JsonProperty(JSON_PROPERTY_LOYALTY_SUBSCRIPTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoyaltySubscriptionId(@jakarta.annotation.Nullable String loyaltySubscriptionId) {
    this.loyaltySubscriptionId = loyaltySubscriptionId;
  }

  public MainValidateRewardPayload pointOfSellId(@jakarta.annotation.Nullable String pointOfSellId) {
    
    this.pointOfSellId = pointOfSellId;
    return this;
  }

  /**
   * Identifier for the point of sale
   * @return pointOfSellId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POINT_OF_SELL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPointOfSellId() {
    return pointOfSellId;
  }


  @JsonProperty(JSON_PROPERTY_POINT_OF_SELL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPointOfSellId(@jakarta.annotation.Nullable String pointOfSellId) {
    this.pointOfSellId = pointOfSellId;
  }

  public MainValidateRewardPayload rewardId(@jakarta.annotation.Nullable UUID rewardId) {
    
    this.rewardId = rewardId;
    return this;
  }

  /**
   * Unique identifier for the reward
   * @return rewardId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getRewardId() {
    return rewardId;
  }


  @JsonProperty(JSON_PROPERTY_REWARD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRewardId(@jakarta.annotation.Nullable UUID rewardId) {
    this.rewardId = rewardId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainValidateRewardPayload mainValidateRewardPayload = (MainValidateRewardPayload) o;
    return Objects.equals(this.attributedRewardId, mainValidateRewardPayload.attributedRewardId) &&
        Objects.equals(this.code, mainValidateRewardPayload.code) &&
        Objects.equals(this.contactId, mainValidateRewardPayload.contactId) &&
        Objects.equals(this.loyaltySubscriptionId, mainValidateRewardPayload.loyaltySubscriptionId) &&
        Objects.equals(this.pointOfSellId, mainValidateRewardPayload.pointOfSellId) &&
        Objects.equals(this.rewardId, mainValidateRewardPayload.rewardId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributedRewardId, code, contactId, loyaltySubscriptionId, pointOfSellId, rewardId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainValidateRewardPayload {\n");
    sb.append("    attributedRewardId: ").append(toIndentedString(attributedRewardId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    loyaltySubscriptionId: ").append(toIndentedString(loyaltySubscriptionId)).append("\n");
    sb.append("    pointOfSellId: ").append(toIndentedString(pointOfSellId)).append("\n");
    sb.append("    rewardId: ").append(toIndentedString(rewardId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `attributedRewardId` to the URL query string
    if (getAttributedRewardId() != null) {
      try {
        joiner.add(String.format("%sattributedRewardId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttributedRewardId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `code` to the URL query string
    if (getCode() != null) {
      try {
        joiner.add(String.format("%scode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contactId` to the URL query string
    if (getContactId() != null) {
      try {
        joiner.add(String.format("%scontactId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContactId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `loyaltySubscriptionId` to the URL query string
    if (getLoyaltySubscriptionId() != null) {
      try {
        joiner.add(String.format("%sloyaltySubscriptionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoyaltySubscriptionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `pointOfSellId` to the URL query string
    if (getPointOfSellId() != null) {
      try {
        joiner.add(String.format("%spointOfSellId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPointOfSellId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `rewardId` to the URL query string
    if (getRewardId() != null) {
      try {
        joiner.add(String.format("%srewardId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRewardId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

