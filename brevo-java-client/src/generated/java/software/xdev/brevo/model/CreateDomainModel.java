/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import software.xdev.brevo.model.CreateDomainModelDnsRecords;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateDomainModel
 */
@JsonPropertyOrder({
  CreateDomainModel.JSON_PROPERTY_ID,
  CreateDomainModel.JSON_PROPERTY_DOMAIN_NAME,
  CreateDomainModel.JSON_PROPERTY_MESSAGE,
  CreateDomainModel.JSON_PROPERTY_DNS_RECORDS
})
@JsonTypeName("createDomainModel")
public class CreateDomainModel {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_DOMAIN_NAME = "domain_name";
  private String domainName;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_DNS_RECORDS = "dns_records";
  private CreateDomainModelDnsRecords dnsRecords;

  public CreateDomainModel() {
  }

  public CreateDomainModel id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the Domain created
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public CreateDomainModel domainName(String domainName) {
    
    this.domainName = domainName;
    return this;
  }

   /**
   * Domain
   * @return domainName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomainName() {
    return domainName;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public CreateDomainModel message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Success message
   * @return message
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }


  public CreateDomainModel dnsRecords(CreateDomainModelDnsRecords dnsRecords) {
    
    this.dnsRecords = dnsRecords;
    return this;
  }

   /**
   * Get dnsRecords
   * @return dnsRecords
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DNS_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateDomainModelDnsRecords getDnsRecords() {
    return dnsRecords;
  }


  @JsonProperty(JSON_PROPERTY_DNS_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDnsRecords(CreateDomainModelDnsRecords dnsRecords) {
    this.dnsRecords = dnsRecords;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainModel createDomainModel = (CreateDomainModel) o;
    return Objects.equals(this.id, createDomainModel.id) &&
        Objects.equals(this.domainName, createDomainModel.domainName) &&
        Objects.equals(this.message, createDomainModel.message) &&
        Objects.equals(this.dnsRecords, createDomainModel.dnsRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, domainName, message, dnsRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainModel {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    dnsRecords: ").append(toIndentedString(dnsRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `domain_name` to the URL query string
    if (getDomainName() != null) {
      try {
        joiner.add(String.format("%sdomain_name%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDomainName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `message` to the URL query string
    if (getMessage() != null) {
      try {
        joiner.add(String.format("%smessage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMessage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `dns_records` to the URL query string
    if (getDnsRecords() != null) {
      joiner.add(getDnsRecords().toUrlQueryString(prefix + "dns_records" + suffix));
    }

    return joiner.toString();
  }

}

