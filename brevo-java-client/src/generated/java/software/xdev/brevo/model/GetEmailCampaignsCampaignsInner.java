/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import software.xdev.brevo.model.GetCampaignRecipients;
import software.xdev.brevo.model.GetExtendedCampaignOverviewAllOfSender;
import software.xdev.brevo.model.GetExtendedCampaignStats;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetEmailCampaignsCampaignsInner
 */
@JsonPropertyOrder({
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_ID,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_NAME,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SUBJECT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_PREVIEW_TEXT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_TYPE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_STATUS,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SCHEDULED_AT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_AB_TESTING,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SUBJECT_A,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SUBJECT_B,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SPLIT_RULE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_WINNER_CRITERIA,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_WINNER_DELAY,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SEND_AT_BEST_TIME,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_UTM_CAMPAIGN_VALUE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_UTM_SOURCE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_UTM_MEDIUM,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_UTM_I_D_ACTIVE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_TEST_SENT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_HEADER,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_FOOTER,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SENDER,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_REPLY_TO,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_TO_FIELD,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_HTML_CONTENT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SHARE_LINK,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_TAG,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_CREATED_AT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_MODIFIED_AT,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_INLINE_IMAGE_ACTIVATION,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_MIRROR_ACTIVE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_RECURRING,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_SENT_DATE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_RETURN_BOUNCE,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_RECIPIENTS,
  GetEmailCampaignsCampaignsInner.JSON_PROPERTY_STATISTICS
})
@JsonTypeName("getEmailCampaigns_campaigns_inner")
public class GetEmailCampaignsCampaignsInner {
  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nonnull
  private Long id;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @jakarta.annotation.Nullable
  private String subject;

  public static final String JSON_PROPERTY_PREVIEW_TEXT = "previewText";
  @jakarta.annotation.Nullable
  private String previewText;

  /**
   * Type of campaign
   */
  public enum TypeEnum {
    CLASSIC(String.valueOf("classic")),
    
    TRIGGER(String.valueOf("trigger"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nonnull
  private TypeEnum type;

  /**
   * Status of the campaign
   */
  public enum StatusEnum {
    DRAFT(String.valueOf("draft")),
    
    SENT(String.valueOf("sent")),
    
    ARCHIVE(String.valueOf("archive")),
    
    QUEUED(String.valueOf("queued")),
    
    SUSPENDED(String.valueOf("suspended")),
    
    IN_PROCESS(String.valueOf("in_process"));

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  @jakarta.annotation.Nonnull
  private StatusEnum status;

  public static final String JSON_PROPERTY_SCHEDULED_AT = "scheduledAt";
  @jakarta.annotation.Nullable
  private String scheduledAt;

  public static final String JSON_PROPERTY_AB_TESTING = "abTesting";
  @jakarta.annotation.Nullable
  private Boolean abTesting;

  public static final String JSON_PROPERTY_SUBJECT_A = "subjectA";
  @jakarta.annotation.Nullable
  private String subjectA;

  public static final String JSON_PROPERTY_SUBJECT_B = "subjectB";
  @jakarta.annotation.Nullable
  private String subjectB;

  public static final String JSON_PROPERTY_SPLIT_RULE = "splitRule";
  @jakarta.annotation.Nullable
  private Integer splitRule;

  public static final String JSON_PROPERTY_WINNER_CRITERIA = "winnerCriteria";
  @jakarta.annotation.Nullable
  private String winnerCriteria;

  public static final String JSON_PROPERTY_WINNER_DELAY = "winnerDelay";
  @jakarta.annotation.Nullable
  private Integer winnerDelay;

  public static final String JSON_PROPERTY_SEND_AT_BEST_TIME = "sendAtBestTime";
  @jakarta.annotation.Nullable
  private Boolean sendAtBestTime;

  public static final String JSON_PROPERTY_UTM_CAMPAIGN_VALUE = "utmCampaignValue";
  @jakarta.annotation.Nullable
  private String utmCampaignValue;

  public static final String JSON_PROPERTY_UTM_SOURCE = "utmSource";
  @jakarta.annotation.Nullable
  private String utmSource;

  public static final String JSON_PROPERTY_UTM_MEDIUM = "utmMedium";
  @jakarta.annotation.Nullable
  private String utmMedium;

  public static final String JSON_PROPERTY_UTM_I_D_ACTIVE = "utmIDActive";
  @jakarta.annotation.Nullable
  private Boolean utmIDActive;

  public static final String JSON_PROPERTY_TEST_SENT = "testSent";
  @jakarta.annotation.Nonnull
  private Boolean testSent;

  public static final String JSON_PROPERTY_HEADER = "header";
  @jakarta.annotation.Nonnull
  private String header;

  public static final String JSON_PROPERTY_FOOTER = "footer";
  @jakarta.annotation.Nonnull
  private String footer;

  public static final String JSON_PROPERTY_SENDER = "sender";
  @jakarta.annotation.Nonnull
  private GetExtendedCampaignOverviewAllOfSender sender;

  public static final String JSON_PROPERTY_REPLY_TO = "replyTo";
  @jakarta.annotation.Nonnull
  private String replyTo;

  public static final String JSON_PROPERTY_TO_FIELD = "toField";
  @jakarta.annotation.Nullable
  private String toField;

  public static final String JSON_PROPERTY_HTML_CONTENT = "htmlContent";
  @jakarta.annotation.Nonnull
  private String htmlContent;

  public static final String JSON_PROPERTY_SHARE_LINK = "shareLink";
  @jakarta.annotation.Nullable
  private String shareLink;

  public static final String JSON_PROPERTY_TAG = "tag";
  @jakarta.annotation.Nullable
  private String tag;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @jakarta.annotation.Nonnull
  private String createdAt;

  public static final String JSON_PROPERTY_MODIFIED_AT = "modifiedAt";
  @jakarta.annotation.Nonnull
  private String modifiedAt;

  public static final String JSON_PROPERTY_INLINE_IMAGE_ACTIVATION = "inlineImageActivation";
  @jakarta.annotation.Nullable
  private Boolean inlineImageActivation;

  public static final String JSON_PROPERTY_MIRROR_ACTIVE = "mirrorActive";
  @jakarta.annotation.Nullable
  private Boolean mirrorActive;

  public static final String JSON_PROPERTY_RECURRING = "recurring";
  @jakarta.annotation.Nullable
  private Boolean recurring;

  public static final String JSON_PROPERTY_SENT_DATE = "sentDate";
  @jakarta.annotation.Nullable
  private String sentDate;

  public static final String JSON_PROPERTY_RETURN_BOUNCE = "returnBounce";
  @jakarta.annotation.Nullable
  private Long returnBounce;

  public static final String JSON_PROPERTY_RECIPIENTS = "recipients";
  @jakarta.annotation.Nonnull
  private GetCampaignRecipients recipients;

  public static final String JSON_PROPERTY_STATISTICS = "statistics";
  @jakarta.annotation.Nonnull
  private GetExtendedCampaignStats statistics;

  public GetEmailCampaignsCampaignsInner() {
  }

  public GetEmailCampaignsCampaignsInner id(@jakarta.annotation.Nonnull Long id) {
    
    this.id = id;
    return this;
  }

  /**
   * ID of the campaign
   * @return id
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(@jakarta.annotation.Nonnull Long id) {
    this.id = id;
  }

  public GetEmailCampaignsCampaignsInner name(@jakarta.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Name of the campaign
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }

  public GetEmailCampaignsCampaignsInner subject(@jakarta.annotation.Nullable String subject) {
    
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;
   * @return subject
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(@jakarta.annotation.Nullable String subject) {
    this.subject = subject;
  }

  public GetEmailCampaignsCampaignsInner previewText(@jakarta.annotation.Nullable String previewText) {
    
    this.previewText = previewText;
    return this;
  }

  /**
   * Preview text or preheader of the email campaign
   * @return previewText
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviewText() {
    return previewText;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewText(@jakarta.annotation.Nullable String previewText) {
    this.previewText = previewText;
  }

  public GetEmailCampaignsCampaignsInner type(@jakarta.annotation.Nonnull TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Type of campaign
   * @return type
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(@jakarta.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }

  public GetEmailCampaignsCampaignsInner status(@jakarta.annotation.Nonnull StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * Status of the campaign
   * @return status
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(@jakarta.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }

  public GetEmailCampaignsCampaignsInner scheduledAt(@jakarta.annotation.Nullable String scheduledAt) {
    
    this.scheduledAt = scheduledAt;
    return this;
  }

  /**
   * UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return scheduledAt
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheduledAt() {
    return scheduledAt;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduledAt(@jakarta.annotation.Nullable String scheduledAt) {
    this.scheduledAt = scheduledAt;
  }

  public GetEmailCampaignsCampaignsInner abTesting(@jakarta.annotation.Nullable Boolean abTesting) {
    
    this.abTesting = abTesting;
    return this;
  }

  /**
   * Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.
   * @return abTesting
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AB_TESTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAbTesting() {
    return abTesting;
  }


  @JsonProperty(JSON_PROPERTY_AB_TESTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbTesting(@jakarta.annotation.Nullable Boolean abTesting) {
    this.abTesting = abTesting;
  }

  public GetEmailCampaignsCampaignsInner subjectA(@jakarta.annotation.Nullable String subjectA) {
    
    this.subjectA = subjectA;
    return this;
  }

  /**
   * Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return subjectA
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectA() {
    return subjectA;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectA(@jakarta.annotation.Nullable String subjectA) {
    this.subjectA = subjectA;
  }

  public GetEmailCampaignsCampaignsInner subjectB(@jakarta.annotation.Nullable String subjectB) {
    
    this.subjectB = subjectB;
    return this;
  }

  /**
   * Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return subjectB
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_B)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectB() {
    return subjectB;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_B)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectB(@jakarta.annotation.Nullable String subjectB) {
    this.subjectB = subjectB;
  }

  public GetEmailCampaignsCampaignsInner splitRule(@jakarta.annotation.Nullable Integer splitRule) {
    
    this.splitRule = splitRule;
    return this;
  }

  /**
   * The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return splitRule
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPLIT_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSplitRule() {
    return splitRule;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitRule(@jakarta.annotation.Nullable Integer splitRule) {
    this.splitRule = splitRule;
  }

  public GetEmailCampaignsCampaignsInner winnerCriteria(@jakarta.annotation.Nullable String winnerCriteria) {
    
    this.winnerCriteria = winnerCriteria;
    return this;
  }

  /**
   * Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return winnerCriteria
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WINNER_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWinnerCriteria() {
    return winnerCriteria;
  }


  @JsonProperty(JSON_PROPERTY_WINNER_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinnerCriteria(@jakarta.annotation.Nullable String winnerCriteria) {
    this.winnerCriteria = winnerCriteria;
  }

  public GetEmailCampaignsCampaignsInner winnerDelay(@jakarta.annotation.Nullable Integer winnerDelay) {
    
    this.winnerDelay = winnerDelay;
    return this;
  }

  /**
   * The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return winnerDelay
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WINNER_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWinnerDelay() {
    return winnerDelay;
  }


  @JsonProperty(JSON_PROPERTY_WINNER_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinnerDelay(@jakarta.annotation.Nullable Integer winnerDelay) {
    this.winnerDelay = winnerDelay;
  }

  public GetEmailCampaignsCampaignsInner sendAtBestTime(@jakarta.annotation.Nullable Boolean sendAtBestTime) {
    
    this.sendAtBestTime = sendAtBestTime;
    return this;
  }

  /**
   * It is true if you have chosen to send your campaign at best time, otherwise it is false
   * @return sendAtBestTime
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_AT_BEST_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendAtBestTime() {
    return sendAtBestTime;
  }


  @JsonProperty(JSON_PROPERTY_SEND_AT_BEST_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendAtBestTime(@jakarta.annotation.Nullable Boolean sendAtBestTime) {
    this.sendAtBestTime = sendAtBestTime;
  }

  public GetEmailCampaignsCampaignsInner utmCampaignValue(@jakarta.annotation.Nullable String utmCampaignValue) {
    
    this.utmCampaignValue = utmCampaignValue;
    return this;
  }

  /**
   * utm parameter associated with campaign
   * @return utmCampaignValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTM_CAMPAIGN_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUtmCampaignValue() {
    return utmCampaignValue;
  }


  @JsonProperty(JSON_PROPERTY_UTM_CAMPAIGN_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtmCampaignValue(@jakarta.annotation.Nullable String utmCampaignValue) {
    this.utmCampaignValue = utmCampaignValue;
  }

  public GetEmailCampaignsCampaignsInner utmSource(@jakarta.annotation.Nullable String utmSource) {
    
    this.utmSource = utmSource;
    return this;
  }

  /**
   * Get utmSource
   * @return utmSource
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTM_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUtmSource() {
    return utmSource;
  }


  @JsonProperty(JSON_PROPERTY_UTM_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtmSource(@jakarta.annotation.Nullable String utmSource) {
    this.utmSource = utmSource;
  }

  public GetEmailCampaignsCampaignsInner utmMedium(@jakarta.annotation.Nullable String utmMedium) {
    
    this.utmMedium = utmMedium;
    return this;
  }

  /**
   * Get utmMedium
   * @return utmMedium
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTM_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUtmMedium() {
    return utmMedium;
  }


  @JsonProperty(JSON_PROPERTY_UTM_MEDIUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtmMedium(@jakarta.annotation.Nullable String utmMedium) {
    this.utmMedium = utmMedium;
  }

  public GetEmailCampaignsCampaignsInner utmIDActive(@jakarta.annotation.Nullable Boolean utmIDActive) {
    
    this.utmIDActive = utmIDActive;
    return this;
  }

  /**
   * utm id activate
   * @return utmIDActive
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UTM_I_D_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUtmIDActive() {
    return utmIDActive;
  }


  @JsonProperty(JSON_PROPERTY_UTM_I_D_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUtmIDActive(@jakarta.annotation.Nullable Boolean utmIDActive) {
    this.utmIDActive = utmIDActive;
  }

  public GetEmailCampaignsCampaignsInner testSent(@jakarta.annotation.Nonnull Boolean testSent) {
    
    this.testSent = testSent;
    return this;
  }

  /**
   * Retrieved the status of test email sending. (true&#x3D;Test email has been sent  false&#x3D;Test email has not been sent)
   * @return testSent
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTestSent() {
    return testSent;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestSent(@jakarta.annotation.Nonnull Boolean testSent) {
    this.testSent = testSent;
  }

  public GetEmailCampaignsCampaignsInner header(@jakarta.annotation.Nonnull String header) {
    
    this.header = header;
    return this;
  }

  /**
   * Header of the campaign
   * @return header
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHeader() {
    return header;
  }


  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeader(@jakarta.annotation.Nonnull String header) {
    this.header = header;
  }

  public GetEmailCampaignsCampaignsInner footer(@jakarta.annotation.Nonnull String footer) {
    
    this.footer = footer;
    return this;
  }

  /**
   * Footer of the campaign
   * @return footer
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FOOTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFooter() {
    return footer;
  }


  @JsonProperty(JSON_PROPERTY_FOOTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFooter(@jakarta.annotation.Nonnull String footer) {
    this.footer = footer;
  }

  public GetEmailCampaignsCampaignsInner sender(@jakarta.annotation.Nonnull GetExtendedCampaignOverviewAllOfSender sender) {
    
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetExtendedCampaignOverviewAllOfSender getSender() {
    return sender;
  }


  @JsonProperty(JSON_PROPERTY_SENDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSender(@jakarta.annotation.Nonnull GetExtendedCampaignOverviewAllOfSender sender) {
    this.sender = sender;
  }

  public GetEmailCampaignsCampaignsInner replyTo(@jakarta.annotation.Nonnull String replyTo) {
    
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Email defined as the \&quot;Reply to\&quot; of the campaign
   * @return replyTo
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReplyTo() {
    return replyTo;
  }


  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReplyTo(@jakarta.annotation.Nonnull String replyTo) {
    this.replyTo = replyTo;
  }

  public GetEmailCampaignsCampaignsInner toField(@jakarta.annotation.Nullable String toField) {
    
    this.toField = toField;
    return this;
  }

  /**
   * Customisation of the \&quot;to\&quot; field of the campaign
   * @return toField
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToField() {
    return toField;
  }


  @JsonProperty(JSON_PROPERTY_TO_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToField(@jakarta.annotation.Nullable String toField) {
    this.toField = toField;
  }

  public GetEmailCampaignsCampaignsInner htmlContent(@jakarta.annotation.Nonnull String htmlContent) {
    
    this.htmlContent = htmlContent;
    return this;
  }

  /**
   * HTML content of the campaign
   * @return htmlContent
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHtmlContent() {
    return htmlContent;
  }


  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHtmlContent(@jakarta.annotation.Nonnull String htmlContent) {
    this.htmlContent = htmlContent;
  }

  public GetEmailCampaignsCampaignsInner shareLink(@jakarta.annotation.Nullable String shareLink) {
    
    this.shareLink = shareLink;
    return this;
  }

  /**
   * Link to share the campaign on social medias
   * @return shareLink
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARE_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShareLink() {
    return shareLink;
  }


  @JsonProperty(JSON_PROPERTY_SHARE_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShareLink(@jakarta.annotation.Nullable String shareLink) {
    this.shareLink = shareLink;
  }

  public GetEmailCampaignsCampaignsInner tag(@jakarta.annotation.Nullable String tag) {
    
    this.tag = tag;
    return this;
  }

  /**
   * Tag of the campaign
   * @return tag
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(@jakarta.annotation.Nullable String tag) {
    this.tag = tag;
  }

  public GetEmailCampaignsCampaignsInner createdAt(@jakarta.annotation.Nonnull String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return createdAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@jakarta.annotation.Nonnull String createdAt) {
    this.createdAt = createdAt;
  }

  public GetEmailCampaignsCampaignsInner modifiedAt(@jakarta.annotation.Nonnull String modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return modifiedAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedAt() {
    return modifiedAt;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedAt(@jakarta.annotation.Nonnull String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public GetEmailCampaignsCampaignsInner inlineImageActivation(@jakarta.annotation.Nullable Boolean inlineImageActivation) {
    
    this.inlineImageActivation = inlineImageActivation;
    return this;
  }

  /**
   * Status of inline image. inlineImageActivation &#x3D; false means image can’t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email.
   * @return inlineImageActivation
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INLINE_IMAGE_ACTIVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInlineImageActivation() {
    return inlineImageActivation;
  }


  @JsonProperty(JSON_PROPERTY_INLINE_IMAGE_ACTIVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInlineImageActivation(@jakarta.annotation.Nullable Boolean inlineImageActivation) {
    this.inlineImageActivation = inlineImageActivation;
  }

  public GetEmailCampaignsCampaignsInner mirrorActive(@jakarta.annotation.Nullable Boolean mirrorActive) {
    
    this.mirrorActive = mirrorActive;
    return this;
  }

  /**
   * Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign
   * @return mirrorActive
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIRROR_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMirrorActive() {
    return mirrorActive;
  }


  @JsonProperty(JSON_PROPERTY_MIRROR_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMirrorActive(@jakarta.annotation.Nullable Boolean mirrorActive) {
    this.mirrorActive = mirrorActive;
  }

  public GetEmailCampaignsCampaignsInner recurring(@jakarta.annotation.Nullable Boolean recurring) {
    
    this.recurring = recurring;
    return this;
  }

  /**
   * FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times
   * @return recurring
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRecurring() {
    return recurring;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurring(@jakarta.annotation.Nullable Boolean recurring) {
    this.recurring = recurring;
  }

  public GetEmailCampaignsCampaignsInner sentDate(@jakarta.annotation.Nullable String sentDate) {
    
    this.sentDate = sentDate;
    return this;
  }

  /**
   * Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if &#39;status&#39; of the campaign is &#39;sent&#39;
   * @return sentDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSentDate() {
    return sentDate;
  }


  @JsonProperty(JSON_PROPERTY_SENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentDate(@jakarta.annotation.Nullable String sentDate) {
    this.sentDate = sentDate;
  }

  public GetEmailCampaignsCampaignsInner returnBounce(@jakarta.annotation.Nullable Long returnBounce) {
    
    this.returnBounce = returnBounce;
    return this;
  }

  /**
   * Total number of non-delivered campaigns for a particular campaign id.
   * @return returnBounce
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETURN_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getReturnBounce() {
    return returnBounce;
  }


  @JsonProperty(JSON_PROPERTY_RETURN_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReturnBounce(@jakarta.annotation.Nullable Long returnBounce) {
    this.returnBounce = returnBounce;
  }

  public GetEmailCampaignsCampaignsInner recipients(@jakarta.annotation.Nonnull GetCampaignRecipients recipients) {
    
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetCampaignRecipients getRecipients() {
    return recipients;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecipients(@jakarta.annotation.Nonnull GetCampaignRecipients recipients) {
    this.recipients = recipients;
  }

  public GetEmailCampaignsCampaignsInner statistics(@jakarta.annotation.Nonnull GetExtendedCampaignStats statistics) {
    
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetExtendedCampaignStats getStatistics() {
    return statistics;
  }


  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatistics(@jakarta.annotation.Nonnull GetExtendedCampaignStats statistics) {
    this.statistics = statistics;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEmailCampaignsCampaignsInner getEmailCampaignsCampaignsInner = (GetEmailCampaignsCampaignsInner) o;
    return Objects.equals(this.id, getEmailCampaignsCampaignsInner.id) &&
        Objects.equals(this.name, getEmailCampaignsCampaignsInner.name) &&
        Objects.equals(this.subject, getEmailCampaignsCampaignsInner.subject) &&
        Objects.equals(this.previewText, getEmailCampaignsCampaignsInner.previewText) &&
        Objects.equals(this.type, getEmailCampaignsCampaignsInner.type) &&
        Objects.equals(this.status, getEmailCampaignsCampaignsInner.status) &&
        Objects.equals(this.scheduledAt, getEmailCampaignsCampaignsInner.scheduledAt) &&
        Objects.equals(this.abTesting, getEmailCampaignsCampaignsInner.abTesting) &&
        Objects.equals(this.subjectA, getEmailCampaignsCampaignsInner.subjectA) &&
        Objects.equals(this.subjectB, getEmailCampaignsCampaignsInner.subjectB) &&
        Objects.equals(this.splitRule, getEmailCampaignsCampaignsInner.splitRule) &&
        Objects.equals(this.winnerCriteria, getEmailCampaignsCampaignsInner.winnerCriteria) &&
        Objects.equals(this.winnerDelay, getEmailCampaignsCampaignsInner.winnerDelay) &&
        Objects.equals(this.sendAtBestTime, getEmailCampaignsCampaignsInner.sendAtBestTime) &&
        Objects.equals(this.utmCampaignValue, getEmailCampaignsCampaignsInner.utmCampaignValue) &&
        Objects.equals(this.utmSource, getEmailCampaignsCampaignsInner.utmSource) &&
        Objects.equals(this.utmMedium, getEmailCampaignsCampaignsInner.utmMedium) &&
        Objects.equals(this.utmIDActive, getEmailCampaignsCampaignsInner.utmIDActive) &&
        Objects.equals(this.testSent, getEmailCampaignsCampaignsInner.testSent) &&
        Objects.equals(this.header, getEmailCampaignsCampaignsInner.header) &&
        Objects.equals(this.footer, getEmailCampaignsCampaignsInner.footer) &&
        Objects.equals(this.sender, getEmailCampaignsCampaignsInner.sender) &&
        Objects.equals(this.replyTo, getEmailCampaignsCampaignsInner.replyTo) &&
        Objects.equals(this.toField, getEmailCampaignsCampaignsInner.toField) &&
        Objects.equals(this.htmlContent, getEmailCampaignsCampaignsInner.htmlContent) &&
        Objects.equals(this.shareLink, getEmailCampaignsCampaignsInner.shareLink) &&
        Objects.equals(this.tag, getEmailCampaignsCampaignsInner.tag) &&
        Objects.equals(this.createdAt, getEmailCampaignsCampaignsInner.createdAt) &&
        Objects.equals(this.modifiedAt, getEmailCampaignsCampaignsInner.modifiedAt) &&
        Objects.equals(this.inlineImageActivation, getEmailCampaignsCampaignsInner.inlineImageActivation) &&
        Objects.equals(this.mirrorActive, getEmailCampaignsCampaignsInner.mirrorActive) &&
        Objects.equals(this.recurring, getEmailCampaignsCampaignsInner.recurring) &&
        Objects.equals(this.sentDate, getEmailCampaignsCampaignsInner.sentDate) &&
        Objects.equals(this.returnBounce, getEmailCampaignsCampaignsInner.returnBounce) &&
        Objects.equals(this.recipients, getEmailCampaignsCampaignsInner.recipients) &&
        Objects.equals(this.statistics, getEmailCampaignsCampaignsInner.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, subject, previewText, type, status, scheduledAt, abTesting, subjectA, subjectB, splitRule, winnerCriteria, winnerDelay, sendAtBestTime, utmCampaignValue, utmSource, utmMedium, utmIDActive, testSent, header, footer, sender, replyTo, toField, htmlContent, shareLink, tag, createdAt, modifiedAt, inlineImageActivation, mirrorActive, recurring, sentDate, returnBounce, recipients, statistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEmailCampaignsCampaignsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    previewText: ").append(toIndentedString(previewText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("    abTesting: ").append(toIndentedString(abTesting)).append("\n");
    sb.append("    subjectA: ").append(toIndentedString(subjectA)).append("\n");
    sb.append("    subjectB: ").append(toIndentedString(subjectB)).append("\n");
    sb.append("    splitRule: ").append(toIndentedString(splitRule)).append("\n");
    sb.append("    winnerCriteria: ").append(toIndentedString(winnerCriteria)).append("\n");
    sb.append("    winnerDelay: ").append(toIndentedString(winnerDelay)).append("\n");
    sb.append("    sendAtBestTime: ").append(toIndentedString(sendAtBestTime)).append("\n");
    sb.append("    utmCampaignValue: ").append(toIndentedString(utmCampaignValue)).append("\n");
    sb.append("    utmSource: ").append(toIndentedString(utmSource)).append("\n");
    sb.append("    utmMedium: ").append(toIndentedString(utmMedium)).append("\n");
    sb.append("    utmIDActive: ").append(toIndentedString(utmIDActive)).append("\n");
    sb.append("    testSent: ").append(toIndentedString(testSent)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    toField: ").append(toIndentedString(toField)).append("\n");
    sb.append("    htmlContent: ").append(toIndentedString(htmlContent)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    inlineImageActivation: ").append(toIndentedString(inlineImageActivation)).append("\n");
    sb.append("    mirrorActive: ").append(toIndentedString(mirrorActive)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    sentDate: ").append(toIndentedString(sentDate)).append("\n");
    sb.append("    returnBounce: ").append(toIndentedString(returnBounce)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subject` to the URL query string
    if (getSubject() != null) {
      try {
        joiner.add(String.format("%ssubject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `previewText` to the URL query string
    if (getPreviewText() != null) {
      try {
        joiner.add(String.format("%spreviewText%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviewText()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scheduledAt` to the URL query string
    if (getScheduledAt() != null) {
      try {
        joiner.add(String.format("%sscheduledAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScheduledAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `abTesting` to the URL query string
    if (getAbTesting() != null) {
      try {
        joiner.add(String.format("%sabTesting%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAbTesting()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectA` to the URL query string
    if (getSubjectA() != null) {
      try {
        joiner.add(String.format("%ssubjectA%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectA()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectB` to the URL query string
    if (getSubjectB() != null) {
      try {
        joiner.add(String.format("%ssubjectB%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectB()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `splitRule` to the URL query string
    if (getSplitRule() != null) {
      try {
        joiner.add(String.format("%ssplitRule%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSplitRule()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `winnerCriteria` to the URL query string
    if (getWinnerCriteria() != null) {
      try {
        joiner.add(String.format("%swinnerCriteria%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWinnerCriteria()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `winnerDelay` to the URL query string
    if (getWinnerDelay() != null) {
      try {
        joiner.add(String.format("%swinnerDelay%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWinnerDelay()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sendAtBestTime` to the URL query string
    if (getSendAtBestTime() != null) {
      try {
        joiner.add(String.format("%ssendAtBestTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSendAtBestTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `utmCampaignValue` to the URL query string
    if (getUtmCampaignValue() != null) {
      try {
        joiner.add(String.format("%sutmCampaignValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtmCampaignValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `utmSource` to the URL query string
    if (getUtmSource() != null) {
      try {
        joiner.add(String.format("%sutmSource%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtmSource()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `utmMedium` to the URL query string
    if (getUtmMedium() != null) {
      try {
        joiner.add(String.format("%sutmMedium%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtmMedium()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `utmIDActive` to the URL query string
    if (getUtmIDActive() != null) {
      try {
        joiner.add(String.format("%sutmIDActive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUtmIDActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `testSent` to the URL query string
    if (getTestSent() != null) {
      try {
        joiner.add(String.format("%stestSent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTestSent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `header` to the URL query string
    if (getHeader() != null) {
      try {
        joiner.add(String.format("%sheader%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeader()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `footer` to the URL query string
    if (getFooter() != null) {
      try {
        joiner.add(String.format("%sfooter%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFooter()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sender` to the URL query string
    if (getSender() != null) {
      joiner.add(getSender().toUrlQueryString(prefix + "sender" + suffix));
    }

    // add `replyTo` to the URL query string
    if (getReplyTo() != null) {
      try {
        joiner.add(String.format("%sreplyTo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReplyTo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `toField` to the URL query string
    if (getToField() != null) {
      try {
        joiner.add(String.format("%stoField%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getToField()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `htmlContent` to the URL query string
    if (getHtmlContent() != null) {
      try {
        joiner.add(String.format("%shtmlContent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHtmlContent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `shareLink` to the URL query string
    if (getShareLink() != null) {
      try {
        joiner.add(String.format("%sshareLink%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShareLink()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tag` to the URL query string
    if (getTag() != null) {
      try {
        joiner.add(String.format("%stag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `modifiedAt` to the URL query string
    if (getModifiedAt() != null) {
      try {
        joiner.add(String.format("%smodifiedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModifiedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inlineImageActivation` to the URL query string
    if (getInlineImageActivation() != null) {
      try {
        joiner.add(String.format("%sinlineImageActivation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInlineImageActivation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mirrorActive` to the URL query string
    if (getMirrorActive() != null) {
      try {
        joiner.add(String.format("%smirrorActive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMirrorActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `recurring` to the URL query string
    if (getRecurring() != null) {
      try {
        joiner.add(String.format("%srecurring%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRecurring()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sentDate` to the URL query string
    if (getSentDate() != null) {
      try {
        joiner.add(String.format("%ssentDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSentDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `returnBounce` to the URL query string
    if (getReturnBounce() != null) {
      try {
        joiner.add(String.format("%sreturnBounce%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReturnBounce()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `recipients` to the URL query string
    if (getRecipients() != null) {
      joiner.add(getRecipients().toUrlQueryString(prefix + "recipients" + suffix));
    }

    // add `statistics` to the URL query string
    if (getStatistics() != null) {
      joiner.add(getStatistics().toUrlQueryString(prefix + "statistics" + suffix));
    }

    return joiner.toString();
  }

}

