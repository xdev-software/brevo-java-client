/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.GetAttributesAttributesInnerEnumerationInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetAttributesAttributesInner
 */
@JsonPropertyOrder({
  GetAttributesAttributesInner.JSON_PROPERTY_NAME,
  GetAttributesAttributesInner.JSON_PROPERTY_CATEGORY,
  GetAttributesAttributesInner.JSON_PROPERTY_TYPE,
  GetAttributesAttributesInner.JSON_PROPERTY_ENUMERATION,
  GetAttributesAttributesInner.JSON_PROPERTY_CALCULATED_VALUE
})
@JsonTypeName("getAttributes_attributes_inner")
public class GetAttributesAttributesInner {
  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  /**
   * Category of the attribute
   */
  public enum CategoryEnum {
    NORMAL(String.valueOf("normal")),
    
    TRANSACTIONAL(String.valueOf("transactional")),
    
    CATEGORY(String.valueOf("category")),
    
    CALCULATED(String.valueOf("calculated")),
    
    GLOBAL(String.valueOf("global"));

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CATEGORY = "category";
  @jakarta.annotation.Nonnull
  private CategoryEnum category;

  /**
   * Type of the attribute
   */
  public enum TypeEnum {
    TEXT(String.valueOf("text")),
    
    DATE(String.valueOf("date")),
    
    FLOAT(String.valueOf("float")),
    
    ID(String.valueOf("id")),
    
    BOOLEAN(String.valueOf("boolean"));

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable
  private TypeEnum type;

  public static final String JSON_PROPERTY_ENUMERATION = "enumeration";
  @jakarta.annotation.Nullable
  private List<GetAttributesAttributesInnerEnumerationInner> enumeration = new ArrayList<>();

  public static final String JSON_PROPERTY_CALCULATED_VALUE = "calculatedValue";
  @jakarta.annotation.Nullable
  private String calculatedValue;

  public GetAttributesAttributesInner() {
  }

  public GetAttributesAttributesInner name(@jakarta.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Name of the attribute
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }

  public GetAttributesAttributesInner category(@jakarta.annotation.Nonnull CategoryEnum category) {
    
    this.category = category;
    return this;
  }

  /**
   * Category of the attribute
   * @return category
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CategoryEnum getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategory(@jakarta.annotation.Nonnull CategoryEnum category) {
    this.category = category;
  }

  public GetAttributesAttributesInner type(@jakarta.annotation.Nullable TypeEnum type) {
    
    this.type = type;
    return this;
  }

  /**
   * Type of the attribute
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@jakarta.annotation.Nullable TypeEnum type) {
    this.type = type;
  }

  public GetAttributesAttributesInner enumeration(@jakarta.annotation.Nullable List<GetAttributesAttributesInnerEnumerationInner> enumeration) {
    
    this.enumeration = enumeration;
    return this;
  }

  public GetAttributesAttributesInner addEnumerationItem(GetAttributesAttributesInnerEnumerationInner enumerationItem) {
    if (this.enumeration == null) {
      this.enumeration = new ArrayList<>();
    }
    this.enumeration.add(enumerationItem);
    return this;
  }

  /**
   * Parameter only available for \&quot;category\&quot; type attributes.
   * @return enumeration
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENUMERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GetAttributesAttributesInnerEnumerationInner> getEnumeration() {
    return enumeration;
  }


  @JsonProperty(JSON_PROPERTY_ENUMERATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnumeration(@jakarta.annotation.Nullable List<GetAttributesAttributesInnerEnumerationInner> enumeration) {
    this.enumeration = enumeration;
  }

  public GetAttributesAttributesInner calculatedValue(@jakarta.annotation.Nullable String calculatedValue) {
    
    this.calculatedValue = calculatedValue;
    return this;
  }

  /**
   * Calculated value formula
   * @return calculatedValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CALCULATED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCalculatedValue() {
    return calculatedValue;
  }


  @JsonProperty(JSON_PROPERTY_CALCULATED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCalculatedValue(@jakarta.annotation.Nullable String calculatedValue) {
    this.calculatedValue = calculatedValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAttributesAttributesInner getAttributesAttributesInner = (GetAttributesAttributesInner) o;
    return Objects.equals(this.name, getAttributesAttributesInner.name) &&
        Objects.equals(this.category, getAttributesAttributesInner.category) &&
        Objects.equals(this.type, getAttributesAttributesInner.type) &&
        Objects.equals(this.enumeration, getAttributesAttributesInner.enumeration) &&
        Objects.equals(this.calculatedValue, getAttributesAttributesInner.calculatedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, category, type, enumeration, calculatedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAttributesAttributesInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    enumeration: ").append(toIndentedString(enumeration)).append("\n");
    sb.append("    calculatedValue: ").append(toIndentedString(calculatedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `category` to the URL query string
    if (getCategory() != null) {
      try {
        joiner.add(String.format("%scategory%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCategory()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `enumeration` to the URL query string
    if (getEnumeration() != null) {
      for (int i = 0; i < getEnumeration().size(); i++) {
        if (getEnumeration().get(i) != null) {
          joiner.add(getEnumeration().get(i).toUrlQueryString(String.format("%senumeration%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `calculatedValue` to the URL query string
    if (getCalculatedValue() != null) {
      try {
        joiner.add(String.format("%scalculatedValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCalculatedValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

