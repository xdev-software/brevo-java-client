/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import software.xdev.brevo.model.UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner;
import software.xdev.brevo.model.UpsertrecordsRequestRecordsInnerOneOf1Identifiers;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * UpsertrecordsRequestRecordsInnerOneOf1
 */
@JsonPropertyOrder({
  UpsertrecordsRequestRecordsInnerOneOf1.JSON_PROPERTY_ATTRIBUTES,
  UpsertrecordsRequestRecordsInnerOneOf1.JSON_PROPERTY_IDENTIFIERS,
  UpsertrecordsRequestRecordsInnerOneOf1.JSON_PROPERTY_ASSOCIATIONS
})
@JsonTypeName("upsertrecords_request_records_inner_oneOf_1")
public class UpsertrecordsRequestRecordsInnerOneOf1 {
  public static final String JSON_PROPERTY_ATTRIBUTES = "attributes";
  @jakarta.annotation.Nullable
  private Object attributes;

  public static final String JSON_PROPERTY_IDENTIFIERS = "identifiers";
  @jakarta.annotation.Nullable
  private UpsertrecordsRequestRecordsInnerOneOf1Identifiers identifiers;

  public static final String JSON_PROPERTY_ASSOCIATIONS = "associations";
  @jakarta.annotation.Nullable
  private List<UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner> associations = new ArrayList<>();

  public UpsertrecordsRequestRecordsInnerOneOf1() {
  }

  public UpsertrecordsRequestRecordsInnerOneOf1 attributes(@jakarta.annotation.Nullable Object attributes) {
    
    this.attributes = attributes;
    return this;
  }

  /**
   * Attributes attached with the object record. Only the already created attributes will be used with records. Minimum 1 attribute is required. 
   * @return attributes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getAttributes() {
    return attributes;
  }


  @JsonProperty(JSON_PROPERTY_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttributes(@jakarta.annotation.Nullable Object attributes) {
    this.attributes = attributes;
  }

  public UpsertrecordsRequestRecordsInnerOneOf1 identifiers(@jakarta.annotation.Nullable UpsertrecordsRequestRecordsInnerOneOf1Identifiers identifiers) {
    
    this.identifiers = identifiers;
    return this;
  }

  /**
   * Get identifiers
   * @return identifiers
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IDENTIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UpsertrecordsRequestRecordsInnerOneOf1Identifiers getIdentifiers() {
    return identifiers;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentifiers(@jakarta.annotation.Nullable UpsertrecordsRequestRecordsInnerOneOf1Identifiers identifiers) {
    this.identifiers = identifiers;
  }

  public UpsertrecordsRequestRecordsInnerOneOf1 associations(@jakarta.annotation.Nullable List<UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner> associations) {
    
    this.associations = associations;
    return this;
  }

  public UpsertrecordsRequestRecordsInnerOneOf1 addAssociationsItem(UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner associationsItem) {
    if (this.associations == null) {
      this.associations = new ArrayList<>();
    }
    this.associations.add(associationsItem);
    return this;
  }

  /**
   * Get associations
   * @return associations
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ASSOCIATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner> getAssociations() {
    return associations;
  }


  @JsonProperty(JSON_PROPERTY_ASSOCIATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAssociations(@jakarta.annotation.Nullable List<UpsertrecordsRequestRecordsInnerOneOf1AssociationsInner> associations) {
    this.associations = associations;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpsertrecordsRequestRecordsInnerOneOf1 upsertrecordsRequestRecordsInnerOneOf1 = (UpsertrecordsRequestRecordsInnerOneOf1) o;
    return Objects.equals(this.attributes, upsertrecordsRequestRecordsInnerOneOf1.attributes) &&
        Objects.equals(this.identifiers, upsertrecordsRequestRecordsInnerOneOf1.identifiers) &&
        Objects.equals(this.associations, upsertrecordsRequestRecordsInnerOneOf1.associations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, identifiers, associations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpsertrecordsRequestRecordsInnerOneOf1 {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `attributes` to the URL query string
    if (getAttributes() != null) {
      try {
        joiner.add(String.format("%sattributes%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAttributes()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `identifiers` to the URL query string
    if (getIdentifiers() != null) {
      joiner.add(getIdentifiers().toUrlQueryString(prefix + "identifiers" + suffix));
    }

    // add `associations` to the URL query string
    if (getAssociations() != null) {
      for (int i = 0; i < getAssociations().size(); i++) {
        if (getAssociations().get(i) != null) {
          joiner.add(getAssociations().get(i).toUrlQueryString(String.format("%sassociations%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

