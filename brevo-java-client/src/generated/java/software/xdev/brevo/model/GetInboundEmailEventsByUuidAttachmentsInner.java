/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetInboundEmailEventsByUuidAttachmentsInner
 */
@JsonPropertyOrder({
  GetInboundEmailEventsByUuidAttachmentsInner.JSON_PROPERTY_NAME,
  GetInboundEmailEventsByUuidAttachmentsInner.JSON_PROPERTY_CONTENT_TYPE,
  GetInboundEmailEventsByUuidAttachmentsInner.JSON_PROPERTY_CONTENT_ID,
  GetInboundEmailEventsByUuidAttachmentsInner.JSON_PROPERTY_CONTENT_LENGTH
})
@JsonTypeName("getInboundEmailEventsByUuid_attachments_inner")
public class GetInboundEmailEventsByUuidAttachmentsInner {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CONTENT_TYPE = "contentType";
  private String contentType;

  public static final String JSON_PROPERTY_CONTENT_ID = "contentId";
  private String contentId;

  public static final String JSON_PROPERTY_CONTENT_LENGTH = "contentLength";
  private Integer contentLength;

  public GetInboundEmailEventsByUuidAttachmentsInner() {
  }

  public GetInboundEmailEventsByUuidAttachmentsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * filename specified in the Content-Disposition header of the attachment
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public GetInboundEmailEventsByUuidAttachmentsInner contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * value of the Content-Type header of the attachment
   * @return contentType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public GetInboundEmailEventsByUuidAttachmentsInner contentId(String contentId) {
    
    this.contentId = contentId;
    return this;
  }

   /**
   * value of the Content-ID header of the attachment.
   * @return contentId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContentId() {
    return contentId;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentId(String contentId) {
    this.contentId = contentId;
  }

  public GetInboundEmailEventsByUuidAttachmentsInner contentLength(Integer contentLength) {
    
    this.contentLength = contentLength;
    return this;
  }

   /**
   * size of the attachment in bytes
   * @return contentLength
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContentLength() {
    return contentLength;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLength(Integer contentLength) {
    this.contentLength = contentLength;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInboundEmailEventsByUuidAttachmentsInner getInboundEmailEventsByUuidAttachmentsInner = (GetInboundEmailEventsByUuidAttachmentsInner) o;
    return Objects.equals(this.name, getInboundEmailEventsByUuidAttachmentsInner.name) &&
        Objects.equals(this.contentType, getInboundEmailEventsByUuidAttachmentsInner.contentType) &&
        Objects.equals(this.contentId, getInboundEmailEventsByUuidAttachmentsInner.contentId) &&
        Objects.equals(this.contentLength, getInboundEmailEventsByUuidAttachmentsInner.contentLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, contentType, contentId, contentLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInboundEmailEventsByUuidAttachmentsInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contentType` to the URL query string
    if (getContentType() != null) {
      try {
        joiner.add(String.format("%scontentType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContentType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contentId` to the URL query string
    if (getContentId() != null) {
      try {
        joiner.add(String.format("%scontentId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContentId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `contentLength` to the URL query string
    if (getContentLength() != null) {
      try {
        joiner.add(String.format("%scontentLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getContentLength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

