/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MasterDetailsResponsePlanInfoFeaturesInner
 */
@JsonPropertyOrder({
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_NAME,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_UNIT_VALUE,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_QUANTITY,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_QUANTITY_WITH_OVERAGES,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_USED,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_USED_OVERAGES,
  MasterDetailsResponsePlanInfoFeaturesInner.JSON_PROPERTY_REMAINING
})
@JsonTypeName("masterDetailsResponse_planInfo_features_inner")
public class MasterDetailsResponsePlanInfoFeaturesInner {
  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable
  private String name;

  public static final String JSON_PROPERTY_UNIT_VALUE = "unitValue";
  @jakarta.annotation.Nullable
  private String unitValue;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  @jakarta.annotation.Nullable
  private Long quantity;

  public static final String JSON_PROPERTY_QUANTITY_WITH_OVERAGES = "quantityWithOverages";
  @jakarta.annotation.Nullable
  private Long quantityWithOverages;

  public static final String JSON_PROPERTY_USED = "used";
  @jakarta.annotation.Nullable
  private Long used;

  public static final String JSON_PROPERTY_USED_OVERAGES = "usedOverages";
  @jakarta.annotation.Nullable
  private Long usedOverages;

  public static final String JSON_PROPERTY_REMAINING = "remaining";
  @jakarta.annotation.Nullable
  private Long remaining;

  public MasterDetailsResponsePlanInfoFeaturesInner() {
  }

  public MasterDetailsResponsePlanInfoFeaturesInner name(@jakarta.annotation.Nullable String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Name of the feature
   * @return name
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner unitValue(@jakarta.annotation.Nullable String unitValue) {
    
    this.unitValue = unitValue;
    return this;
  }

  /**
   * Unit value of the feature
   * @return unitValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitValue() {
    return unitValue;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitValue(@jakarta.annotation.Nullable String unitValue) {
    this.unitValue = unitValue;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner quantity(@jakarta.annotation.Nullable Long quantity) {
    
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity provided in the plan
   * @return quantity
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantity(@jakarta.annotation.Nullable Long quantity) {
    this.quantity = quantity;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner quantityWithOverages(@jakarta.annotation.Nullable Long quantityWithOverages) {
    
    this.quantityWithOverages = quantityWithOverages;
    return this;
  }

  /**
   * Quantity with overages provided in the plan (only applicable on ENTv2)
   * @return quantityWithOverages
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY_WITH_OVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuantityWithOverages() {
    return quantityWithOverages;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY_WITH_OVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantityWithOverages(@jakarta.annotation.Nullable Long quantityWithOverages) {
    this.quantityWithOverages = quantityWithOverages;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner used(@jakarta.annotation.Nullable Long used) {
    
    this.used = used;
    return this;
  }

  /**
   * Quantity consumed by master
   * @return used
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsed() {
    return used;
  }


  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsed(@jakarta.annotation.Nullable Long used) {
    this.used = used;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner usedOverages(@jakarta.annotation.Nullable Long usedOverages) {
    
    this.usedOverages = usedOverages;
    return this;
  }

  /**
   * Quantity consumed by sub-organizations over the admin plan limit (only applicable on ENTv2)
   * @return usedOverages
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_OVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedOverages() {
    return usedOverages;
  }


  @JsonProperty(JSON_PROPERTY_USED_OVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedOverages(@jakarta.annotation.Nullable Long usedOverages) {
    this.usedOverages = usedOverages;
  }

  public MasterDetailsResponsePlanInfoFeaturesInner remaining(@jakarta.annotation.Nullable Long remaining) {
    
    this.remaining = remaining;
    return this;
  }

  /**
   * Quantity remaining in the plan
   * @return remaining
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getRemaining() {
    return remaining;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemaining(@jakarta.annotation.Nullable Long remaining) {
    this.remaining = remaining;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterDetailsResponsePlanInfoFeaturesInner masterDetailsResponsePlanInfoFeaturesInner = (MasterDetailsResponsePlanInfoFeaturesInner) o;
    return Objects.equals(this.name, masterDetailsResponsePlanInfoFeaturesInner.name) &&
        Objects.equals(this.unitValue, masterDetailsResponsePlanInfoFeaturesInner.unitValue) &&
        Objects.equals(this.quantity, masterDetailsResponsePlanInfoFeaturesInner.quantity) &&
        Objects.equals(this.quantityWithOverages, masterDetailsResponsePlanInfoFeaturesInner.quantityWithOverages) &&
        Objects.equals(this.used, masterDetailsResponsePlanInfoFeaturesInner.used) &&
        Objects.equals(this.usedOverages, masterDetailsResponsePlanInfoFeaturesInner.usedOverages) &&
        Objects.equals(this.remaining, masterDetailsResponsePlanInfoFeaturesInner.remaining);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, unitValue, quantity, quantityWithOverages, used, usedOverages, remaining);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterDetailsResponsePlanInfoFeaturesInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unitValue: ").append(toIndentedString(unitValue)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    quantityWithOverages: ").append(toIndentedString(quantityWithOverages)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    usedOverages: ").append(toIndentedString(usedOverages)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `unitValue` to the URL query string
    if (getUnitValue() != null) {
      try {
        joiner.add(String.format("%sunitValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnitValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `quantity` to the URL query string
    if (getQuantity() != null) {
      try {
        joiner.add(String.format("%squantity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantity()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `quantityWithOverages` to the URL query string
    if (getQuantityWithOverages() != null) {
      try {
        joiner.add(String.format("%squantityWithOverages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQuantityWithOverages()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `used` to the URL query string
    if (getUsed() != null) {
      try {
        joiner.add(String.format("%sused%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `usedOverages` to the URL query string
    if (getUsedOverages() != null) {
      try {
        joiner.add(String.format("%susedOverages%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUsedOverages()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `remaining` to the URL query string
    if (getRemaining() != null) {
      try {
        joiner.add(String.format("%sremaining%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRemaining()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

