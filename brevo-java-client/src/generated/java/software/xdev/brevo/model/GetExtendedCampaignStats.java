/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.xdev.brevo.model.GetCampaignStats;
import software.xdev.brevo.model.GetDeviceBrowserStats;
import software.xdev.brevo.model.GetStatsByDevice;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetExtendedCampaignStats
 */
@JsonPropertyOrder({
  GetExtendedCampaignStats.JSON_PROPERTY_GLOBAL_STATS,
  GetExtendedCampaignStats.JSON_PROPERTY_CAMPAIGN_STATS,
  GetExtendedCampaignStats.JSON_PROPERTY_MIRROR_CLICK,
  GetExtendedCampaignStats.JSON_PROPERTY_REMAINING,
  GetExtendedCampaignStats.JSON_PROPERTY_LINKS_STATS,
  GetExtendedCampaignStats.JSON_PROPERTY_STATS_BY_DOMAIN,
  GetExtendedCampaignStats.JSON_PROPERTY_STATS_BY_DEVICE,
  GetExtendedCampaignStats.JSON_PROPERTY_STATS_BY_BROWSER
})
@JsonTypeName("getExtendedCampaignStats")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class GetExtendedCampaignStats {
  public static final String JSON_PROPERTY_GLOBAL_STATS = "globalStats";
  private GetCampaignStats globalStats;

  public static final String JSON_PROPERTY_CAMPAIGN_STATS = "campaignStats";
  private List<GetCampaignStats> campaignStats = new ArrayList<>();

  public static final String JSON_PROPERTY_MIRROR_CLICK = "mirrorClick";
  private Long mirrorClick;

  public static final String JSON_PROPERTY_REMAINING = "remaining";
  private Long remaining;

  public static final String JSON_PROPERTY_LINKS_STATS = "linksStats";
  private Object linksStats;

  public static final String JSON_PROPERTY_STATS_BY_DOMAIN = "statsByDomain";
  private Map<String, GetCampaignStats> statsByDomain = new HashMap<>();

  public static final String JSON_PROPERTY_STATS_BY_DEVICE = "statsByDevice";
  private GetStatsByDevice statsByDevice;

  public static final String JSON_PROPERTY_STATS_BY_BROWSER = "statsByBrowser";
  private Map<String, GetDeviceBrowserStats> statsByBrowser = new HashMap<>();

  public GetExtendedCampaignStats() {
  }

  public GetExtendedCampaignStats globalStats(GetCampaignStats globalStats) {
    
    this.globalStats = globalStats;
    return this;
  }

   /**
   * Overall statistics of the campaign
   * @return globalStats
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GLOBAL_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetCampaignStats getGlobalStats() {
    return globalStats;
  }


  @JsonProperty(JSON_PROPERTY_GLOBAL_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGlobalStats(GetCampaignStats globalStats) {
    this.globalStats = globalStats;
  }


  public GetExtendedCampaignStats campaignStats(List<GetCampaignStats> campaignStats) {
    
    this.campaignStats = campaignStats;
    return this;
  }

  public GetExtendedCampaignStats addCampaignStatsItem(GetCampaignStats campaignStatsItem) {
    if (this.campaignStats == null) {
      this.campaignStats = new ArrayList<>();
    }
    this.campaignStats.add(campaignStatsItem);
    return this;
  }

   /**
   * List-wise statistics of the campaign.
   * @return campaignStats
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CAMPAIGN_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<GetCampaignStats> getCampaignStats() {
    return campaignStats;
  }


  @JsonProperty(JSON_PROPERTY_CAMPAIGN_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCampaignStats(List<GetCampaignStats> campaignStats) {
    this.campaignStats = campaignStats;
  }


  public GetExtendedCampaignStats mirrorClick(Long mirrorClick) {
    
    this.mirrorClick = mirrorClick;
    return this;
  }

   /**
   * Number of clicks on mirror link
   * @return mirrorClick
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIRROR_CLICK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getMirrorClick() {
    return mirrorClick;
  }


  @JsonProperty(JSON_PROPERTY_MIRROR_CLICK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMirrorClick(Long mirrorClick) {
    this.mirrorClick = mirrorClick;
  }


  public GetExtendedCampaignStats remaining(Long remaining) {
    
    this.remaining = remaining;
    return this;
  }

   /**
   * Number of remaning emails to send
   * @return remaining
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getRemaining() {
    return remaining;
  }


  @JsonProperty(JSON_PROPERTY_REMAINING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRemaining(Long remaining) {
    this.remaining = remaining;
  }


  public GetExtendedCampaignStats linksStats(Object linksStats) {
    
    this.linksStats = linksStats;
    return this;
  }

   /**
   * Statistics about the number of clicks for the links
   * @return linksStats
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LINKS_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getLinksStats() {
    return linksStats;
  }


  @JsonProperty(JSON_PROPERTY_LINKS_STATS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLinksStats(Object linksStats) {
    this.linksStats = linksStats;
  }


  public GetExtendedCampaignStats statsByDomain(Map<String, GetCampaignStats> statsByDomain) {
    
    this.statsByDomain = statsByDomain;
    return this;
  }

  public GetExtendedCampaignStats putStatsByDomainItem(String key, GetCampaignStats statsByDomainItem) {
    this.statsByDomain.put(key, statsByDomainItem);
    return this;
  }

   /**
   * Get statsByDomain
   * @return statsByDomain
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATS_BY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, GetCampaignStats> getStatsByDomain() {
    return statsByDomain;
  }


  @JsonProperty(JSON_PROPERTY_STATS_BY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatsByDomain(Map<String, GetCampaignStats> statsByDomain) {
    this.statsByDomain = statsByDomain;
  }


  public GetExtendedCampaignStats statsByDevice(GetStatsByDevice statsByDevice) {
    
    this.statsByDevice = statsByDevice;
    return this;
  }

   /**
   * Get statsByDevice
   * @return statsByDevice
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATS_BY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetStatsByDevice getStatsByDevice() {
    return statsByDevice;
  }


  @JsonProperty(JSON_PROPERTY_STATS_BY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatsByDevice(GetStatsByDevice statsByDevice) {
    this.statsByDevice = statsByDevice;
  }


  public GetExtendedCampaignStats statsByBrowser(Map<String, GetDeviceBrowserStats> statsByBrowser) {
    
    this.statsByBrowser = statsByBrowser;
    return this;
  }

  public GetExtendedCampaignStats putStatsByBrowserItem(String key, GetDeviceBrowserStats statsByBrowserItem) {
    this.statsByBrowser.put(key, statsByBrowserItem);
    return this;
  }

   /**
   * Get statsByBrowser
   * @return statsByBrowser
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATS_BY_BROWSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Map<String, GetDeviceBrowserStats> getStatsByBrowser() {
    return statsByBrowser;
  }


  @JsonProperty(JSON_PROPERTY_STATS_BY_BROWSER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatsByBrowser(Map<String, GetDeviceBrowserStats> statsByBrowser) {
    this.statsByBrowser = statsByBrowser;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExtendedCampaignStats getExtendedCampaignStats = (GetExtendedCampaignStats) o;
    return Objects.equals(this.globalStats, getExtendedCampaignStats.globalStats) &&
        Objects.equals(this.campaignStats, getExtendedCampaignStats.campaignStats) &&
        Objects.equals(this.mirrorClick, getExtendedCampaignStats.mirrorClick) &&
        Objects.equals(this.remaining, getExtendedCampaignStats.remaining) &&
        Objects.equals(this.linksStats, getExtendedCampaignStats.linksStats) &&
        Objects.equals(this.statsByDomain, getExtendedCampaignStats.statsByDomain) &&
        Objects.equals(this.statsByDevice, getExtendedCampaignStats.statsByDevice) &&
        Objects.equals(this.statsByBrowser, getExtendedCampaignStats.statsByBrowser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalStats, campaignStats, mirrorClick, remaining, linksStats, statsByDomain, statsByDevice, statsByBrowser);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExtendedCampaignStats {\n");
    sb.append("    globalStats: ").append(toIndentedString(globalStats)).append("\n");
    sb.append("    campaignStats: ").append(toIndentedString(campaignStats)).append("\n");
    sb.append("    mirrorClick: ").append(toIndentedString(mirrorClick)).append("\n");
    sb.append("    remaining: ").append(toIndentedString(remaining)).append("\n");
    sb.append("    linksStats: ").append(toIndentedString(linksStats)).append("\n");
    sb.append("    statsByDomain: ").append(toIndentedString(statsByDomain)).append("\n");
    sb.append("    statsByDevice: ").append(toIndentedString(statsByDevice)).append("\n");
    sb.append("    statsByBrowser: ").append(toIndentedString(statsByBrowser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `globalStats` to the URL query string
    if (getGlobalStats() != null) {
      joiner.add(getGlobalStats().toUrlQueryString(prefix + "globalStats" + suffix));
    }

    // add `campaignStats` to the URL query string
    if (getCampaignStats() != null) {
      for (int i = 0; i < getCampaignStats().size(); i++) {
        if (getCampaignStats().get(i) != null) {
          joiner.add(getCampaignStats().get(i).toUrlQueryString(String.format("%scampaignStats%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `mirrorClick` to the URL query string
    if (getMirrorClick() != null) {
      try {
        joiner.add(String.format("%smirrorClick%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMirrorClick()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `remaining` to the URL query string
    if (getRemaining() != null) {
      try {
        joiner.add(String.format("%sremaining%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRemaining()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `linksStats` to the URL query string
    if (getLinksStats() != null) {
      try {
        joiner.add(String.format("%slinksStats%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLinksStats()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `statsByDomain` to the URL query string
    if (getStatsByDomain() != null) {
      for (String _key : getStatsByDomain().keySet()) {
        if (getStatsByDomain().get(_key) != null) {
          joiner.add(getStatsByDomain().get(_key).toUrlQueryString(String.format("%sstatsByDomain%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    // add `statsByDevice` to the URL query string
    if (getStatsByDevice() != null) {
      joiner.add(getStatsByDevice().toUrlQueryString(prefix + "statsByDevice" + suffix));
    }

    // add `statsByBrowser` to the URL query string
    if (getStatsByBrowser() != null) {
      for (String _key : getStatsByBrowser().keySet()) {
        if (getStatsByBrowser().get(_key) != null) {
          joiner.add(getStatsByBrowser().get(_key).toUrlQueryString(String.format("%sstatsByBrowser%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

