/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BalanceLimit
 */
@JsonPropertyOrder({
  BalanceLimit.JSON_PROPERTY_BALANCE_DEFINITION_ID,
  BalanceLimit.JSON_PROPERTY_CONSTRAINT_TYPE,
  BalanceLimit.JSON_PROPERTY_CREATED_AT,
  BalanceLimit.JSON_PROPERTY_DURATION_UNIT,
  BalanceLimit.JSON_PROPERTY_DURATION_VALUE,
  BalanceLimit.JSON_PROPERTY_ID,
  BalanceLimit.JSON_PROPERTY_SLIDING_SCHEDULE,
  BalanceLimit.JSON_PROPERTY_TRANSACTION_TYPE,
  BalanceLimit.JSON_PROPERTY_UPDATED_AT,
  BalanceLimit.JSON_PROPERTY_VALUE
})
@JsonTypeName("balanceLimit")
public class BalanceLimit {
  public static final String JSON_PROPERTY_BALANCE_DEFINITION_ID = "balanceDefinitionId";
  @jakarta.annotation.Nullable
  private String balanceDefinitionId;

  public static final String JSON_PROPERTY_CONSTRAINT_TYPE = "constraintType";
  @jakarta.annotation.Nullable
  private String constraintType;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @jakarta.annotation.Nonnull
  private String createdAt;

  public static final String JSON_PROPERTY_DURATION_UNIT = "durationUnit";
  @jakarta.annotation.Nullable
  private String durationUnit;

  public static final String JSON_PROPERTY_DURATION_VALUE = "durationValue";
  @jakarta.annotation.Nullable
  private Integer durationValue;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable
  private String id;

  public static final String JSON_PROPERTY_SLIDING_SCHEDULE = "slidingSchedule";
  @jakarta.annotation.Nullable
  private Boolean slidingSchedule;

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  @jakarta.annotation.Nullable
  private String transactionType;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @jakarta.annotation.Nonnull
  private String updatedAt;

  public static final String JSON_PROPERTY_VALUE = "value";
  @jakarta.annotation.Nullable
  private Integer value;

  public BalanceLimit() {
  }

  public BalanceLimit balanceDefinitionId(@jakarta.annotation.Nullable String balanceDefinitionId) {
    
    this.balanceDefinitionId = balanceDefinitionId;
    return this;
  }

  /**
   * balance definition ID
   * @return balanceDefinitionId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BALANCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBalanceDefinitionId() {
    return balanceDefinitionId;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBalanceDefinitionId(@jakarta.annotation.Nullable String balanceDefinitionId) {
    this.balanceDefinitionId = balanceDefinitionId;
  }

  public BalanceLimit constraintType(@jakarta.annotation.Nullable String constraintType) {
    
    this.constraintType = constraintType;
    return this;
  }

  /**
   * Defines the type of constraint (e.g., transaction-based or amount-based).
   * @return constraintType
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSTRAINT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConstraintType() {
    return constraintType;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraintType(@jakarta.annotation.Nullable String constraintType) {
    this.constraintType = constraintType;
  }

  public BalanceLimit createdAt(@jakarta.annotation.Nonnull String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Timestamp of when the balance limit was created.
   * @return createdAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@jakarta.annotation.Nonnull String createdAt) {
    this.createdAt = createdAt;
  }

  public BalanceLimit durationUnit(@jakarta.annotation.Nullable String durationUnit) {
    
    this.durationUnit = durationUnit;
    return this;
  }

  /**
   * Time unit for the balance limit (day, week, month, year).
   * @return durationUnit
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDurationUnit() {
    return durationUnit;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_UNIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationUnit(@jakarta.annotation.Nullable String durationUnit) {
    this.durationUnit = durationUnit;
  }

  public BalanceLimit durationValue(@jakarta.annotation.Nullable Integer durationValue) {
    
    this.durationValue = durationValue;
    return this;
  }

  /**
   * Number of time units the balance limit applies to.
   * @return durationValue
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DURATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDurationValue() {
    return durationValue;
  }


  @JsonProperty(JSON_PROPERTY_DURATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDurationValue(@jakarta.annotation.Nullable Integer durationValue) {
    this.durationValue = durationValue;
  }

  public BalanceLimit id(@jakarta.annotation.Nullable String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the balance limit.
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }

  public BalanceLimit slidingSchedule(@jakarta.annotation.Nullable Boolean slidingSchedule) {
    
    this.slidingSchedule = slidingSchedule;
    return this;
  }

  /**
   * Indicates if the limit resets periodically based on a sliding schedule.
   * @return slidingSchedule
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLIDING_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSlidingSchedule() {
    return slidingSchedule;
  }


  @JsonProperty(JSON_PROPERTY_SLIDING_SCHEDULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlidingSchedule(@jakarta.annotation.Nullable Boolean slidingSchedule) {
    this.slidingSchedule = slidingSchedule;
  }

  public BalanceLimit transactionType(@jakarta.annotation.Nullable String transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Specifies whether the limit applies to credit or debit transactions.
   * @return transactionType
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(@jakarta.annotation.Nullable String transactionType) {
    this.transactionType = transactionType;
  }

  public BalanceLimit updatedAt(@jakarta.annotation.Nonnull String updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Timestamp of the last update to the balance limit.
   * @return updatedAt
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(@jakarta.annotation.Nonnull String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public BalanceLimit value(@jakarta.annotation.Nullable Integer value) {
    
    this.value = value;
    return this;
  }

  /**
   * The maximum allowed value for the defined constraint.
   * @return value
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(@jakarta.annotation.Nullable Integer value) {
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceLimit balanceLimit = (BalanceLimit) o;
    return Objects.equals(this.balanceDefinitionId, balanceLimit.balanceDefinitionId) &&
        Objects.equals(this.constraintType, balanceLimit.constraintType) &&
        Objects.equals(this.createdAt, balanceLimit.createdAt) &&
        Objects.equals(this.durationUnit, balanceLimit.durationUnit) &&
        Objects.equals(this.durationValue, balanceLimit.durationValue) &&
        Objects.equals(this.id, balanceLimit.id) &&
        Objects.equals(this.slidingSchedule, balanceLimit.slidingSchedule) &&
        Objects.equals(this.transactionType, balanceLimit.transactionType) &&
        Objects.equals(this.updatedAt, balanceLimit.updatedAt) &&
        Objects.equals(this.value, balanceLimit.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balanceDefinitionId, constraintType, createdAt, durationUnit, durationValue, id, slidingSchedule, transactionType, updatedAt, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceLimit {\n");
    sb.append("    balanceDefinitionId: ").append(toIndentedString(balanceDefinitionId)).append("\n");
    sb.append("    constraintType: ").append(toIndentedString(constraintType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    durationUnit: ").append(toIndentedString(durationUnit)).append("\n");
    sb.append("    durationValue: ").append(toIndentedString(durationValue)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    slidingSchedule: ").append(toIndentedString(slidingSchedule)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `balanceDefinitionId` to the URL query string
    if (getBalanceDefinitionId() != null) {
      try {
        joiner.add(String.format("%sbalanceDefinitionId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBalanceDefinitionId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `constraintType` to the URL query string
    if (getConstraintType() != null) {
      try {
        joiner.add(String.format("%sconstraintType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getConstraintType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `durationUnit` to the URL query string
    if (getDurationUnit() != null) {
      try {
        joiner.add(String.format("%sdurationUnit%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurationUnit()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `durationValue` to the URL query string
    if (getDurationValue() != null) {
      try {
        joiner.add(String.format("%sdurationValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDurationValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `slidingSchedule` to the URL query string
    if (getSlidingSchedule() != null) {
      try {
        joiner.add(String.format("%sslidingSchedule%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSlidingSchedule()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `transactionType` to the URL query string
    if (getTransactionType() != null) {
      try {
        joiner.add(String.format("%stransactionType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTransactionType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      try {
        joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpdatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `value` to the URL query string
    if (getValue() != null) {
      try {
        joiner.add(String.format("%svalue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValue()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

