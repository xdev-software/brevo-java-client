/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * MainCreateRewardPayload
 */
@JsonPropertyOrder({
  MainCreateRewardPayload.JSON_PROPERTY_NAME,
  MainCreateRewardPayload.JSON_PROPERTY_PUBLIC_DESCRIPTION,
  MainCreateRewardPayload.JSON_PROPERTY_PUBLIC_IMAGE,
  MainCreateRewardPayload.JSON_PROPERTY_PUBLIC_NAME
})
@JsonTypeName("main.createRewardPayload")
public class MainCreateRewardPayload {
  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nonnull
  private String name;

  public static final String JSON_PROPERTY_PUBLIC_DESCRIPTION = "publicDescription";
  @jakarta.annotation.Nullable
  private String publicDescription;

  public static final String JSON_PROPERTY_PUBLIC_IMAGE = "publicImage";
  @jakarta.annotation.Nullable
  private URI publicImage;

  public static final String JSON_PROPERTY_PUBLIC_NAME = "publicName";
  @jakarta.annotation.Nullable
  private String publicName;

  public MainCreateRewardPayload() {
  }

  public MainCreateRewardPayload name(@jakarta.annotation.Nonnull String name) {
    
    this.name = name;
    return this;
  }

  /**
   * Internal name of the reward
   * @return name
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(@jakarta.annotation.Nonnull String name) {
    this.name = name;
  }

  public MainCreateRewardPayload publicDescription(@jakarta.annotation.Nullable String publicDescription) {
    
    this.publicDescription = publicDescription;
    return this;
  }

  /**
   * Public facing description of the reward
   * @return publicDescription
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicDescription() {
    return publicDescription;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicDescription(@jakarta.annotation.Nullable String publicDescription) {
    this.publicDescription = publicDescription;
  }

  public MainCreateRewardPayload publicImage(@jakarta.annotation.Nullable URI publicImage) {
    
    this.publicImage = publicImage;
    return this;
  }

  /**
   * URL of the public image for the reward
   * @return publicImage
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public URI getPublicImage() {
    return publicImage;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicImage(@jakarta.annotation.Nullable URI publicImage) {
    this.publicImage = publicImage;
  }

  public MainCreateRewardPayload publicName(@jakarta.annotation.Nullable String publicName) {
    
    this.publicName = publicName;
    return this;
  }

  /**
   * Public facing name of the reward
   * @return publicName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicName() {
    return publicName;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicName(@jakarta.annotation.Nullable String publicName) {
    this.publicName = publicName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainCreateRewardPayload mainCreateRewardPayload = (MainCreateRewardPayload) o;
    return Objects.equals(this.name, mainCreateRewardPayload.name) &&
        Objects.equals(this.publicDescription, mainCreateRewardPayload.publicDescription) &&
        Objects.equals(this.publicImage, mainCreateRewardPayload.publicImage) &&
        Objects.equals(this.publicName, mainCreateRewardPayload.publicName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, publicDescription, publicImage, publicName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainCreateRewardPayload {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publicDescription: ").append(toIndentedString(publicDescription)).append("\n");
    sb.append("    publicImage: ").append(toIndentedString(publicImage)).append("\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `publicDescription` to the URL query string
    if (getPublicDescription() != null) {
      try {
        joiner.add(String.format("%spublicDescription%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublicDescription()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `publicImage` to the URL query string
    if (getPublicImage() != null) {
      try {
        joiner.add(String.format("%spublicImage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublicImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `publicName` to the URL query string
    if (getPublicName() != null) {
      try {
        joiner.add(String.format("%spublicName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPublicName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

