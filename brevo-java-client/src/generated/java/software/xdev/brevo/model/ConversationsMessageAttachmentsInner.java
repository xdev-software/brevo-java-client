/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ConversationsMessageAttachmentsInner
 */
@JsonPropertyOrder({
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_FILE_NAME,
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_IS_INLINE,
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_INLINE_ID,
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_URL,
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_IS_IMAGE,
  ConversationsMessageAttachmentsInner.JSON_PROPERTY_SIZE
})
@JsonTypeName("ConversationsMessage_attachments_inner")
public class ConversationsMessageAttachmentsInner {
  public static final String JSON_PROPERTY_FILE_NAME = "fileName";
  @jakarta.annotation.Nullable
  private String fileName;

  public static final String JSON_PROPERTY_IS_INLINE = "isInline";
  @jakarta.annotation.Nullable
  private String isInline;

  public static final String JSON_PROPERTY_INLINE_ID = "inlineId";
  @jakarta.annotation.Nullable
  private String inlineId;

  public static final String JSON_PROPERTY_URL = "url";
  @jakarta.annotation.Nullable
  private String url;

  public static final String JSON_PROPERTY_IS_IMAGE = "isImage";
  @jakarta.annotation.Nullable
  private Boolean isImage;

  public static final String JSON_PROPERTY_SIZE = "size";
  @jakarta.annotation.Nullable
  private Long size;

  public ConversationsMessageAttachmentsInner() {
  }

  public ConversationsMessageAttachmentsInner fileName(@jakarta.annotation.Nullable String fileName) {
    
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of the file.
   * @return fileName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileName(@jakarta.annotation.Nullable String fileName) {
    this.fileName = fileName;
  }

  public ConversationsMessageAttachmentsInner isInline(@jakarta.annotation.Nullable String isInline) {
    
    this.isInline = isInline;
    return this;
  }

  /**
   * &#x60;true&#x60; for inline files.
   * @return isInline
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_INLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIsInline() {
    return isInline;
  }


  @JsonProperty(JSON_PROPERTY_IS_INLINE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsInline(@jakarta.annotation.Nullable String isInline) {
    this.isInline = isInline;
  }

  public ConversationsMessageAttachmentsInner inlineId(@jakarta.annotation.Nullable String inlineId) {
    
    this.inlineId = inlineId;
    return this;
  }

  /**
   * The ID of the inline file.
   * @return inlineId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INLINE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInlineId() {
    return inlineId;
  }


  @JsonProperty(JSON_PROPERTY_INLINE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInlineId(@jakarta.annotation.Nullable String inlineId) {
    this.inlineId = inlineId;
  }

  public ConversationsMessageAttachmentsInner url(@jakarta.annotation.Nullable String url) {
    
    this.url = url;
    return this;
  }

  /**
   * The URL of the file.
   * @return url
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(@jakarta.annotation.Nullable String url) {
    this.url = url;
  }

  public ConversationsMessageAttachmentsInner isImage(@jakarta.annotation.Nullable Boolean isImage) {
    
    this.isImage = isImage;
    return this;
  }

  /**
   * &#x60;true&#x60; for images.
   * @return isImage
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsImage() {
    return isImage;
  }


  @JsonProperty(JSON_PROPERTY_IS_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsImage(@jakarta.annotation.Nullable Boolean isImage) {
    this.isImage = isImage;
  }

  public ConversationsMessageAttachmentsInner size(@jakarta.annotation.Nullable Long size) {
    
    this.size = size;
    return this;
  }

  /**
   * The size of the file in bytes.
   * @return size
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(@jakarta.annotation.Nullable Long size) {
    this.size = size;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsMessageAttachmentsInner conversationsMessageAttachmentsInner = (ConversationsMessageAttachmentsInner) o;
    return Objects.equals(this.fileName, conversationsMessageAttachmentsInner.fileName) &&
        Objects.equals(this.isInline, conversationsMessageAttachmentsInner.isInline) &&
        Objects.equals(this.inlineId, conversationsMessageAttachmentsInner.inlineId) &&
        Objects.equals(this.url, conversationsMessageAttachmentsInner.url) &&
        Objects.equals(this.isImage, conversationsMessageAttachmentsInner.isImage) &&
        Objects.equals(this.size, conversationsMessageAttachmentsInner.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileName, isInline, inlineId, url, isImage, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsMessageAttachmentsInner {\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    isInline: ").append(toIndentedString(isInline)).append("\n");
    sb.append("    inlineId: ").append(toIndentedString(inlineId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `fileName` to the URL query string
    if (getFileName() != null) {
      try {
        joiner.add(String.format("%sfileName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFileName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isInline` to the URL query string
    if (getIsInline() != null) {
      try {
        joiner.add(String.format("%sisInline%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsInline()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inlineId` to the URL query string
    if (getInlineId() != null) {
      try {
        joiner.add(String.format("%sinlineId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInlineId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `url` to the URL query string
    if (getUrl() != null) {
      try {
        joiner.add(String.format("%surl%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUrl()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `isImage` to the URL query string
    if (getIsImage() != null) {
      try {
        joiner.add(String.format("%sisImage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIsImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `size` to the URL query string
    if (getSize() != null) {
      try {
        joiner.add(String.format("%ssize%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSize()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

