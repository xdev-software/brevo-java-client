/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import software.xdev.brevo.model.GetCampaignRecipients;
import software.xdev.brevo.model.GetExtendedCampaignOverviewAllOfSender;
import software.xdev.brevo.model.GetExtendedCampaignStats;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetEmailCampaign
 */
@JsonPropertyOrder({
  GetEmailCampaign.JSON_PROPERTY_ID,
  GetEmailCampaign.JSON_PROPERTY_NAME,
  GetEmailCampaign.JSON_PROPERTY_SUBJECT,
  GetEmailCampaign.JSON_PROPERTY_PREVIEW_TEXT,
  GetEmailCampaign.JSON_PROPERTY_TYPE,
  GetEmailCampaign.JSON_PROPERTY_STATUS,
  GetEmailCampaign.JSON_PROPERTY_SCHEDULED_AT,
  GetEmailCampaign.JSON_PROPERTY_AB_TESTING,
  GetEmailCampaign.JSON_PROPERTY_SUBJECT_A,
  GetEmailCampaign.JSON_PROPERTY_SUBJECT_B,
  GetEmailCampaign.JSON_PROPERTY_SPLIT_RULE,
  GetEmailCampaign.JSON_PROPERTY_WINNER_CRITERIA,
  GetEmailCampaign.JSON_PROPERTY_WINNER_DELAY,
  GetEmailCampaign.JSON_PROPERTY_SEND_AT_BEST_TIME,
  GetEmailCampaign.JSON_PROPERTY_TEST_SENT,
  GetEmailCampaign.JSON_PROPERTY_HEADER,
  GetEmailCampaign.JSON_PROPERTY_FOOTER,
  GetEmailCampaign.JSON_PROPERTY_SENDER,
  GetEmailCampaign.JSON_PROPERTY_REPLY_TO,
  GetEmailCampaign.JSON_PROPERTY_TO_FIELD,
  GetEmailCampaign.JSON_PROPERTY_HTML_CONTENT,
  GetEmailCampaign.JSON_PROPERTY_SHARE_LINK,
  GetEmailCampaign.JSON_PROPERTY_TAG,
  GetEmailCampaign.JSON_PROPERTY_CREATED_AT,
  GetEmailCampaign.JSON_PROPERTY_MODIFIED_AT,
  GetEmailCampaign.JSON_PROPERTY_INLINE_IMAGE_ACTIVATION,
  GetEmailCampaign.JSON_PROPERTY_MIRROR_ACTIVE,
  GetEmailCampaign.JSON_PROPERTY_RECURRING,
  GetEmailCampaign.JSON_PROPERTY_SENT_DATE,
  GetEmailCampaign.JSON_PROPERTY_RETURN_BOUNCE,
  GetEmailCampaign.JSON_PROPERTY_RECIPIENTS,
  GetEmailCampaign.JSON_PROPERTY_STATISTICS
})
@JsonTypeName("getEmailCampaign")
public class GetEmailCampaign {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_PREVIEW_TEXT = "previewText";
  private String previewText;

  /**
   * Type of campaign
   */
  public enum TypeEnum {
    CLASSIC("classic"),
    
    TRIGGER("trigger");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Status of the campaign
   */
  public enum StatusEnum {
    DRAFT("draft"),
    
    SENT("sent"),
    
    ARCHIVE("archive"),
    
    QUEUED("queued"),
    
    SUSPENDED("suspended"),
    
    IN_PROCESS("in_process");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_SCHEDULED_AT = "scheduledAt";
  private String scheduledAt;

  public static final String JSON_PROPERTY_AB_TESTING = "abTesting";
  private Boolean abTesting;

  public static final String JSON_PROPERTY_SUBJECT_A = "subjectA";
  private String subjectA;

  public static final String JSON_PROPERTY_SUBJECT_B = "subjectB";
  private String subjectB;

  public static final String JSON_PROPERTY_SPLIT_RULE = "splitRule";
  private Integer splitRule;

  public static final String JSON_PROPERTY_WINNER_CRITERIA = "winnerCriteria";
  private String winnerCriteria;

  public static final String JSON_PROPERTY_WINNER_DELAY = "winnerDelay";
  private Integer winnerDelay;

  public static final String JSON_PROPERTY_SEND_AT_BEST_TIME = "sendAtBestTime";
  private Boolean sendAtBestTime;

  public static final String JSON_PROPERTY_TEST_SENT = "testSent";
  private Boolean testSent;

  public static final String JSON_PROPERTY_HEADER = "header";
  private String header;

  public static final String JSON_PROPERTY_FOOTER = "footer";
  private String footer;

  public static final String JSON_PROPERTY_SENDER = "sender";
  private GetExtendedCampaignOverviewAllOfSender sender;

  public static final String JSON_PROPERTY_REPLY_TO = "replyTo";
  private String replyTo;

  public static final String JSON_PROPERTY_TO_FIELD = "toField";
  private String toField;

  public static final String JSON_PROPERTY_HTML_CONTENT = "htmlContent";
  private String htmlContent;

  public static final String JSON_PROPERTY_SHARE_LINK = "shareLink";
  private String shareLink;

  public static final String JSON_PROPERTY_TAG = "tag";
  private String tag;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private String createdAt;

  public static final String JSON_PROPERTY_MODIFIED_AT = "modifiedAt";
  private String modifiedAt;

  public static final String JSON_PROPERTY_INLINE_IMAGE_ACTIVATION = "inlineImageActivation";
  private Boolean inlineImageActivation;

  public static final String JSON_PROPERTY_MIRROR_ACTIVE = "mirrorActive";
  private Boolean mirrorActive;

  public static final String JSON_PROPERTY_RECURRING = "recurring";
  private Boolean recurring;

  public static final String JSON_PROPERTY_SENT_DATE = "sentDate";
  private String sentDate;

  public static final String JSON_PROPERTY_RETURN_BOUNCE = "returnBounce";
  private Long returnBounce;

  public static final String JSON_PROPERTY_RECIPIENTS = "recipients";
  private GetCampaignRecipients recipients;

  public static final String JSON_PROPERTY_STATISTICS = "statistics";
  private GetExtendedCampaignStats statistics;

  public GetEmailCampaign() {
  }

  public GetEmailCampaign id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the campaign
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public GetEmailCampaign name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the campaign
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public GetEmailCampaign subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of the campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;false&#x60;
   * @return subject
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public GetEmailCampaign previewText(String previewText) {
    
    this.previewText = previewText;
    return this;
  }

   /**
   * Preview text or preheader of the email campaign
   * @return previewText
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPreviewText() {
    return previewText;
  }


  @JsonProperty(JSON_PROPERTY_PREVIEW_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreviewText(String previewText) {
    this.previewText = previewText;
  }


  public GetEmailCampaign type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of campaign
   * @return type
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public GetEmailCampaign status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the campaign
   * @return status
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public GetEmailCampaign scheduledAt(String scheduledAt) {
    
    this.scheduledAt = scheduledAt;
    return this;
  }

   /**
   * UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return scheduledAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheduledAt() {
    return scheduledAt;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduledAt(String scheduledAt) {
    this.scheduledAt = scheduledAt;
  }


  public GetEmailCampaign abTesting(Boolean abTesting) {
    
    this.abTesting = abTesting;
    return this;
  }

   /**
   * Status of A/B Test for the campaign. abTesting &#x3D; false means it is disabled, &amp; abTesting &#x3D; true means it is enabled.
   * @return abTesting
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AB_TESTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAbTesting() {
    return abTesting;
  }


  @JsonProperty(JSON_PROPERTY_AB_TESTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbTesting(Boolean abTesting) {
    this.abTesting = abTesting;
  }


  public GetEmailCampaign subjectA(String subjectA) {
    
    this.subjectA = subjectA;
    return this;
  }

   /**
   * Subject A of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return subjectA
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectA() {
    return subjectA;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_A)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectA(String subjectA) {
    this.subjectA = subjectA;
  }


  public GetEmailCampaign subjectB(String subjectB) {
    
    this.subjectB = subjectB;
    return this;
  }

   /**
   * Subject B of the ab-test campaign. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return subjectB
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT_B)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubjectB() {
    return subjectB;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT_B)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubjectB(String subjectB) {
    this.subjectB = subjectB;
  }


  public GetEmailCampaign splitRule(Integer splitRule) {
    
    this.splitRule = splitRule;
    return this;
  }

   /**
   * The size of your ab-test groups. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return splitRule
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPLIT_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSplitRule() {
    return splitRule;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_RULE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitRule(Integer splitRule) {
    this.splitRule = splitRule;
  }


  public GetEmailCampaign winnerCriteria(String winnerCriteria) {
    
    this.winnerCriteria = winnerCriteria;
    return this;
  }

   /**
   * Criteria for the winning version. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return winnerCriteria
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WINNER_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWinnerCriteria() {
    return winnerCriteria;
  }


  @JsonProperty(JSON_PROPERTY_WINNER_CRITERIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinnerCriteria(String winnerCriteria) {
    this.winnerCriteria = winnerCriteria;
  }


  public GetEmailCampaign winnerDelay(Integer winnerDelay) {
    
    this.winnerDelay = winnerDelay;
    return this;
  }

   /**
   * The duration of the test in hours at the end of which the winning version will be sent. Only available if &#x60;abTesting&#x60; flag of the campaign is &#x60;true&#x60;
   * @return winnerDelay
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WINNER_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWinnerDelay() {
    return winnerDelay;
  }


  @JsonProperty(JSON_PROPERTY_WINNER_DELAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWinnerDelay(Integer winnerDelay) {
    this.winnerDelay = winnerDelay;
  }


  public GetEmailCampaign sendAtBestTime(Boolean sendAtBestTime) {
    
    this.sendAtBestTime = sendAtBestTime;
    return this;
  }

   /**
   * It is true if you have chosen to send your campaign at best time, otherwise it is false
   * @return sendAtBestTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_AT_BEST_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendAtBestTime() {
    return sendAtBestTime;
  }


  @JsonProperty(JSON_PROPERTY_SEND_AT_BEST_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendAtBestTime(Boolean sendAtBestTime) {
    this.sendAtBestTime = sendAtBestTime;
  }


  public GetEmailCampaign testSent(Boolean testSent) {
    
    this.testSent = testSent;
    return this;
  }

   /**
   * Retrieved the status of test email sending. (true&#x3D;Test email has been sent  false&#x3D;Test email has not been sent)
   * @return testSent
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEST_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTestSent() {
    return testSent;
  }


  @JsonProperty(JSON_PROPERTY_TEST_SENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTestSent(Boolean testSent) {
    this.testSent = testSent;
  }


  public GetEmailCampaign header(String header) {
    
    this.header = header;
    return this;
  }

   /**
   * Header of the campaign
   * @return header
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHeader() {
    return header;
  }


  @JsonProperty(JSON_PROPERTY_HEADER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeader(String header) {
    this.header = header;
  }


  public GetEmailCampaign footer(String footer) {
    
    this.footer = footer;
    return this;
  }

   /**
   * Footer of the campaign
   * @return footer
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FOOTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFooter() {
    return footer;
  }


  @JsonProperty(JSON_PROPERTY_FOOTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFooter(String footer) {
    this.footer = footer;
  }


  public GetEmailCampaign sender(GetExtendedCampaignOverviewAllOfSender sender) {
    
    this.sender = sender;
    return this;
  }

   /**
   * Get sender
   * @return sender
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetExtendedCampaignOverviewAllOfSender getSender() {
    return sender;
  }


  @JsonProperty(JSON_PROPERTY_SENDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSender(GetExtendedCampaignOverviewAllOfSender sender) {
    this.sender = sender;
  }


  public GetEmailCampaign replyTo(String replyTo) {
    
    this.replyTo = replyTo;
    return this;
  }

   /**
   * Email defined as the \&quot;Reply to\&quot; of the campaign
   * @return replyTo
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getReplyTo() {
    return replyTo;
  }


  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public GetEmailCampaign toField(String toField) {
    
    this.toField = toField;
    return this;
  }

   /**
   * Customisation of the \&quot;to\&quot; field of the campaign
   * @return toField
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getToField() {
    return toField;
  }


  @JsonProperty(JSON_PROPERTY_TO_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToField(String toField) {
    this.toField = toField;
  }


  public GetEmailCampaign htmlContent(String htmlContent) {
    
    this.htmlContent = htmlContent;
    return this;
  }

   /**
   * HTML content of the campaign
   * @return htmlContent
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHtmlContent() {
    return htmlContent;
  }


  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHtmlContent(String htmlContent) {
    this.htmlContent = htmlContent;
  }


  public GetEmailCampaign shareLink(String shareLink) {
    
    this.shareLink = shareLink;
    return this;
  }

   /**
   * Link to share the campaign on social medias
   * @return shareLink
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARE_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShareLink() {
    return shareLink;
  }


  @JsonProperty(JSON_PROPERTY_SHARE_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShareLink(String shareLink) {
    this.shareLink = shareLink;
  }


  public GetEmailCampaign tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * Tag of the campaign
   * @return tag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTag() {
    return tag;
  }


  @JsonProperty(JSON_PROPERTY_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTag(String tag) {
    this.tag = tag;
  }


  public GetEmailCampaign createdAt(String createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return createdAt
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public GetEmailCampaign modifiedAt(String modifiedAt) {
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
   * @return modifiedAt
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModifiedAt() {
    return modifiedAt;
  }


  @JsonProperty(JSON_PROPERTY_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public GetEmailCampaign inlineImageActivation(Boolean inlineImageActivation) {
    
    this.inlineImageActivation = inlineImageActivation;
    return this;
  }

   /**
   * Status of inline image. inlineImageActivation &#x3D; false means image can’t be embedded, &amp; inlineImageActivation &#x3D; true means image can be embedded, in the email.
   * @return inlineImageActivation
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INLINE_IMAGE_ACTIVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInlineImageActivation() {
    return inlineImageActivation;
  }


  @JsonProperty(JSON_PROPERTY_INLINE_IMAGE_ACTIVATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInlineImageActivation(Boolean inlineImageActivation) {
    this.inlineImageActivation = inlineImageActivation;
  }


  public GetEmailCampaign mirrorActive(Boolean mirrorActive) {
    
    this.mirrorActive = mirrorActive;
    return this;
  }

   /**
   * Status of mirror links in campaign. mirrorActive &#x3D; false means mirror links are deactivated, &amp; mirrorActive &#x3D; true means mirror links are activated, in the campaign
   * @return mirrorActive
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIRROR_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMirrorActive() {
    return mirrorActive;
  }


  @JsonProperty(JSON_PROPERTY_MIRROR_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMirrorActive(Boolean mirrorActive) {
    this.mirrorActive = mirrorActive;
  }


  public GetEmailCampaign recurring(Boolean recurring) {
    
    this.recurring = recurring;
    return this;
  }

   /**
   * FOR TRIGGER ONLY ! Type of trigger campaign.recurring &#x3D; false means contact can receive the same Trigger campaign only once, &amp; recurring &#x3D; true means contact can receive the same Trigger campaign several times
   * @return recurring
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRecurring() {
    return recurring;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurring(Boolean recurring) {
    this.recurring = recurring;
  }


  public GetEmailCampaign sentDate(String sentDate) {
    
    this.sentDate = sentDate;
    return this;
  }

   /**
   * Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if &#39;status&#39; of the campaign is &#39;sent&#39;
   * @return sentDate
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSentDate() {
    return sentDate;
  }


  @JsonProperty(JSON_PROPERTY_SENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentDate(String sentDate) {
    this.sentDate = sentDate;
  }


  public GetEmailCampaign returnBounce(Long returnBounce) {
    
    this.returnBounce = returnBounce;
    return this;
  }

   /**
   * Total number of non-delivered campaigns for a particular campaign id.
   * @return returnBounce
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETURN_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getReturnBounce() {
    return returnBounce;
  }


  @JsonProperty(JSON_PROPERTY_RETURN_BOUNCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReturnBounce(Long returnBounce) {
    this.returnBounce = returnBounce;
  }


  public GetEmailCampaign recipients(GetCampaignRecipients recipients) {
    
    this.recipients = recipients;
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetCampaignRecipients getRecipients() {
    return recipients;
  }


  @JsonProperty(JSON_PROPERTY_RECIPIENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecipients(GetCampaignRecipients recipients) {
    this.recipients = recipients;
  }


  public GetEmailCampaign statistics(GetExtendedCampaignStats statistics) {
    
    this.statistics = statistics;
    return this;
  }

   /**
   * Get statistics
   * @return statistics
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GetExtendedCampaignStats getStatistics() {
    return statistics;
  }


  @JsonProperty(JSON_PROPERTY_STATISTICS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatistics(GetExtendedCampaignStats statistics) {
    this.statistics = statistics;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetEmailCampaign getEmailCampaign = (GetEmailCampaign) o;
    return Objects.equals(this.id, getEmailCampaign.id) &&
        Objects.equals(this.name, getEmailCampaign.name) &&
        Objects.equals(this.subject, getEmailCampaign.subject) &&
        Objects.equals(this.previewText, getEmailCampaign.previewText) &&
        Objects.equals(this.type, getEmailCampaign.type) &&
        Objects.equals(this.status, getEmailCampaign.status) &&
        Objects.equals(this.scheduledAt, getEmailCampaign.scheduledAt) &&
        Objects.equals(this.abTesting, getEmailCampaign.abTesting) &&
        Objects.equals(this.subjectA, getEmailCampaign.subjectA) &&
        Objects.equals(this.subjectB, getEmailCampaign.subjectB) &&
        Objects.equals(this.splitRule, getEmailCampaign.splitRule) &&
        Objects.equals(this.winnerCriteria, getEmailCampaign.winnerCriteria) &&
        Objects.equals(this.winnerDelay, getEmailCampaign.winnerDelay) &&
        Objects.equals(this.sendAtBestTime, getEmailCampaign.sendAtBestTime) &&
        Objects.equals(this.testSent, getEmailCampaign.testSent) &&
        Objects.equals(this.header, getEmailCampaign.header) &&
        Objects.equals(this.footer, getEmailCampaign.footer) &&
        Objects.equals(this.sender, getEmailCampaign.sender) &&
        Objects.equals(this.replyTo, getEmailCampaign.replyTo) &&
        Objects.equals(this.toField, getEmailCampaign.toField) &&
        Objects.equals(this.htmlContent, getEmailCampaign.htmlContent) &&
        Objects.equals(this.shareLink, getEmailCampaign.shareLink) &&
        Objects.equals(this.tag, getEmailCampaign.tag) &&
        Objects.equals(this.createdAt, getEmailCampaign.createdAt) &&
        Objects.equals(this.modifiedAt, getEmailCampaign.modifiedAt) &&
        Objects.equals(this.inlineImageActivation, getEmailCampaign.inlineImageActivation) &&
        Objects.equals(this.mirrorActive, getEmailCampaign.mirrorActive) &&
        Objects.equals(this.recurring, getEmailCampaign.recurring) &&
        Objects.equals(this.sentDate, getEmailCampaign.sentDate) &&
        Objects.equals(this.returnBounce, getEmailCampaign.returnBounce) &&
        Objects.equals(this.recipients, getEmailCampaign.recipients) &&
        Objects.equals(this.statistics, getEmailCampaign.statistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, subject, previewText, type, status, scheduledAt, abTesting, subjectA, subjectB, splitRule, winnerCriteria, winnerDelay, sendAtBestTime, testSent, header, footer, sender, replyTo, toField, htmlContent, shareLink, tag, createdAt, modifiedAt, inlineImageActivation, mirrorActive, recurring, sentDate, returnBounce, recipients, statistics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetEmailCampaign {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    previewText: ").append(toIndentedString(previewText)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    scheduledAt: ").append(toIndentedString(scheduledAt)).append("\n");
    sb.append("    abTesting: ").append(toIndentedString(abTesting)).append("\n");
    sb.append("    subjectA: ").append(toIndentedString(subjectA)).append("\n");
    sb.append("    subjectB: ").append(toIndentedString(subjectB)).append("\n");
    sb.append("    splitRule: ").append(toIndentedString(splitRule)).append("\n");
    sb.append("    winnerCriteria: ").append(toIndentedString(winnerCriteria)).append("\n");
    sb.append("    winnerDelay: ").append(toIndentedString(winnerDelay)).append("\n");
    sb.append("    sendAtBestTime: ").append(toIndentedString(sendAtBestTime)).append("\n");
    sb.append("    testSent: ").append(toIndentedString(testSent)).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    toField: ").append(toIndentedString(toField)).append("\n");
    sb.append("    htmlContent: ").append(toIndentedString(htmlContent)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    inlineImageActivation: ").append(toIndentedString(inlineImageActivation)).append("\n");
    sb.append("    mirrorActive: ").append(toIndentedString(mirrorActive)).append("\n");
    sb.append("    recurring: ").append(toIndentedString(recurring)).append("\n");
    sb.append("    sentDate: ").append(toIndentedString(sentDate)).append("\n");
    sb.append("    returnBounce: ").append(toIndentedString(returnBounce)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subject` to the URL query string
    if (getSubject() != null) {
      try {
        joiner.add(String.format("%ssubject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `previewText` to the URL query string
    if (getPreviewText() != null) {
      try {
        joiner.add(String.format("%spreviewText%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPreviewText()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `type` to the URL query string
    if (getType() != null) {
      try {
        joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scheduledAt` to the URL query string
    if (getScheduledAt() != null) {
      try {
        joiner.add(String.format("%sscheduledAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScheduledAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `abTesting` to the URL query string
    if (getAbTesting() != null) {
      try {
        joiner.add(String.format("%sabTesting%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAbTesting()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectA` to the URL query string
    if (getSubjectA() != null) {
      try {
        joiner.add(String.format("%ssubjectA%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectA()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `subjectB` to the URL query string
    if (getSubjectB() != null) {
      try {
        joiner.add(String.format("%ssubjectB%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubjectB()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `splitRule` to the URL query string
    if (getSplitRule() != null) {
      try {
        joiner.add(String.format("%ssplitRule%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSplitRule()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `winnerCriteria` to the URL query string
    if (getWinnerCriteria() != null) {
      try {
        joiner.add(String.format("%swinnerCriteria%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWinnerCriteria()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `winnerDelay` to the URL query string
    if (getWinnerDelay() != null) {
      try {
        joiner.add(String.format("%swinnerDelay%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWinnerDelay()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sendAtBestTime` to the URL query string
    if (getSendAtBestTime() != null) {
      try {
        joiner.add(String.format("%ssendAtBestTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSendAtBestTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `testSent` to the URL query string
    if (getTestSent() != null) {
      try {
        joiner.add(String.format("%stestSent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTestSent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `header` to the URL query string
    if (getHeader() != null) {
      try {
        joiner.add(String.format("%sheader%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeader()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `footer` to the URL query string
    if (getFooter() != null) {
      try {
        joiner.add(String.format("%sfooter%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFooter()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sender` to the URL query string
    if (getSender() != null) {
      joiner.add(getSender().toUrlQueryString(prefix + "sender" + suffix));
    }

    // add `replyTo` to the URL query string
    if (getReplyTo() != null) {
      try {
        joiner.add(String.format("%sreplyTo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReplyTo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `toField` to the URL query string
    if (getToField() != null) {
      try {
        joiner.add(String.format("%stoField%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getToField()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `htmlContent` to the URL query string
    if (getHtmlContent() != null) {
      try {
        joiner.add(String.format("%shtmlContent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHtmlContent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `shareLink` to the URL query string
    if (getShareLink() != null) {
      try {
        joiner.add(String.format("%sshareLink%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getShareLink()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tag` to the URL query string
    if (getTag() != null) {
      try {
        joiner.add(String.format("%stag%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTag()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `modifiedAt` to the URL query string
    if (getModifiedAt() != null) {
      try {
        joiner.add(String.format("%smodifiedAt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModifiedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `inlineImageActivation` to the URL query string
    if (getInlineImageActivation() != null) {
      try {
        joiner.add(String.format("%sinlineImageActivation%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInlineImageActivation()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mirrorActive` to the URL query string
    if (getMirrorActive() != null) {
      try {
        joiner.add(String.format("%smirrorActive%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMirrorActive()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `recurring` to the URL query string
    if (getRecurring() != null) {
      try {
        joiner.add(String.format("%srecurring%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRecurring()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sentDate` to the URL query string
    if (getSentDate() != null) {
      try {
        joiner.add(String.format("%ssentDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSentDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `returnBounce` to the URL query string
    if (getReturnBounce() != null) {
      try {
        joiner.add(String.format("%sreturnBounce%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getReturnBounce()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `recipients` to the URL query string
    if (getRecipients() != null) {
      joiner.add(getRecipients().toUrlQueryString(prefix + "recipients" + suffix));
    }

    // add `statistics` to the URL query string
    if (getStatistics() != null) {
      joiner.add(getStatistics().toUrlQueryString(prefix + "statistics" + suffix));
    }

    return joiner.toString();
  }

}

