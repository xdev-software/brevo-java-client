/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CorporateSubAccountIpDissociatePutRequest
 */
@JsonPropertyOrder({
  CorporateSubAccountIpDissociatePutRequest.JSON_PROPERTY_IP,
  CorporateSubAccountIpDissociatePutRequest.JSON_PROPERTY_IDS
})
@JsonTypeName("_corporate_subAccount_ip_dissociate_put_request")
public class CorporateSubAccountIpDissociatePutRequest {
  public static final String JSON_PROPERTY_IP = "ip";
  @jakarta.annotation.Nonnull
  private String ip;

  public static final String JSON_PROPERTY_IDS = "ids";
  @jakarta.annotation.Nonnull
  private List<Long> ids = new ArrayList<>();

  public CorporateSubAccountIpDissociatePutRequest() {
  }

  public CorporateSubAccountIpDissociatePutRequest ip(@jakarta.annotation.Nonnull String ip) {
    
    this.ip = ip;
    return this;
  }

  /**
   * IP address
   * @return ip
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIp() {
    return ip;
  }


  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIp(@jakarta.annotation.Nonnull String ip) {
    this.ip = ip;
  }

  public CorporateSubAccountIpDissociatePutRequest ids(@jakarta.annotation.Nonnull List<Long> ids) {
    
    this.ids = ids;
    return this;
  }

  public CorporateSubAccountIpDissociatePutRequest addIdsItem(Long idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

  /**
   * Pass the list of sub-account Ids to be dissociated from the IP address
   * @return ids
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Long> getIds() {
    return ids;
  }


  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIds(@jakarta.annotation.Nonnull List<Long> ids) {
    this.ids = ids;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorporateSubAccountIpDissociatePutRequest corporateSubAccountIpDissociatePutRequest = (CorporateSubAccountIpDissociatePutRequest) o;
    return Objects.equals(this.ip, corporateSubAccountIpDissociatePutRequest.ip) &&
        Objects.equals(this.ids, corporateSubAccountIpDissociatePutRequest.ids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ip, ids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorporateSubAccountIpDissociatePutRequest {\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `ip` to the URL query string
    if (getIp() != null) {
      try {
        joiner.add(String.format("%sip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `ids` to the URL query string
    if (getIds() != null) {
      for (int i = 0; i < getIds().size(); i++) {
        try {
          joiner.add(String.format("%sids%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getIds().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

