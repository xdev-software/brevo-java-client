/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetAggregatedReport
 */
@JsonPropertyOrder({
  GetAggregatedReport.JSON_PROPERTY_RANGE,
  GetAggregatedReport.JSON_PROPERTY_REQUESTS,
  GetAggregatedReport.JSON_PROPERTY_DELIVERED,
  GetAggregatedReport.JSON_PROPERTY_HARD_BOUNCES,
  GetAggregatedReport.JSON_PROPERTY_SOFT_BOUNCES,
  GetAggregatedReport.JSON_PROPERTY_CLICKS,
  GetAggregatedReport.JSON_PROPERTY_UNIQUE_CLICKS,
  GetAggregatedReport.JSON_PROPERTY_OPENS,
  GetAggregatedReport.JSON_PROPERTY_UNIQUE_OPENS,
  GetAggregatedReport.JSON_PROPERTY_SPAM_REPORTS,
  GetAggregatedReport.JSON_PROPERTY_BLOCKED,
  GetAggregatedReport.JSON_PROPERTY_INVALID,
  GetAggregatedReport.JSON_PROPERTY_UNSUBSCRIBED
})
@JsonTypeName("getAggregatedReport")
public class GetAggregatedReport {
  public static final String JSON_PROPERTY_RANGE = "range";
  @jakarta.annotation.Nullable
  private String range;

  public static final String JSON_PROPERTY_REQUESTS = "requests";
  @jakarta.annotation.Nullable
  private Long requests;

  public static final String JSON_PROPERTY_DELIVERED = "delivered";
  @jakarta.annotation.Nullable
  private Long delivered;

  public static final String JSON_PROPERTY_HARD_BOUNCES = "hardBounces";
  @jakarta.annotation.Nullable
  private Long hardBounces;

  public static final String JSON_PROPERTY_SOFT_BOUNCES = "softBounces";
  @jakarta.annotation.Nullable
  private Long softBounces;

  public static final String JSON_PROPERTY_CLICKS = "clicks";
  @jakarta.annotation.Nullable
  private Long clicks;

  public static final String JSON_PROPERTY_UNIQUE_CLICKS = "uniqueClicks";
  @jakarta.annotation.Nullable
  private Long uniqueClicks;

  public static final String JSON_PROPERTY_OPENS = "opens";
  @jakarta.annotation.Nullable
  private Long opens;

  public static final String JSON_PROPERTY_UNIQUE_OPENS = "uniqueOpens";
  @jakarta.annotation.Nullable
  private Long uniqueOpens;

  public static final String JSON_PROPERTY_SPAM_REPORTS = "spamReports";
  @jakarta.annotation.Nullable
  private Long spamReports;

  public static final String JSON_PROPERTY_BLOCKED = "blocked";
  @jakarta.annotation.Nullable
  private Long blocked;

  public static final String JSON_PROPERTY_INVALID = "invalid";
  @jakarta.annotation.Nullable
  private Long invalid;

  public static final String JSON_PROPERTY_UNSUBSCRIBED = "unsubscribed";
  @jakarta.annotation.Nullable
  private Long unsubscribed;

  public GetAggregatedReport() {
  }

  public GetAggregatedReport range(@jakarta.annotation.Nullable String range) {
    
    this.range = range;
    return this;
  }

  /**
   * Time frame of the report
   * @return range
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRange() {
    return range;
  }


  @JsonProperty(JSON_PROPERTY_RANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRange(@jakarta.annotation.Nullable String range) {
    this.range = range;
  }

  public GetAggregatedReport requests(@jakarta.annotation.Nullable Long requests) {
    
    this.requests = requests;
    return this;
  }

  /**
   * Number of requests for the timeframe
   * @return requests
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getRequests() {
    return requests;
  }


  @JsonProperty(JSON_PROPERTY_REQUESTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequests(@jakarta.annotation.Nullable Long requests) {
    this.requests = requests;
  }

  public GetAggregatedReport delivered(@jakarta.annotation.Nullable Long delivered) {
    
    this.delivered = delivered;
    return this;
  }

  /**
   * Number of delivered emails for the timeframe
   * @return delivered
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDelivered() {
    return delivered;
  }


  @JsonProperty(JSON_PROPERTY_DELIVERED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelivered(@jakarta.annotation.Nullable Long delivered) {
    this.delivered = delivered;
  }

  public GetAggregatedReport hardBounces(@jakarta.annotation.Nullable Long hardBounces) {
    
    this.hardBounces = hardBounces;
    return this;
  }

  /**
   * Number of hardbounces for the timeframe
   * @return hardBounces
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getHardBounces() {
    return hardBounces;
  }


  @JsonProperty(JSON_PROPERTY_HARD_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHardBounces(@jakarta.annotation.Nullable Long hardBounces) {
    this.hardBounces = hardBounces;
  }

  public GetAggregatedReport softBounces(@jakarta.annotation.Nullable Long softBounces) {
    
    this.softBounces = softBounces;
    return this;
  }

  /**
   * Number of softbounces for the timeframe
   * @return softBounces
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSoftBounces() {
    return softBounces;
  }


  @JsonProperty(JSON_PROPERTY_SOFT_BOUNCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoftBounces(@jakarta.annotation.Nullable Long softBounces) {
    this.softBounces = softBounces;
  }

  public GetAggregatedReport clicks(@jakarta.annotation.Nullable Long clicks) {
    
    this.clicks = clicks;
    return this;
  }

  /**
   * Number of clicks for the timeframe
   * @return clicks
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getClicks() {
    return clicks;
  }


  @JsonProperty(JSON_PROPERTY_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClicks(@jakarta.annotation.Nullable Long clicks) {
    this.clicks = clicks;
  }

  public GetAggregatedReport uniqueClicks(@jakarta.annotation.Nullable Long uniqueClicks) {
    
    this.uniqueClicks = uniqueClicks;
    return this;
  }

  /**
   * Number of unique clicks for the timeframe
   * @return uniqueClicks
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUniqueClicks() {
    return uniqueClicks;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_CLICKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueClicks(@jakarta.annotation.Nullable Long uniqueClicks) {
    this.uniqueClicks = uniqueClicks;
  }

  public GetAggregatedReport opens(@jakarta.annotation.Nullable Long opens) {
    
    this.opens = opens;
    return this;
  }

  /**
   * Number of openings for the timeframe
   * @return opens
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOpens() {
    return opens;
  }


  @JsonProperty(JSON_PROPERTY_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOpens(@jakarta.annotation.Nullable Long opens) {
    this.opens = opens;
  }

  public GetAggregatedReport uniqueOpens(@jakarta.annotation.Nullable Long uniqueOpens) {
    
    this.uniqueOpens = uniqueOpens;
    return this;
  }

  /**
   * Number of unique openings for the timeframe
   * @return uniqueOpens
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUniqueOpens() {
    return uniqueOpens;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUE_OPENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUniqueOpens(@jakarta.annotation.Nullable Long uniqueOpens) {
    this.uniqueOpens = uniqueOpens;
  }

  public GetAggregatedReport spamReports(@jakarta.annotation.Nullable Long spamReports) {
    
    this.spamReports = spamReports;
    return this;
  }

  /**
   * Number of complaint (spam report) for the timeframe
   * @return spamReports
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPAM_REPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSpamReports() {
    return spamReports;
  }


  @JsonProperty(JSON_PROPERTY_SPAM_REPORTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpamReports(@jakarta.annotation.Nullable Long spamReports) {
    this.spamReports = spamReports;
  }

  public GetAggregatedReport blocked(@jakarta.annotation.Nullable Long blocked) {
    
    this.blocked = blocked;
    return this;
  }

  /**
   * Number of blocked contact emails for the timeframe
   * @return blocked
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BLOCKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBlocked() {
    return blocked;
  }


  @JsonProperty(JSON_PROPERTY_BLOCKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBlocked(@jakarta.annotation.Nullable Long blocked) {
    this.blocked = blocked;
  }

  public GetAggregatedReport invalid(@jakarta.annotation.Nullable Long invalid) {
    
    this.invalid = invalid;
    return this;
  }

  /**
   * Number of invalid emails for the timeframe
   * @return invalid
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInvalid() {
    return invalid;
  }


  @JsonProperty(JSON_PROPERTY_INVALID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvalid(@jakarta.annotation.Nullable Long invalid) {
    this.invalid = invalid;
  }

  public GetAggregatedReport unsubscribed(@jakarta.annotation.Nullable Long unsubscribed) {
    
    this.unsubscribed = unsubscribed;
    return this;
  }

  /**
   * Number of unsubscribed emails for the timeframe
   * @return unsubscribed
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUnsubscribed() {
    return unsubscribed;
  }


  @JsonProperty(JSON_PROPERTY_UNSUBSCRIBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnsubscribed(@jakarta.annotation.Nullable Long unsubscribed) {
    this.unsubscribed = unsubscribed;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAggregatedReport getAggregatedReport = (GetAggregatedReport) o;
    return Objects.equals(this.range, getAggregatedReport.range) &&
        Objects.equals(this.requests, getAggregatedReport.requests) &&
        Objects.equals(this.delivered, getAggregatedReport.delivered) &&
        Objects.equals(this.hardBounces, getAggregatedReport.hardBounces) &&
        Objects.equals(this.softBounces, getAggregatedReport.softBounces) &&
        Objects.equals(this.clicks, getAggregatedReport.clicks) &&
        Objects.equals(this.uniqueClicks, getAggregatedReport.uniqueClicks) &&
        Objects.equals(this.opens, getAggregatedReport.opens) &&
        Objects.equals(this.uniqueOpens, getAggregatedReport.uniqueOpens) &&
        Objects.equals(this.spamReports, getAggregatedReport.spamReports) &&
        Objects.equals(this.blocked, getAggregatedReport.blocked) &&
        Objects.equals(this.invalid, getAggregatedReport.invalid) &&
        Objects.equals(this.unsubscribed, getAggregatedReport.unsubscribed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(range, requests, delivered, hardBounces, softBounces, clicks, uniqueClicks, opens, uniqueOpens, spamReports, blocked, invalid, unsubscribed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAggregatedReport {\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    hardBounces: ").append(toIndentedString(hardBounces)).append("\n");
    sb.append("    softBounces: ").append(toIndentedString(softBounces)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    uniqueClicks: ").append(toIndentedString(uniqueClicks)).append("\n");
    sb.append("    opens: ").append(toIndentedString(opens)).append("\n");
    sb.append("    uniqueOpens: ").append(toIndentedString(uniqueOpens)).append("\n");
    sb.append("    spamReports: ").append(toIndentedString(spamReports)).append("\n");
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    invalid: ").append(toIndentedString(invalid)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `range` to the URL query string
    if (getRange() != null) {
      try {
        joiner.add(String.format("%srange%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRange()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `requests` to the URL query string
    if (getRequests() != null) {
      try {
        joiner.add(String.format("%srequests%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRequests()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `delivered` to the URL query string
    if (getDelivered() != null) {
      try {
        joiner.add(String.format("%sdelivered%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDelivered()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hardBounces` to the URL query string
    if (getHardBounces() != null) {
      try {
        joiner.add(String.format("%shardBounces%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHardBounces()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `softBounces` to the URL query string
    if (getSoftBounces() != null) {
      try {
        joiner.add(String.format("%ssoftBounces%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSoftBounces()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `clicks` to the URL query string
    if (getClicks() != null) {
      try {
        joiner.add(String.format("%sclicks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClicks()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uniqueClicks` to the URL query string
    if (getUniqueClicks() != null) {
      try {
        joiner.add(String.format("%suniqueClicks%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUniqueClicks()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `opens` to the URL query string
    if (getOpens() != null) {
      try {
        joiner.add(String.format("%sopens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOpens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `uniqueOpens` to the URL query string
    if (getUniqueOpens() != null) {
      try {
        joiner.add(String.format("%suniqueOpens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUniqueOpens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `spamReports` to the URL query string
    if (getSpamReports() != null) {
      try {
        joiner.add(String.format("%sspamReports%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSpamReports()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `blocked` to the URL query string
    if (getBlocked() != null) {
      try {
        joiner.add(String.format("%sblocked%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBlocked()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `invalid` to the URL query string
    if (getInvalid() != null) {
      try {
        joiner.add(String.format("%sinvalid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvalid()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `unsubscribed` to the URL query string
    if (getUnsubscribed() != null) {
      try {
        joiner.add(String.format("%sunsubscribed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUnsubscribed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

