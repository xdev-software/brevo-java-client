/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * GetContactCampaignStatsTransacAttributesInner
 */
@JsonPropertyOrder({
  GetContactCampaignStatsTransacAttributesInner.JSON_PROPERTY_ORDER_DATE,
  GetContactCampaignStatsTransacAttributesInner.JSON_PROPERTY_ORDER_PRICE,
  GetContactCampaignStatsTransacAttributesInner.JSON_PROPERTY_ORDER_ID
})
@JsonTypeName("getContactCampaignStats_transacAttributes_inner")
public class GetContactCampaignStatsTransacAttributesInner {
  public static final String JSON_PROPERTY_ORDER_DATE = "orderDate";
  private LocalDate orderDate;

  public static final String JSON_PROPERTY_ORDER_PRICE = "orderPrice";
  private Float orderPrice;

  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private Long orderId;

  public GetContactCampaignStatsTransacAttributesInner() {
  }

  public GetContactCampaignStatsTransacAttributesInner orderDate(LocalDate orderDate) {
    
    this.orderDate = orderDate;
    return this;
  }

   /**
   * Date of the order
   * @return orderDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getOrderDate() {
    return orderDate;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderDate(LocalDate orderDate) {
    this.orderDate = orderDate;
  }

  public GetContactCampaignStatsTransacAttributesInner orderPrice(Float orderPrice) {
    
    this.orderPrice = orderPrice;
    return this;
  }

   /**
   * Price of the order
   * @return orderPrice
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Float getOrderPrice() {
    return orderPrice;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_PRICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderPrice(Float orderPrice) {
    this.orderPrice = orderPrice;
  }

  public GetContactCampaignStatsTransacAttributesInner orderId(Long orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * ID of the order
   * @return orderId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrderId(Long orderId) {
    this.orderId = orderId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetContactCampaignStatsTransacAttributesInner getContactCampaignStatsTransacAttributesInner = (GetContactCampaignStatsTransacAttributesInner) o;
    return Objects.equals(this.orderDate, getContactCampaignStatsTransacAttributesInner.orderDate) &&
        Objects.equals(this.orderPrice, getContactCampaignStatsTransacAttributesInner.orderPrice) &&
        Objects.equals(this.orderId, getContactCampaignStatsTransacAttributesInner.orderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orderDate, orderPrice, orderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetContactCampaignStatsTransacAttributesInner {\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    orderPrice: ").append(toIndentedString(orderPrice)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `orderDate` to the URL query string
    if (getOrderDate() != null) {
      try {
        joiner.add(String.format("%sorderDate%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderDate()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `orderPrice` to the URL query string
    if (getOrderPrice() != null) {
      try {
        joiner.add(String.format("%sorderPrice%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderPrice()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `orderId` to the URL query string
    if (getOrderId() != null) {
      try {
        joiner.add(String.format("%sorderId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrderId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

