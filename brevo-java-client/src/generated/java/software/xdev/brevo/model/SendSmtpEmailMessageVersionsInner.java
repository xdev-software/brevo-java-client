/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package software.xdev.brevo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import software.xdev.brevo.model.SendSmtpEmailBccInner;
import software.xdev.brevo.model.SendSmtpEmailCcInner;
import software.xdev.brevo.model.SendSmtpEmailReplyTo;
import software.xdev.brevo.model.SendSmtpEmailToInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SendSmtpEmailMessageVersionsInner
 */
@JsonPropertyOrder({
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_TO,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_PARAMS,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_BCC,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_CC,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_REPLY_TO,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_SUBJECT,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_HTML_CONTENT,
  SendSmtpEmailMessageVersionsInner.JSON_PROPERTY_TEXT_CONTENT
})
@JsonTypeName("sendSmtpEmail_messageVersions_inner")
public class SendSmtpEmailMessageVersionsInner {
  public static final String JSON_PROPERTY_TO = "to";
  @jakarta.annotation.Nonnull
  private List<SendSmtpEmailToInner> to = new ArrayList<>();

  public static final String JSON_PROPERTY_PARAMS = "params";
  @jakarta.annotation.Nullable
  private Map<String, Object> params = new HashMap<>();

  public static final String JSON_PROPERTY_BCC = "bcc";
  @jakarta.annotation.Nullable
  private List<SendSmtpEmailBccInner> bcc = new ArrayList<>();

  public static final String JSON_PROPERTY_CC = "cc";
  @jakarta.annotation.Nullable
  private List<SendSmtpEmailCcInner> cc = new ArrayList<>();

  public static final String JSON_PROPERTY_REPLY_TO = "replyTo";
  @jakarta.annotation.Nullable
  private SendSmtpEmailReplyTo replyTo;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @jakarta.annotation.Nullable
  private String subject;

  public static final String JSON_PROPERTY_HTML_CONTENT = "htmlContent";
  @jakarta.annotation.Nullable
  private String htmlContent;

  public static final String JSON_PROPERTY_TEXT_CONTENT = "textContent";
  @jakarta.annotation.Nullable
  private String textContent;

  public SendSmtpEmailMessageVersionsInner() {
  }

  public SendSmtpEmailMessageVersionsInner to(@jakarta.annotation.Nonnull List<SendSmtpEmailToInner> to) {
    
    this.to = to;
    return this;
  }

  public SendSmtpEmailMessageVersionsInner addToItem(SendSmtpEmailToInner toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * List of email addresses and names (_optional_) of the recipients. For example, **[{\&quot;name\&quot;:\&quot;Jimmy\&quot;, \&quot;email\&quot;:\&quot;jimmy98@example.com\&quot;}, {\&quot;name\&quot;:\&quot;Joe\&quot;, \&quot;email\&quot;:\&quot;joe@example.com\&quot;}]** 
   * @return to
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SendSmtpEmailToInner> getTo() {
    return to;
  }


  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTo(@jakarta.annotation.Nonnull List<SendSmtpEmailToInner> to) {
    this.to = to;
  }

  public SendSmtpEmailMessageVersionsInner params(@jakarta.annotation.Nullable Map<String, Object> params) {
    
    this.params = params;
    return this;
  }

  public SendSmtpEmailMessageVersionsInner putParamsItem(String key, Object paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

  /**
   * Pass the set of attributes to customize the template. For example, **{\&quot;FNAME\&quot;:\&quot;Joe\&quot;, \&quot;LNAME\&quot;:\&quot;Doe\&quot;}**. It&#39;s **considered only if template is in New Template Language format**. 
   * @return params
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARAMS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getParams() {
    return params;
  }


  @JsonProperty(JSON_PROPERTY_PARAMS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setParams(@jakarta.annotation.Nullable Map<String, Object> params) {
    this.params = params;
  }

  public SendSmtpEmailMessageVersionsInner bcc(@jakarta.annotation.Nullable List<SendSmtpEmailBccInner> bcc) {
    
    this.bcc = bcc;
    return this;
  }

  public SendSmtpEmailMessageVersionsInner addBccItem(SendSmtpEmailBccInner bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * List of email addresses and names (_optional_) of the recipients in bcc 
   * @return bcc
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SendSmtpEmailBccInner> getBcc() {
    return bcc;
  }


  @JsonProperty(JSON_PROPERTY_BCC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBcc(@jakarta.annotation.Nullable List<SendSmtpEmailBccInner> bcc) {
    this.bcc = bcc;
  }

  public SendSmtpEmailMessageVersionsInner cc(@jakarta.annotation.Nullable List<SendSmtpEmailCcInner> cc) {
    
    this.cc = cc;
    return this;
  }

  public SendSmtpEmailMessageVersionsInner addCcItem(SendSmtpEmailCcInner ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * List of email addresses and names (_optional_) of the recipients in cc 
   * @return cc
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SendSmtpEmailCcInner> getCc() {
    return cc;
  }


  @JsonProperty(JSON_PROPERTY_CC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCc(@jakarta.annotation.Nullable List<SendSmtpEmailCcInner> cc) {
    this.cc = cc;
  }

  public SendSmtpEmailMessageVersionsInner replyTo(@jakarta.annotation.Nullable SendSmtpEmailReplyTo replyTo) {
    
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Get replyTo
   * @return replyTo
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SendSmtpEmailReplyTo getReplyTo() {
    return replyTo;
  }


  @JsonProperty(JSON_PROPERTY_REPLY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplyTo(@jakarta.annotation.Nullable SendSmtpEmailReplyTo replyTo) {
    this.replyTo = replyTo;
  }

  public SendSmtpEmailMessageVersionsInner subject(@jakarta.annotation.Nullable String subject) {
    
    this.subject = subject;
    return this;
  }

  /**
   * Custom subject specific to message version 
   * @return subject
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(@jakarta.annotation.Nullable String subject) {
    this.subject = subject;
  }

  public SendSmtpEmailMessageVersionsInner htmlContent(@jakarta.annotation.Nullable String htmlContent) {
    
    this.htmlContent = htmlContent;
    return this;
  }

  /**
   * HTML body of the message. **Mandatory if &#39;templateId&#39; is not passed, ignored if &#39;templateId&#39; is passed** 
   * @return htmlContent
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHtmlContent() {
    return htmlContent;
  }


  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtmlContent(@jakarta.annotation.Nullable String htmlContent) {
    this.htmlContent = htmlContent;
  }

  public SendSmtpEmailMessageVersionsInner textContent(@jakarta.annotation.Nullable String textContent) {
    
    this.textContent = textContent;
    return this;
  }

  /**
   * Plain Text body of the message. **Ignored if &#39;templateId&#39; is passed** 
   * @return textContent
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEXT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTextContent() {
    return textContent;
  }


  @JsonProperty(JSON_PROPERTY_TEXT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextContent(@jakarta.annotation.Nullable String textContent) {
    this.textContent = textContent;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendSmtpEmailMessageVersionsInner sendSmtpEmailMessageVersionsInner = (SendSmtpEmailMessageVersionsInner) o;
    return Objects.equals(this.to, sendSmtpEmailMessageVersionsInner.to) &&
        Objects.equals(this.params, sendSmtpEmailMessageVersionsInner.params) &&
        Objects.equals(this.bcc, sendSmtpEmailMessageVersionsInner.bcc) &&
        Objects.equals(this.cc, sendSmtpEmailMessageVersionsInner.cc) &&
        Objects.equals(this.replyTo, sendSmtpEmailMessageVersionsInner.replyTo) &&
        Objects.equals(this.subject, sendSmtpEmailMessageVersionsInner.subject) &&
        Objects.equals(this.htmlContent, sendSmtpEmailMessageVersionsInner.htmlContent) &&
        Objects.equals(this.textContent, sendSmtpEmailMessageVersionsInner.textContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, params, bcc, cc, replyTo, subject, htmlContent, textContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendSmtpEmailMessageVersionsInner {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    htmlContent: ").append(toIndentedString(htmlContent)).append("\n");
    sb.append("    textContent: ").append(toIndentedString(textContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `to` to the URL query string
    if (getTo() != null) {
      for (int i = 0; i < getTo().size(); i++) {
        if (getTo().get(i) != null) {
          joiner.add(getTo().get(i).toUrlQueryString(String.format("%sto%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `params` to the URL query string
    if (getParams() != null) {
      for (String _key : getParams().keySet()) {
        try {
          joiner.add(String.format("%sparams%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getParams().get(_key), URLEncoder.encode(String.valueOf(getParams().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `bcc` to the URL query string
    if (getBcc() != null) {
      for (int i = 0; i < getBcc().size(); i++) {
        if (getBcc().get(i) != null) {
          joiner.add(getBcc().get(i).toUrlQueryString(String.format("%sbcc%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `cc` to the URL query string
    if (getCc() != null) {
      for (int i = 0; i < getCc().size(); i++) {
        if (getCc().get(i) != null) {
          joiner.add(getCc().get(i).toUrlQueryString(String.format("%scc%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `replyTo` to the URL query string
    if (getReplyTo() != null) {
      joiner.add(getReplyTo().toUrlQueryString(prefix + "replyTo" + suffix));
    }

    // add `subject` to the URL query string
    if (getSubject() != null) {
      try {
        joiner.add(String.format("%ssubject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSubject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `htmlContent` to the URL query string
    if (getHtmlContent() != null) {
      try {
        joiner.add(String.format("%shtmlContent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHtmlContent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `textContent` to the URL query string
    if (getTextContent() != null) {
      try {
        joiner.add(String.format("%stextContent%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTextContent()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

