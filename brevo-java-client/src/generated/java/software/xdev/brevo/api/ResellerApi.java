/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.xdev.brevo.api;

import com.fasterxml.jackson.core.type.TypeReference;

import software.xdev.brevo.client.ApiException;
import software.xdev.brevo.client.ApiClient;
import software.xdev.brevo.client.Configuration;
import software.xdev.brevo.client.Pair;

import software.xdev.brevo.model.AddChildDomain;
import software.xdev.brevo.model.AddCredits;
import software.xdev.brevo.model.CreateChild;
import software.xdev.brevo.model.CreateReseller;
import software.xdev.brevo.model.ErrorModel;
import software.xdev.brevo.model.GetChildAccountCreationStatus;
import software.xdev.brevo.model.GetChildDomain;
import software.xdev.brevo.model.GetChildInfo;
import software.xdev.brevo.model.GetChildrenList;
import software.xdev.brevo.model.GetSsoToken;
import software.xdev.brevo.model.ManageIp;
import software.xdev.brevo.model.RemainingCreditModel;
import software.xdev.brevo.model.RemoveCredits;
import software.xdev.brevo.model.UpdateChild;
import software.xdev.brevo.model.UpdateChildAccountStatus;
import software.xdev.brevo.model.UpdateChildDomain;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

public class ResellerApi {


  private ApiClient apiClient;

  public ResellerApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ResellerApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Add Email and/or SMS credits to a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param addCredits Values to post to add credit to a specific child account (required)
   * @return RemainingCreditModel
   * @throws ApiException if fails to make API call
   */
  public RemainingCreditModel addCredits(String childIdentifier, AddCredits addCredits) throws ApiException {
    return this.addCredits(childIdentifier, addCredits, Collections.emptyMap());
  }


  /**
   * Add Email and/or SMS credits to a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param addCredits Values to post to add credit to a specific child account (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RemainingCreditModel
   * @throws ApiException if fails to make API call
   */
  public RemainingCreditModel addCredits(String childIdentifier, AddCredits addCredits, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = addCredits;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling addCredits");
    }
    
    // verify the required parameter 'addCredits' is set
    if (addCredits == null) {
      throw new ApiException(400, "Missing the required parameter 'addCredits' when calling addCredits");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/credits/add"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<RemainingCreditModel> localVarReturnType = new TypeReference<RemainingCreditModel>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Associate a dedicated IP to the child
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param ip IP to associate (required)
   * @throws ApiException if fails to make API call
   */
  public void associateIpToChild(String childIdentifier, ManageIp ip) throws ApiException {
    this.associateIpToChild(childIdentifier, ip, Collections.emptyMap());
  }


  /**
   * Associate a dedicated IP to the child
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param ip IP to associate (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void associateIpToChild(String childIdentifier, ManageIp ip, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ip;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling associateIpToChild");
    }
    
    // verify the required parameter 'ip' is set
    if (ip == null) {
      throw new ApiException(400, "Missing the required parameter 'ip' when calling associateIpToChild");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/ips/associate"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a domain for a child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account. (required)
   * @throws ApiException if fails to make API call
   */
  public void createChildDomain(String childIdentifier, AddChildDomain addChildDomain) throws ApiException {
    this.createChildDomain(childIdentifier, addChildDomain, Collections.emptyMap());
  }


  /**
   * Create a domain for a child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void createChildDomain(String childIdentifier, AddChildDomain addChildDomain, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = addChildDomain;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling createChildDomain");
    }
    
    // verify the required parameter 'addChildDomain' is set
    if (addChildDomain == null) {
      throw new ApiException(400, "Missing the required parameter 'addChildDomain' when calling createChildDomain");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/domains"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Creates a reseller child
   * 
   * @param createChild reseller child to add (optional)
   * @return CreateReseller
   * @throws ApiException if fails to make API call
   */
  public CreateReseller createResellerChild(CreateChild createChild) throws ApiException {
    return this.createResellerChild(createChild, Collections.emptyMap());
  }


  /**
   * Creates a reseller child
   * 
   * @param createChild reseller child to add (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateReseller
   * @throws ApiException if fails to make API call
   */
  public CreateReseller createResellerChild(CreateChild createChild, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createChild;
    
    // create path and map variables
    String localVarPath = "/reseller/children";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<CreateReseller> localVarReturnType = new TypeReference<CreateReseller>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param domainName Pass the existing domain that needs to be deleted (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteChildDomain(String childIdentifier, String domainName) throws ApiException {
    this.deleteChildDomain(childIdentifier, domainName, Collections.emptyMap());
  }


  /**
   * Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param domainName Pass the existing domain that needs to be deleted (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteChildDomain(String childIdentifier, String domainName, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling deleteChildDomain");
    }
    
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(400, "Missing the required parameter 'domainName' when calling deleteChildDomain");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/domains/{domainName}"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()))
      .replaceAll("\\{" + "domainName" + "\\}", apiClient.escapeString(domainName.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete a single reseller child based on the child identifier supplied
   * 
   * @param childIdentifier Either auth key or child id of reseller&#39;s child (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteResellerChild(String childIdentifier) throws ApiException {
    this.deleteResellerChild(childIdentifier, Collections.emptyMap());
  }


  /**
   * Delete a single reseller child based on the child identifier supplied
   * 
   * @param childIdentifier Either auth key or child id of reseller&#39;s child (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteResellerChild(String childIdentifier, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling deleteResellerChild");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Dissociate a dedicated IP to the child
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param ip IP to dissociate (required)
   * @throws ApiException if fails to make API call
   */
  public void dissociateIpFromChild(String childIdentifier, ManageIp ip) throws ApiException {
    this.dissociateIpFromChild(childIdentifier, ip, Collections.emptyMap());
  }


  /**
   * Dissociate a dedicated IP to the child
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param ip IP to dissociate (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void dissociateIpFromChild(String childIdentifier, ManageIp ip, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = ip;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling dissociateIpFromChild");
    }
    
    // verify the required parameter 'ip' is set
    if (ip == null) {
      throw new ApiException(400, "Missing the required parameter 'ip' when calling dissociateIpFromChild");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/ips/dissociate"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @return GetChildAccountCreationStatus
   * @throws ApiException if fails to make API call
   */
  public GetChildAccountCreationStatus getChildAccountCreationStatus(String childIdentifier) throws ApiException {
    return this.getChildAccountCreationStatus(childIdentifier, Collections.emptyMap());
  }


  /**
   * Get the status of a reseller&#39;s child account creation, whether it is successfully created (exists) or not based on the childIdentifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetChildAccountCreationStatus
   * @throws ApiException if fails to make API call
   */
  public GetChildAccountCreationStatus getChildAccountCreationStatus(String childIdentifier, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling getChildAccountCreationStatus");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/accountCreationStatus"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<GetChildAccountCreationStatus> localVarReturnType = new TypeReference<GetChildAccountCreationStatus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all sender domains for a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @return List&lt;GetChildDomain&gt;
   * @throws ApiException if fails to make API call
   */
  public List<GetChildDomain> getChildDomains(String childIdentifier) throws ApiException {
    return this.getChildDomains(childIdentifier, Collections.emptyMap());
  }


  /**
   * Get all sender domains for a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;GetChildDomain&gt;
   * @throws ApiException if fails to make API call
   */
  public List<GetChildDomain> getChildDomains(String childIdentifier, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling getChildDomains");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/domains"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<List<GetChildDomain>> localVarReturnType = new TypeReference<List<GetChildDomain>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a child account&#39;s details
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @return GetChildInfo
   * @throws ApiException if fails to make API call
   */
  public GetChildInfo getChildInfo(String childIdentifier) throws ApiException {
    return this.getChildInfo(childIdentifier, Collections.emptyMap());
  }


  /**
   * Get a child account&#39;s details
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetChildInfo
   * @throws ApiException if fails to make API call
   */
  public GetChildInfo getChildInfo(String childIdentifier, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling getChildInfo");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<GetChildInfo> localVarReturnType = new TypeReference<GetChildInfo>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get the list of all children accounts
   * 
   * @param limit Number of documents for child accounts information per page (optional, default to 10)
   * @param offset Index of the first document in the page (optional, default to 0)
   * @return GetChildrenList
   * @throws ApiException if fails to make API call
   */
  public GetChildrenList getResellerChilds(Long limit, Long offset) throws ApiException {
    return this.getResellerChilds(limit, offset, Collections.emptyMap());
  }


  /**
   * Get the list of all children accounts
   * 
   * @param limit Number of documents for child accounts information per page (optional, default to 10)
   * @param offset Index of the first document in the page (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetChildrenList
   * @throws ApiException if fails to make API call
   */
  public GetChildrenList getResellerChilds(Long limit, Long offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/reseller/children";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<GetChildrenList> localVarReturnType = new TypeReference<GetChildrenList>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get session token to access Brevo (SSO)
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @return GetSsoToken
   * @throws ApiException if fails to make API call
   */
  public GetSsoToken getSsoToken(String childIdentifier) throws ApiException {
    return this.getSsoToken(childIdentifier, Collections.emptyMap());
  }


  /**
   * Get session token to access Brevo (SSO)
   * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern &#x3D;&gt; https:/email.mydomain.com/login/sso?token&#x3D;[token]
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetSsoToken
   * @throws ApiException if fails to make API call
   */
  public GetSsoToken getSsoToken(String childIdentifier, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling getSsoToken");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/auth"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<GetSsoToken> localVarReturnType = new TypeReference<GetSsoToken>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Remove Email and/or SMS credits from a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param removeCredits Values to post to remove email or SMS credits from a specific child account (required)
   * @return RemainingCreditModel
   * @throws ApiException if fails to make API call
   */
  public RemainingCreditModel removeCredits(String childIdentifier, RemoveCredits removeCredits) throws ApiException {
    return this.removeCredits(childIdentifier, removeCredits, Collections.emptyMap());
  }


  /**
   * Remove Email and/or SMS credits from a specific child account
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param removeCredits Values to post to remove email or SMS credits from a specific child account (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RemainingCreditModel
   * @throws ApiException if fails to make API call
   */
  public RemainingCreditModel removeCredits(String childIdentifier, RemoveCredits removeCredits, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = removeCredits;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling removeCredits");
    }
    
    // verify the required parameter 'removeCredits' is set
    if (removeCredits == null) {
      throw new ApiException(400, "Missing the required parameter 'removeCredits' when calling removeCredits");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/credits/remove"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<RemainingCreditModel> localVarReturnType = new TypeReference<RemainingCreditModel>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update info of reseller&#39;s child account status based on the identifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param updateChildAccountStatus values to update in child account status (required)
   * @throws ApiException if fails to make API call
   */
  public void updateChildAccountStatus(String childIdentifier, UpdateChildAccountStatus updateChildAccountStatus) throws ApiException {
    this.updateChildAccountStatus(childIdentifier, updateChildAccountStatus, Collections.emptyMap());
  }


  /**
   * Update info of reseller&#39;s child account status based on the identifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param updateChildAccountStatus values to update in child account status (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateChildAccountStatus(String childIdentifier, UpdateChildAccountStatus updateChildAccountStatus, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updateChildAccountStatus;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling updateChildAccountStatus");
    }
    
    // verify the required parameter 'updateChildAccountStatus' is set
    if (updateChildAccountStatus == null) {
      throw new ApiException(400, "Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/accountStatus"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param domainName Pass the existing domain that needs to be updated (required)
   * @param updateChildDomain value to update for sender domain (required)
   * @throws ApiException if fails to make API call
   */
  public void updateChildDomain(String childIdentifier, String domainName, UpdateChildDomain updateChildDomain) throws ApiException {
    this.updateChildDomain(childIdentifier, domainName, updateChildDomain, Collections.emptyMap());
  }


  /**
   * Update the sender domain of reseller&#39;s child based on the childIdentifier and domainName passed
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param domainName Pass the existing domain that needs to be updated (required)
   * @param updateChildDomain value to update for sender domain (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateChildDomain(String childIdentifier, String domainName, UpdateChildDomain updateChildDomain, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = updateChildDomain;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling updateChildDomain");
    }
    
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(400, "Missing the required parameter 'domainName' when calling updateChildDomain");
    }
    
    // verify the required parameter 'updateChildDomain' is set
    if (updateChildDomain == null) {
      throw new ApiException(400, "Missing the required parameter 'updateChildDomain' when calling updateChildDomain");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}/domains/{domainName}"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()))
      .replaceAll("\\{" + "domainName" + "\\}", apiClient.escapeString(domainName.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update info of reseller&#39;s child based on the child identifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param resellerChild values to update in child profile (required)
   * @throws ApiException if fails to make API call
   */
  public void updateResellerChild(String childIdentifier, UpdateChild resellerChild) throws ApiException {
    this.updateResellerChild(childIdentifier, resellerChild, Collections.emptyMap());
  }


  /**
   * Update info of reseller&#39;s child based on the child identifier supplied
   * 
   * @param childIdentifier Either auth key or id of reseller&#39;s child (required)
   * @param resellerChild values to update in child profile (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateResellerChild(String childIdentifier, UpdateChild resellerChild, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = resellerChild;
    
    // verify the required parameter 'childIdentifier' is set
    if (childIdentifier == null) {
      throw new ApiException(400, "Missing the required parameter 'childIdentifier' when calling updateResellerChild");
    }
    
    // verify the required parameter 'resellerChild' is set
    if (resellerChild == null) {
      throw new ApiException(400, "Missing the required parameter 'resellerChild' when calling updateResellerChild");
    }
    
    // create path and map variables
    String localVarPath = "/reseller/children/{childIdentifier}"
      .replaceAll("\\{" + "childIdentifier" + "\\}", apiClient.escapeString(childIdentifier.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
