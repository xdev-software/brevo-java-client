/*
 * Brevo API
 * Brevo API documentation by XDEV Software based on https://api.brevo.com/v3/swagger_definition_v3.yml
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package software.xdev.brevo.api;

import com.fasterxml.jackson.core.type.TypeReference;

import software.xdev.brevo.client.ApiException;
import software.xdev.brevo.client.ApiClient;
import software.xdev.brevo.client.Configuration;
import software.xdev.brevo.client.Pair;

import software.xdev.brevo.model.CrmDealsIdPatchRequest;
import software.xdev.brevo.model.CrmDealsLinkUnlinkIdPatchRequest;
import software.xdev.brevo.model.CrmDealsPost201Response;
import software.xdev.brevo.model.CrmDealsPostRequest;
import software.xdev.brevo.model.Deal;
import software.xdev.brevo.model.DealAttributesInner;
import software.xdev.brevo.model.DealsList;
import software.xdev.brevo.model.ErrorModel;
import software.xdev.brevo.model.Pipeline;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DealsApi {


  private ApiClient apiClient;

  public DealsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DealsApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Get deal attributes
   * 
   * @return List&lt;DealAttributesInner&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DealAttributesInner> crmAttributesDealsGet() throws ApiException {
    return this.crmAttributesDealsGet(Collections.emptyMap());
  }


  /**
   * Get deal attributes
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;DealAttributesInner&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DealAttributesInner> crmAttributesDealsGet(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/crm/attributes/deals";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<List<DealAttributesInner>> localVarReturnType = new TypeReference<List<DealAttributesInner>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all deals
   * 
   * @param filtersAttributesDealName Filter by attributes. If you have filter for owner on your side please send it as &#x60;filters[attributes.deal_owner]&#x60;. (optional)
   * @param filtersLinkedCompaniesIds Filter by linked companies ids (optional)
   * @param filtersLinkedContactsIds Filter by linked companies ids (optional)
   * @param offset Index of the first document of the page (optional)
   * @param limit Number of documents per page (optional)
   * @param sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)
   * @return DealsList
   * @throws ApiException if fails to make API call
   */
  public DealsList crmDealsGet(String filtersAttributesDealName, String filtersLinkedCompaniesIds, String filtersLinkedContactsIds, Long offset, Long limit, String sort) throws ApiException {
    return this.crmDealsGet(filtersAttributesDealName, filtersLinkedCompaniesIds, filtersLinkedContactsIds, offset, limit, sort, Collections.emptyMap());
  }


  /**
   * Get all deals
   * 
   * @param filtersAttributesDealName Filter by attributes. If you have filter for owner on your side please send it as &#x60;filters[attributes.deal_owner]&#x60;. (optional)
   * @param filtersLinkedCompaniesIds Filter by linked companies ids (optional)
   * @param filtersLinkedContactsIds Filter by linked companies ids (optional)
   * @param offset Index of the first document of the page (optional)
   * @param limit Number of documents per page (optional)
   * @param sort Sort the results in the ascending/descending order. Default order is **descending** by creation if &#x60;sort&#x60; is not passed (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return DealsList
   * @throws ApiException if fails to make API call
   */
  public DealsList crmDealsGet(String filtersAttributesDealName, String filtersLinkedCompaniesIds, String filtersLinkedContactsIds, Long offset, Long limit, String sort, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/crm/deals";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("filters[attributes.deal_name]", filtersAttributesDealName));
    localVarQueryParams.addAll(apiClient.parameterToPair("filters[linkedCompaniesIds]", filtersLinkedCompaniesIds));
    localVarQueryParams.addAll(apiClient.parameterToPair("filters[linkedContactsIds]", filtersLinkedContactsIds));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<DealsList> localVarReturnType = new TypeReference<DealsList>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete a deal
   * 
   * @param id  (required)
   * @throws ApiException if fails to make API call
   */
  public void crmDealsIdDelete(String id) throws ApiException {
    this.crmDealsIdDelete(id, Collections.emptyMap());
  }


  /**
   * Delete a deal
   * 
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void crmDealsIdDelete(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling crmDealsIdDelete");
    }
    
    // create path and map variables
    String localVarPath = "/crm/deals/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get a deal
   * 
   * @param id  (required)
   * @return Deal
   * @throws ApiException if fails to make API call
   */
  public Deal crmDealsIdGet(String id) throws ApiException {
    return this.crmDealsIdGet(id, Collections.emptyMap());
  }


  /**
   * Get a deal
   * 
   * @param id  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return Deal
   * @throws ApiException if fails to make API call
   */
  public Deal crmDealsIdGet(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling crmDealsIdGet");
    }
    
    // create path and map variables
    String localVarPath = "/crm/deals/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<Deal> localVarReturnType = new TypeReference<Deal>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update a deal
   * 
   * @param id  (required)
   * @param crmDealsIdPatchRequest Updated deal details. (required)
   * @throws ApiException if fails to make API call
   */
  public void crmDealsIdPatch(String id, CrmDealsIdPatchRequest crmDealsIdPatchRequest) throws ApiException {
    this.crmDealsIdPatch(id, crmDealsIdPatchRequest, Collections.emptyMap());
  }


  /**
   * Update a deal
   * 
   * @param id  (required)
   * @param crmDealsIdPatchRequest Updated deal details. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void crmDealsIdPatch(String id, CrmDealsIdPatchRequest crmDealsIdPatchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = crmDealsIdPatchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling crmDealsIdPatch");
    }
    
    // verify the required parameter 'crmDealsIdPatchRequest' is set
    if (crmDealsIdPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'crmDealsIdPatchRequest' when calling crmDealsIdPatch");
    }
    
    // create path and map variables
    String localVarPath = "/crm/deals/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Link and Unlink a deal with contacts and companies
   * 
   * @param id  (required)
   * @param crmDealsLinkUnlinkIdPatchRequest Linked / Unlinked contacts and companies ids. (required)
   * @throws ApiException if fails to make API call
   */
  public void crmDealsLinkUnlinkIdPatch(String id, CrmDealsLinkUnlinkIdPatchRequest crmDealsLinkUnlinkIdPatchRequest) throws ApiException {
    this.crmDealsLinkUnlinkIdPatch(id, crmDealsLinkUnlinkIdPatchRequest, Collections.emptyMap());
  }


  /**
   * Link and Unlink a deal with contacts and companies
   * 
   * @param id  (required)
   * @param crmDealsLinkUnlinkIdPatchRequest Linked / Unlinked contacts and companies ids. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void crmDealsLinkUnlinkIdPatch(String id, CrmDealsLinkUnlinkIdPatchRequest crmDealsLinkUnlinkIdPatchRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = crmDealsLinkUnlinkIdPatchRequest;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling crmDealsLinkUnlinkIdPatch");
    }
    
    // verify the required parameter 'crmDealsLinkUnlinkIdPatchRequest' is set
    if (crmDealsLinkUnlinkIdPatchRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'crmDealsLinkUnlinkIdPatchRequest' when calling crmDealsLinkUnlinkIdPatch");
    }
    
    // create path and map variables
    String localVarPath = "/crm/deals/link-unlink/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    apiClient.invokeAPI(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Create a deal
   * 
   * @param crmDealsPostRequest Deal create data. (required)
   * @return CrmDealsPost201Response
   * @throws ApiException if fails to make API call
   */
  public CrmDealsPost201Response crmDealsPost(CrmDealsPostRequest crmDealsPostRequest) throws ApiException {
    return this.crmDealsPost(crmDealsPostRequest, Collections.emptyMap());
  }


  /**
   * Create a deal
   * 
   * @param crmDealsPostRequest Deal create data. (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CrmDealsPost201Response
   * @throws ApiException if fails to make API call
   */
  public CrmDealsPost201Response crmDealsPost(CrmDealsPostRequest crmDealsPostRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = crmDealsPostRequest;
    
    // verify the required parameter 'crmDealsPostRequest' is set
    if (crmDealsPostRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'crmDealsPostRequest' when calling crmDealsPost");
    }
    
    // create path and map variables
    String localVarPath = "/crm/deals";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<CrmDealsPost201Response> localVarReturnType = new TypeReference<CrmDealsPost201Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get all pipelines
   * 
   * @return List&lt;Pipeline&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Pipeline> crmPipelineDetailsAllGet() throws ApiException {
    return this.crmPipelineDetailsAllGet(Collections.emptyMap());
  }


  /**
   * Get all pipelines
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Pipeline&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Pipeline> crmPipelineDetailsAllGet(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/crm/pipeline/details/all";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<List<Pipeline>> localVarReturnType = new TypeReference<List<Pipeline>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get pipeline stages
   * This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID} instead.
   * @return Pipeline
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public Pipeline crmPipelineDetailsGet() throws ApiException {
    return this.crmPipelineDetailsGet(Collections.emptyMap());
  }


  /**
   * Get pipeline stages
   * This endpoint is deprecated. Prefer /crm/pipeline/details/{pipelineID} instead.
   * @param additionalHeaders additionalHeaders for this call
   * @return Pipeline
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public Pipeline crmPipelineDetailsGet(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/crm/pipeline/details";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<Pipeline> localVarReturnType = new TypeReference<Pipeline>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get a pipeline
   * 
   * @param pipelineID  (required)
   * @return List&lt;Pipeline&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Pipeline> crmPipelineDetailsPipelineIDGet(String pipelineID) throws ApiException {
    return this.crmPipelineDetailsPipelineIDGet(pipelineID, Collections.emptyMap());
  }


  /**
   * Get a pipeline
   * 
   * @param pipelineID  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return List&lt;Pipeline&gt;
   * @throws ApiException if fails to make API call
   */
  public List<Pipeline> crmPipelineDetailsPipelineIDGet(String pipelineID, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'pipelineID' is set
    if (pipelineID == null) {
      throw new ApiException(400, "Missing the required parameter 'pipelineID' when calling crmPipelineDetailsPipelineIDGet");
    }
    
    // create path and map variables
    String localVarPath = "/crm/pipeline/details/{pipelineID}"
      .replaceAll("\\{" + "pipelineID" + "\\}", apiClient.escapeString(pipelineID.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "api-key" };

    TypeReference<List<Pipeline>> localVarReturnType = new TypeReference<List<Pipeline>>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
